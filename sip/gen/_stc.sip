//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2020 by Total Control Software
// License:   wxWindows License

%Module( name=wx._stc,
         keyword_arguments="All",
         use_argument_names=True,
         all_raise_py_exception=True,
         language="C++")
{
    %AutoPyName(remove_leading="wx")
};

%Copying
    Copyright: (c) 2020 by Total Control Software
    License:   wxWindows License
%End

%DefaultDocstringFormat(name="deindented")

%Extract(id=pycode_stc, order=5)
# This file is generated by wxPython's SIP generator.  Do not edit by hand.
#
# Copyright: (c) 2020 by Total Control Software
# License:   wxWindows License

"""
The :ref:`wx.stc.StyledTextCrtl` class provided by this module is a text widget
primarily intended for use as a syntax highlighting source code editor.  It is
based on the popular Scintilla widget.
"""

from ._stc import *

%End

//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wxPython/wxpy_api.h>
#include <wx/stc/stc.h>
#include "wxpybuffer.h"
%End

%Import _core.sip


//---------------------------------------------------------------------------

const int wxSTC_INVALID_POSITION;
const int wxSTC_START;
const int wxSTC_OPTIONAL_START;
const int wxSTC_LEXER_START;
const int wxSTC_WS_INVISIBLE;
const int wxSTC_WS_VISIBLEALWAYS;
const int wxSTC_WS_VISIBLEAFTERINDENT;
const int wxSTC_WS_VISIBLEONLYININDENT;
const int wxSTC_TD_LONGARROW;
const int wxSTC_TD_STRIKEOUT;
const int wxSTC_EOL_CRLF;
const int wxSTC_EOL_CR;
const int wxSTC_EOL_LF;
const int wxSTC_CP_UTF8;
const int wxSTC_IME_WINDOWED;
const int wxSTC_IME_INLINE;
const int wxSTC_MARKER_MAX;
const int wxSTC_MARK_CIRCLE;
const int wxSTC_MARK_ROUNDRECT;
const int wxSTC_MARK_ARROW;
const int wxSTC_MARK_SMALLRECT;
const int wxSTC_MARK_SHORTARROW;
const int wxSTC_MARK_EMPTY;
const int wxSTC_MARK_ARROWDOWN;
const int wxSTC_MARK_MINUS;
const int wxSTC_MARK_PLUS;
const int wxSTC_MARK_VLINE;
const int wxSTC_MARK_LCORNER;
const int wxSTC_MARK_TCORNER;
const int wxSTC_MARK_BOXPLUS;
const int wxSTC_MARK_BOXPLUSCONNECTED;
const int wxSTC_MARK_BOXMINUS;
const int wxSTC_MARK_BOXMINUSCONNECTED;
const int wxSTC_MARK_LCORNERCURVE;
const int wxSTC_MARK_TCORNERCURVE;
const int wxSTC_MARK_CIRCLEPLUS;
const int wxSTC_MARK_CIRCLEPLUSCONNECTED;
const int wxSTC_MARK_CIRCLEMINUS;
const int wxSTC_MARK_CIRCLEMINUSCONNECTED;
const int wxSTC_MARK_BACKGROUND;
const int wxSTC_MARK_DOTDOTDOT;
const int wxSTC_MARK_ARROWS;
const int wxSTC_MARK_PIXMAP;
const int wxSTC_MARK_FULLRECT;
const int wxSTC_MARK_LEFTRECT;
const int wxSTC_MARK_AVAILABLE;
const int wxSTC_MARK_UNDERLINE;
const int wxSTC_MARK_RGBAIMAGE;
const int wxSTC_MARK_BOOKMARK;
const int wxSTC_MARK_CHARACTER;
const int wxSTC_MARKNUM_FOLDEREND;
const int wxSTC_MARKNUM_FOLDEROPENMID;
const int wxSTC_MARKNUM_FOLDERMIDTAIL;
const int wxSTC_MARKNUM_FOLDERTAIL;
const int wxSTC_MARKNUM_FOLDERSUB;
const int wxSTC_MARKNUM_FOLDER;
const int wxSTC_MARKNUM_FOLDEROPEN;
%PostInitialisationCode
    PyDict_SetItemString(sipModuleDict, "STC_MASK_FOLDERS", wxPyInt_FromLong(static_cast<int>(wxSTC_MASK_FOLDERS)));
%End
const int wxSTC_MAX_MARGIN;
const int wxSTC_MARGIN_SYMBOL;
const int wxSTC_MARGIN_NUMBER;
const int wxSTC_MARGIN_BACK;
const int wxSTC_MARGIN_FORE;
const int wxSTC_MARGIN_TEXT;
const int wxSTC_MARGIN_RTEXT;
const int wxSTC_MARGIN_COLOUR;
const int wxSTC_STYLE_DEFAULT;
const int wxSTC_STYLE_LINENUMBER;
const int wxSTC_STYLE_BRACELIGHT;
const int wxSTC_STYLE_BRACEBAD;
const int wxSTC_STYLE_CONTROLCHAR;
const int wxSTC_STYLE_INDENTGUIDE;
const int wxSTC_STYLE_CALLTIP;
const int wxSTC_STYLE_FOLDDISPLAYTEXT;
const int wxSTC_STYLE_LASTPREDEFINED;
const int wxSTC_STYLE_MAX;
const int wxSTC_CHARSET_ANSI;
const int wxSTC_CHARSET_DEFAULT;
const int wxSTC_CHARSET_BALTIC;
const int wxSTC_CHARSET_CHINESEBIG5;
const int wxSTC_CHARSET_EASTEUROPE;
const int wxSTC_CHARSET_GB2312;
const int wxSTC_CHARSET_GREEK;
const int wxSTC_CHARSET_HANGUL;
const int wxSTC_CHARSET_MAC;
const int wxSTC_CHARSET_OEM;
const int wxSTC_CHARSET_RUSSIAN;
const int wxSTC_CHARSET_OEM866;
const int wxSTC_CHARSET_CYRILLIC;
const int wxSTC_CHARSET_SHIFTJIS;
const int wxSTC_CHARSET_SYMBOL;
const int wxSTC_CHARSET_TURKISH;
const int wxSTC_CHARSET_JOHAB;
const int wxSTC_CHARSET_HEBREW;
const int wxSTC_CHARSET_ARABIC;
const int wxSTC_CHARSET_VIETNAMESE;
const int wxSTC_CHARSET_THAI;
const int wxSTC_CHARSET_8859_15;
const int wxSTC_CASE_MIXED;
const int wxSTC_CASE_UPPER;
const int wxSTC_CASE_LOWER;
const int wxSTC_CASE_CAMEL;
const int wxSTC_FONT_SIZE_MULTIPLIER;
const int wxSTC_WEIGHT_NORMAL;
const int wxSTC_WEIGHT_SEMIBOLD;
const int wxSTC_WEIGHT_BOLD;
const int wxSTC_INDIC_PLAIN;
const int wxSTC_INDIC_SQUIGGLE;
const int wxSTC_INDIC_TT;
const int wxSTC_INDIC_DIAGONAL;
const int wxSTC_INDIC_STRIKE;
const int wxSTC_INDIC_HIDDEN;
const int wxSTC_INDIC_BOX;
const int wxSTC_INDIC_ROUNDBOX;
const int wxSTC_INDIC_STRAIGHTBOX;
const int wxSTC_INDIC_DASH;
const int wxSTC_INDIC_DOTS;
const int wxSTC_INDIC_SQUIGGLELOW;
const int wxSTC_INDIC_DOTBOX;
const int wxSTC_INDIC_SQUIGGLEPIXMAP;
const int wxSTC_INDIC_COMPOSITIONTHICK;
const int wxSTC_INDIC_COMPOSITIONTHIN;
const int wxSTC_INDIC_FULLBOX;
const int wxSTC_INDIC_TEXTFORE;
const int wxSTC_INDIC_POINT;
const int wxSTC_INDIC_POINTCHARACTER;
const int wxSTC_INDIC_IME;
const int wxSTC_INDIC_IME_MAX;
const int wxSTC_INDIC_MAX;
const int wxSTC_INDIC_CONTAINER;
const int wxSTC_INDICVALUEBIT;
const int wxSTC_INDICVALUEMASK;
const int wxSTC_INDICFLAG_VALUEFORE;
const int wxSTC_IV_NONE;
const int wxSTC_IV_REAL;
const int wxSTC_IV_LOOKFORWARD;
const int wxSTC_IV_LOOKBOTH;
const int wxSTC_PRINT_NORMAL;
const int wxSTC_PRINT_INVERTLIGHT;
const int wxSTC_PRINT_BLACKONWHITE;
const int wxSTC_PRINT_COLOURONWHITE;
const int wxSTC_PRINT_COLOURONWHITEDEFAULTBG;
const int wxSTC_FIND_WHOLEWORD;
const int wxSTC_FIND_MATCHCASE;
const int wxSTC_FIND_WORDSTART;
const int wxSTC_FIND_REGEXP;
const int wxSTC_FIND_POSIX;
const int wxSTC_FOLDLEVELBASE;
const int wxSTC_FOLDLEVELWHITEFLAG;
const int wxSTC_FOLDLEVELHEADERFLAG;
const int wxSTC_FOLDLEVELNUMBERMASK;
const int wxSTC_FOLDDISPLAYTEXT_HIDDEN;
const int wxSTC_FOLDDISPLAYTEXT_STANDARD;
const int wxSTC_FOLDDISPLAYTEXT_BOXED;
const int wxSTC_FOLDACTION_CONTRACT;
const int wxSTC_FOLDACTION_EXPAND;
const int wxSTC_FOLDACTION_TOGGLE;
const int wxSTC_AUTOMATICFOLD_SHOW;
const int wxSTC_AUTOMATICFOLD_CLICK;
const int wxSTC_AUTOMATICFOLD_CHANGE;
const int wxSTC_FOLDFLAG_LINEBEFORE_EXPANDED;
const int wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED;
const int wxSTC_FOLDFLAG_LINEAFTER_EXPANDED;
const int wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED;
const int wxSTC_FOLDFLAG_LEVELNUMBERS;
const int wxSTC_FOLDFLAG_LINESTATE;
const int wxSTC_TIME_FOREVER;
const int wxSTC_IDLESTYLING_NONE;
const int wxSTC_IDLESTYLING_TOVISIBLE;
const int wxSTC_IDLESTYLING_AFTERVISIBLE;
const int wxSTC_IDLESTYLING_ALL;
const int wxSTC_WRAP_NONE;
const int wxSTC_WRAP_WORD;
const int wxSTC_WRAP_CHAR;
const int wxSTC_WRAP_WHITESPACE;
const int wxSTC_WRAPVISUALFLAG_NONE;
const int wxSTC_WRAPVISUALFLAG_END;
const int wxSTC_WRAPVISUALFLAG_START;
const int wxSTC_WRAPVISUALFLAG_MARGIN;
const int wxSTC_WRAPVISUALFLAGLOC_DEFAULT;
const int wxSTC_WRAPVISUALFLAGLOC_END_BY_TEXT;
const int wxSTC_WRAPVISUALFLAGLOC_START_BY_TEXT;
const int wxSTC_WRAPINDENT_FIXED;
const int wxSTC_WRAPINDENT_SAME;
const int wxSTC_WRAPINDENT_INDENT;
const int wxSTC_CACHE_NONE;
const int wxSTC_CACHE_CARET;
const int wxSTC_CACHE_PAGE;
const int wxSTC_CACHE_DOCUMENT;
const int wxSTC_PHASES_ONE;
const int wxSTC_PHASES_TWO;
const int wxSTC_PHASES_MULTIPLE;
const int wxSTC_EFF_QUALITY_MASK;
const int wxSTC_EFF_QUALITY_DEFAULT;
const int wxSTC_EFF_QUALITY_NON_ANTIALIASED;
const int wxSTC_EFF_QUALITY_ANTIALIASED;
const int wxSTC_EFF_QUALITY_LCD_OPTIMIZED;
const int wxSTC_MULTIPASTE_ONCE;
const int wxSTC_MULTIPASTE_EACH;
const int wxSTC_EDGE_NONE;
const int wxSTC_EDGE_LINE;
const int wxSTC_EDGE_BACKGROUND;
const int wxSTC_EDGE_MULTILINE;
const int wxSTC_POPUP_NEVER;
const int wxSTC_POPUP_ALL;
const int wxSTC_POPUP_TEXT;
const int wxSTC_STATUS_OK;
const int wxSTC_STATUS_FAILURE;
const int wxSTC_STATUS_BADALLOC;
const int wxSTC_STATUS_WARN_START;
const int wxSTC_STATUS_WARN_REGEX;
const int wxSTC_CURSORNORMAL;
const int wxSTC_CURSORARROW;
const int wxSTC_CURSORWAIT;
const int wxSTC_CURSORREVERSEARROW;
const int wxSTC_VISIBLE_SLOP;
const int wxSTC_VISIBLE_STRICT;
const int wxSTC_CARET_SLOP;
const int wxSTC_CARET_STRICT;
const int wxSTC_CARET_JUMPS;
const int wxSTC_CARET_EVEN;
const int wxSTC_SEL_STREAM;
const int wxSTC_SEL_RECTANGLE;
const int wxSTC_SEL_LINES;
const int wxSTC_SEL_THIN;
const int wxSTC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE;
const int wxSTC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE;
const int wxSTC_MULTIAUTOC_ONCE;
const int wxSTC_MULTIAUTOC_EACH;
const int wxSTC_ORDER_PRESORTED;
const int wxSTC_ORDER_PERFORMSORT;
const int wxSTC_ORDER_CUSTOM;
const int wxSTC_CARETSTICKY_OFF;
const int wxSTC_CARETSTICKY_ON;
const int wxSTC_CARETSTICKY_WHITESPACE;
const int wxSTC_ALPHA_TRANSPARENT;
const int wxSTC_ALPHA_OPAQUE;
const int wxSTC_ALPHA_NOALPHA;
const int wxSTC_CARETSTYLE_INVISIBLE;
const int wxSTC_CARETSTYLE_LINE;
const int wxSTC_CARETSTYLE_BLOCK;
const int wxSTC_MARGINOPTION_NONE;
const int wxSTC_MARGINOPTION_SUBLINESELECT;
const int wxSTC_ANNOTATION_HIDDEN;
const int wxSTC_ANNOTATION_STANDARD;
const int wxSTC_ANNOTATION_BOXED;
const int wxSTC_ANNOTATION_INDENTED;
const int wxSTC_UNDO_MAY_COALESCE;
const int wxSTC_VS_NONE;
const int wxSTC_VS_RECTANGULARSELECTION;
const int wxSTC_VS_USERACCESSIBLE;
const int wxSTC_VS_NOWRAPLINESTART;
const int wxSTC_TECHNOLOGY_DEFAULT;
const int wxSTC_TECHNOLOGY_DIRECTWRITE;
const int wxSTC_LINE_END_TYPE_DEFAULT;
const int wxSTC_LINE_END_TYPE_UNICODE;
const int wxSTC_KEYWORDSET_MAX;
const int wxSTC_TYPE_BOOLEAN;
const int wxSTC_TYPE_INTEGER;
const int wxSTC_TYPE_STRING;
const int wxSTC_MOD_INSERTTEXT;
const int wxSTC_MOD_DELETETEXT;
const int wxSTC_MOD_CHANGESTYLE;
const int wxSTC_MOD_CHANGEFOLD;
const int wxSTC_PERFORMED_USER;
const int wxSTC_PERFORMED_UNDO;
const int wxSTC_PERFORMED_REDO;
const int wxSTC_MULTISTEPUNDOREDO;
const int wxSTC_LASTSTEPINUNDOREDO;
const int wxSTC_MOD_CHANGEMARKER;
const int wxSTC_MOD_BEFOREINSERT;
const int wxSTC_MOD_BEFOREDELETE;
const int wxSTC_MULTILINEUNDOREDO;
const int wxSTC_STARTACTION;
const int wxSTC_MOD_CHANGEINDICATOR;
const int wxSTC_MOD_CHANGELINESTATE;
const int wxSTC_MOD_CHANGEMARGIN;
const int wxSTC_MOD_CHANGEANNOTATION;
const int wxSTC_MOD_CONTAINER;
const int wxSTC_MOD_LEXERSTATE;
const int wxSTC_MOD_INSERTCHECK;
const int wxSTC_MOD_CHANGETABSTOPS;
const int wxSTC_MODEVENTMASKALL;
const int wxSTC_UPDATE_CONTENT;
const int wxSTC_UPDATE_SELECTION;
const int wxSTC_UPDATE_V_SCROLL;
const int wxSTC_UPDATE_H_SCROLL;
const int wxSTC_KEY_DOWN;
const int wxSTC_KEY_UP;
const int wxSTC_KEY_LEFT;
const int wxSTC_KEY_RIGHT;
const int wxSTC_KEY_HOME;
const int wxSTC_KEY_END;
const int wxSTC_KEY_PRIOR;
const int wxSTC_KEY_NEXT;
const int wxSTC_KEY_DELETE;
const int wxSTC_KEY_INSERT;
const int wxSTC_KEY_ESCAPE;
const int wxSTC_KEY_BACK;
const int wxSTC_KEY_TAB;
const int wxSTC_KEY_RETURN;
const int wxSTC_KEY_ADD;
const int wxSTC_KEY_SUBTRACT;
const int wxSTC_KEY_DIVIDE;
const int wxSTC_KEY_WIN;
const int wxSTC_KEY_RWIN;
const int wxSTC_KEY_MENU;
const int wxSTC_KEYMOD_NORM;
const int wxSTC_KEYMOD_SHIFT;
const int wxSTC_KEYMOD_CTRL;
const int wxSTC_KEYMOD_ALT;
const int wxSTC_KEYMOD_SUPER;
const int wxSTC_KEYMOD_META;
const int wxSTC_AC_FILLUP;
const int wxSTC_AC_DOUBLECLICK;
const int wxSTC_AC_TAB;
const int wxSTC_AC_NEWLINE;
const int wxSTC_AC_COMMAND;
const int wxSTC_LEX_CONTAINER;
const int wxSTC_LEX_NULL;
const int wxSTC_LEX_PYTHON;
const int wxSTC_LEX_CPP;
const int wxSTC_LEX_HTML;
const int wxSTC_LEX_XML;
const int wxSTC_LEX_PERL;
const int wxSTC_LEX_SQL;
const int wxSTC_LEX_VB;
const int wxSTC_LEX_PROPERTIES;
const int wxSTC_LEX_ERRORLIST;
const int wxSTC_LEX_MAKEFILE;
const int wxSTC_LEX_BATCH;
const int wxSTC_LEX_XCODE;
const int wxSTC_LEX_LATEX;
const int wxSTC_LEX_LUA;
const int wxSTC_LEX_DIFF;
const int wxSTC_LEX_CONF;
const int wxSTC_LEX_PASCAL;
const int wxSTC_LEX_AVE;
const int wxSTC_LEX_ADA;
const int wxSTC_LEX_LISP;
const int wxSTC_LEX_RUBY;
const int wxSTC_LEX_EIFFEL;
const int wxSTC_LEX_EIFFELKW;
const int wxSTC_LEX_TCL;
const int wxSTC_LEX_NNCRONTAB;
const int wxSTC_LEX_BULLANT;
const int wxSTC_LEX_VBSCRIPT;
const int wxSTC_LEX_BAAN;
const int wxSTC_LEX_MATLAB;
const int wxSTC_LEX_SCRIPTOL;
const int wxSTC_LEX_ASM;
const int wxSTC_LEX_CPPNOCASE;
const int wxSTC_LEX_FORTRAN;
const int wxSTC_LEX_F77;
const int wxSTC_LEX_CSS;
const int wxSTC_LEX_POV;
const int wxSTC_LEX_LOUT;
const int wxSTC_LEX_ESCRIPT;
const int wxSTC_LEX_PS;
const int wxSTC_LEX_NSIS;
const int wxSTC_LEX_MMIXAL;
const int wxSTC_LEX_CLW;
const int wxSTC_LEX_CLWNOCASE;
const int wxSTC_LEX_LOT;
const int wxSTC_LEX_YAML;
const int wxSTC_LEX_TEX;
const int wxSTC_LEX_METAPOST;
const int wxSTC_LEX_POWERBASIC;
const int wxSTC_LEX_FORTH;
const int wxSTC_LEX_ERLANG;
const int wxSTC_LEX_OCTAVE;
const int wxSTC_LEX_MSSQL;
const int wxSTC_LEX_VERILOG;
const int wxSTC_LEX_KIX;
const int wxSTC_LEX_GUI4CLI;
const int wxSTC_LEX_SPECMAN;
const int wxSTC_LEX_AU3;
const int wxSTC_LEX_APDL;
const int wxSTC_LEX_BASH;
const int wxSTC_LEX_ASN1;
const int wxSTC_LEX_VHDL;
const int wxSTC_LEX_CAML;
const int wxSTC_LEX_BLITZBASIC;
const int wxSTC_LEX_PUREBASIC;
const int wxSTC_LEX_HASKELL;
const int wxSTC_LEX_PHPSCRIPT;
const int wxSTC_LEX_TADS3;
const int wxSTC_LEX_REBOL;
const int wxSTC_LEX_SMALLTALK;
const int wxSTC_LEX_FLAGSHIP;
const int wxSTC_LEX_CSOUND;
const int wxSTC_LEX_FREEBASIC;
const int wxSTC_LEX_INNOSETUP;
const int wxSTC_LEX_OPAL;
const int wxSTC_LEX_SPICE;
const int wxSTC_LEX_D;
const int wxSTC_LEX_CMAKE;
const int wxSTC_LEX_GAP;
const int wxSTC_LEX_PLM;
const int wxSTC_LEX_PROGRESS;
const int wxSTC_LEX_ABAQUS;
const int wxSTC_LEX_ASYMPTOTE;
const int wxSTC_LEX_R;
const int wxSTC_LEX_MAGIK;
const int wxSTC_LEX_POWERSHELL;
const int wxSTC_LEX_MYSQL;
const int wxSTC_LEX_PO;
const int wxSTC_LEX_TAL;
const int wxSTC_LEX_COBOL;
const int wxSTC_LEX_TACL;
const int wxSTC_LEX_SORCUS;
const int wxSTC_LEX_POWERPRO;
const int wxSTC_LEX_NIMROD;
const int wxSTC_LEX_SML;
const int wxSTC_LEX_MARKDOWN;
const int wxSTC_LEX_TXT2TAGS;
const int wxSTC_LEX_A68K;
const int wxSTC_LEX_MODULA;
const int wxSTC_LEX_COFFEESCRIPT;
const int wxSTC_LEX_TCMD;
const int wxSTC_LEX_AVS;
const int wxSTC_LEX_ECL;
const int wxSTC_LEX_OSCRIPT;
const int wxSTC_LEX_VISUALPROLOG;
const int wxSTC_LEX_LITERATEHASKELL;
const int wxSTC_LEX_STTXT;
const int wxSTC_LEX_KVIRC;
const int wxSTC_LEX_RUST;
const int wxSTC_LEX_DMAP;
const int wxSTC_LEX_AS;
const int wxSTC_LEX_DMIS;
const int wxSTC_LEX_REGISTRY;
const int wxSTC_LEX_BIBTEX;
const int wxSTC_LEX_SREC;
const int wxSTC_LEX_IHEX;
const int wxSTC_LEX_TEHEX;
const int wxSTC_LEX_JSON;
const int wxSTC_LEX_EDIFACT;
const int wxSTC_LEX_AUTOMATIC;
const int wxSTC_P_DEFAULT;
const int wxSTC_P_COMMENTLINE;
const int wxSTC_P_NUMBER;
const int wxSTC_P_STRING;
const int wxSTC_P_CHARACTER;
const int wxSTC_P_WORD;
const int wxSTC_P_TRIPLE;
const int wxSTC_P_TRIPLEDOUBLE;
const int wxSTC_P_CLASSNAME;
const int wxSTC_P_DEFNAME;
const int wxSTC_P_OPERATOR;
const int wxSTC_P_IDENTIFIER;
const int wxSTC_P_COMMENTBLOCK;
const int wxSTC_P_STRINGEOL;
const int wxSTC_P_WORD2;
const int wxSTC_P_DECORATOR;
const int wxSTC_C_DEFAULT;
const int wxSTC_C_COMMENT;
const int wxSTC_C_COMMENTLINE;
const int wxSTC_C_COMMENTDOC;
const int wxSTC_C_NUMBER;
const int wxSTC_C_WORD;
const int wxSTC_C_STRING;
const int wxSTC_C_CHARACTER;
const int wxSTC_C_UUID;
const int wxSTC_C_PREPROCESSOR;
const int wxSTC_C_OPERATOR;
const int wxSTC_C_IDENTIFIER;
const int wxSTC_C_STRINGEOL;
const int wxSTC_C_VERBATIM;
const int wxSTC_C_REGEX;
const int wxSTC_C_COMMENTLINEDOC;
const int wxSTC_C_WORD2;
const int wxSTC_C_COMMENTDOCKEYWORD;
const int wxSTC_C_COMMENTDOCKEYWORDERROR;
const int wxSTC_C_GLOBALCLASS;
const int wxSTC_C_STRINGRAW;
const int wxSTC_C_TRIPLEVERBATIM;
const int wxSTC_C_HASHQUOTEDSTRING;
const int wxSTC_C_PREPROCESSORCOMMENT;
const int wxSTC_C_PREPROCESSORCOMMENTDOC;
const int wxSTC_C_USERLITERAL;
const int wxSTC_C_TASKMARKER;
const int wxSTC_C_ESCAPESEQUENCE;
const int wxSTC_D_DEFAULT;
const int wxSTC_D_COMMENT;
const int wxSTC_D_COMMENTLINE;
const int wxSTC_D_COMMENTDOC;
const int wxSTC_D_COMMENTNESTED;
const int wxSTC_D_NUMBER;
const int wxSTC_D_WORD;
const int wxSTC_D_WORD2;
const int wxSTC_D_WORD3;
const int wxSTC_D_TYPEDEF;
const int wxSTC_D_STRING;
const int wxSTC_D_STRINGEOL;
const int wxSTC_D_CHARACTER;
const int wxSTC_D_OPERATOR;
const int wxSTC_D_IDENTIFIER;
const int wxSTC_D_COMMENTLINEDOC;
const int wxSTC_D_COMMENTDOCKEYWORD;
const int wxSTC_D_COMMENTDOCKEYWORDERROR;
const int wxSTC_D_STRINGB;
const int wxSTC_D_STRINGR;
const int wxSTC_D_WORD5;
const int wxSTC_D_WORD6;
const int wxSTC_D_WORD7;
const int wxSTC_TCL_DEFAULT;
const int wxSTC_TCL_COMMENT;
const int wxSTC_TCL_COMMENTLINE;
const int wxSTC_TCL_NUMBER;
const int wxSTC_TCL_WORD_IN_QUOTE;
const int wxSTC_TCL_IN_QUOTE;
const int wxSTC_TCL_OPERATOR;
const int wxSTC_TCL_IDENTIFIER;
const int wxSTC_TCL_SUBSTITUTION;
const int wxSTC_TCL_SUB_BRACE;
const int wxSTC_TCL_MODIFIER;
const int wxSTC_TCL_EXPAND;
const int wxSTC_TCL_WORD;
const int wxSTC_TCL_WORD2;
const int wxSTC_TCL_WORD3;
const int wxSTC_TCL_WORD4;
const int wxSTC_TCL_WORD5;
const int wxSTC_TCL_WORD6;
const int wxSTC_TCL_WORD7;
const int wxSTC_TCL_WORD8;
const int wxSTC_TCL_COMMENT_BOX;
const int wxSTC_TCL_BLOCK_COMMENT;
const int wxSTC_H_DEFAULT;
const int wxSTC_H_TAG;
const int wxSTC_H_TAGUNKNOWN;
const int wxSTC_H_ATTRIBUTE;
const int wxSTC_H_ATTRIBUTEUNKNOWN;
const int wxSTC_H_NUMBER;
const int wxSTC_H_DOUBLESTRING;
const int wxSTC_H_SINGLESTRING;
const int wxSTC_H_OTHER;
const int wxSTC_H_COMMENT;
const int wxSTC_H_ENTITY;
const int wxSTC_H_TAGEND;
const int wxSTC_H_XMLSTART;
const int wxSTC_H_XMLEND;
const int wxSTC_H_SCRIPT;
const int wxSTC_H_ASP;
const int wxSTC_H_ASPAT;
const int wxSTC_H_CDATA;
const int wxSTC_H_QUESTION;
const int wxSTC_H_VALUE;
const int wxSTC_H_XCCOMMENT;
const int wxSTC_H_SGML_DEFAULT;
const int wxSTC_H_SGML_COMMAND;
const int wxSTC_H_SGML_1ST_PARAM;
const int wxSTC_H_SGML_DOUBLESTRING;
const int wxSTC_H_SGML_SIMPLESTRING;
const int wxSTC_H_SGML_ERROR;
const int wxSTC_H_SGML_SPECIAL;
const int wxSTC_H_SGML_ENTITY;
const int wxSTC_H_SGML_COMMENT;
const int wxSTC_H_SGML_1ST_PARAM_COMMENT;
const int wxSTC_H_SGML_BLOCK_DEFAULT;
const int wxSTC_HJ_START;
const int wxSTC_HJ_DEFAULT;
const int wxSTC_HJ_COMMENT;
const int wxSTC_HJ_COMMENTLINE;
const int wxSTC_HJ_COMMENTDOC;
const int wxSTC_HJ_NUMBER;
const int wxSTC_HJ_WORD;
const int wxSTC_HJ_KEYWORD;
const int wxSTC_HJ_DOUBLESTRING;
const int wxSTC_HJ_SINGLESTRING;
const int wxSTC_HJ_SYMBOLS;
const int wxSTC_HJ_STRINGEOL;
const int wxSTC_HJ_REGEX;
const int wxSTC_HJA_START;
const int wxSTC_HJA_DEFAULT;
const int wxSTC_HJA_COMMENT;
const int wxSTC_HJA_COMMENTLINE;
const int wxSTC_HJA_COMMENTDOC;
const int wxSTC_HJA_NUMBER;
const int wxSTC_HJA_WORD;
const int wxSTC_HJA_KEYWORD;
const int wxSTC_HJA_DOUBLESTRING;
const int wxSTC_HJA_SINGLESTRING;
const int wxSTC_HJA_SYMBOLS;
const int wxSTC_HJA_STRINGEOL;
const int wxSTC_HJA_REGEX;
const int wxSTC_HB_START;
const int wxSTC_HB_DEFAULT;
const int wxSTC_HB_COMMENTLINE;
const int wxSTC_HB_NUMBER;
const int wxSTC_HB_WORD;
const int wxSTC_HB_STRING;
const int wxSTC_HB_IDENTIFIER;
const int wxSTC_HB_STRINGEOL;
const int wxSTC_HBA_START;
const int wxSTC_HBA_DEFAULT;
const int wxSTC_HBA_COMMENTLINE;
const int wxSTC_HBA_NUMBER;
const int wxSTC_HBA_WORD;
const int wxSTC_HBA_STRING;
const int wxSTC_HBA_IDENTIFIER;
const int wxSTC_HBA_STRINGEOL;
const int wxSTC_HP_START;
const int wxSTC_HP_DEFAULT;
const int wxSTC_HP_COMMENTLINE;
const int wxSTC_HP_NUMBER;
const int wxSTC_HP_STRING;
const int wxSTC_HP_CHARACTER;
const int wxSTC_HP_WORD;
const int wxSTC_HP_TRIPLE;
const int wxSTC_HP_TRIPLEDOUBLE;
const int wxSTC_HP_CLASSNAME;
const int wxSTC_HP_DEFNAME;
const int wxSTC_HP_OPERATOR;
const int wxSTC_HP_IDENTIFIER;
const int wxSTC_HPHP_COMPLEX_VARIABLE;
const int wxSTC_HPA_START;
const int wxSTC_HPA_DEFAULT;
const int wxSTC_HPA_COMMENTLINE;
const int wxSTC_HPA_NUMBER;
const int wxSTC_HPA_STRING;
const int wxSTC_HPA_CHARACTER;
const int wxSTC_HPA_WORD;
const int wxSTC_HPA_TRIPLE;
const int wxSTC_HPA_TRIPLEDOUBLE;
const int wxSTC_HPA_CLASSNAME;
const int wxSTC_HPA_DEFNAME;
const int wxSTC_HPA_OPERATOR;
const int wxSTC_HPA_IDENTIFIER;
const int wxSTC_HPHP_DEFAULT;
const int wxSTC_HPHP_HSTRING;
const int wxSTC_HPHP_SIMPLESTRING;
const int wxSTC_HPHP_WORD;
const int wxSTC_HPHP_NUMBER;
const int wxSTC_HPHP_VARIABLE;
const int wxSTC_HPHP_COMMENT;
const int wxSTC_HPHP_COMMENTLINE;
const int wxSTC_HPHP_HSTRING_VARIABLE;
const int wxSTC_HPHP_OPERATOR;
const int wxSTC_PL_DEFAULT;
const int wxSTC_PL_ERROR;
const int wxSTC_PL_COMMENTLINE;
const int wxSTC_PL_POD;
const int wxSTC_PL_NUMBER;
const int wxSTC_PL_WORD;
const int wxSTC_PL_STRING;
const int wxSTC_PL_CHARACTER;
const int wxSTC_PL_PUNCTUATION;
const int wxSTC_PL_PREPROCESSOR;
const int wxSTC_PL_OPERATOR;
const int wxSTC_PL_IDENTIFIER;
const int wxSTC_PL_SCALAR;
const int wxSTC_PL_ARRAY;
const int wxSTC_PL_HASH;
const int wxSTC_PL_SYMBOLTABLE;
const int wxSTC_PL_VARIABLE_INDEXER;
const int wxSTC_PL_REGEX;
const int wxSTC_PL_REGSUBST;
const int wxSTC_PL_LONGQUOTE;
const int wxSTC_PL_BACKTICKS;
const int wxSTC_PL_DATASECTION;
const int wxSTC_PL_HERE_DELIM;
const int wxSTC_PL_HERE_Q;
const int wxSTC_PL_HERE_QQ;
const int wxSTC_PL_HERE_QX;
const int wxSTC_PL_STRING_Q;
const int wxSTC_PL_STRING_QQ;
const int wxSTC_PL_STRING_QX;
const int wxSTC_PL_STRING_QR;
const int wxSTC_PL_STRING_QW;
const int wxSTC_PL_POD_VERB;
const int wxSTC_PL_SUB_PROTOTYPE;
const int wxSTC_PL_FORMAT_IDENT;
const int wxSTC_PL_FORMAT;
const int wxSTC_PL_STRING_VAR;
const int wxSTC_PL_XLAT;
const int wxSTC_PL_REGEX_VAR;
const int wxSTC_PL_REGSUBST_VAR;
const int wxSTC_PL_BACKTICKS_VAR;
const int wxSTC_PL_HERE_QQ_VAR;
const int wxSTC_PL_HERE_QX_VAR;
const int wxSTC_PL_STRING_QQ_VAR;
const int wxSTC_PL_STRING_QX_VAR;
const int wxSTC_PL_STRING_QR_VAR;
const int wxSTC_RB_DEFAULT;
const int wxSTC_RB_ERROR;
const int wxSTC_RB_COMMENTLINE;
const int wxSTC_RB_POD;
const int wxSTC_RB_NUMBER;
const int wxSTC_RB_WORD;
const int wxSTC_RB_STRING;
const int wxSTC_RB_CHARACTER;
const int wxSTC_RB_CLASSNAME;
const int wxSTC_RB_DEFNAME;
const int wxSTC_RB_OPERATOR;
const int wxSTC_RB_IDENTIFIER;
const int wxSTC_RB_REGEX;
const int wxSTC_RB_GLOBAL;
const int wxSTC_RB_SYMBOL;
const int wxSTC_RB_MODULE_NAME;
const int wxSTC_RB_INSTANCE_VAR;
const int wxSTC_RB_CLASS_VAR;
const int wxSTC_RB_BACKTICKS;
const int wxSTC_RB_DATASECTION;
const int wxSTC_RB_HERE_DELIM;
const int wxSTC_RB_HERE_Q;
const int wxSTC_RB_HERE_QQ;
const int wxSTC_RB_HERE_QX;
const int wxSTC_RB_STRING_Q;
const int wxSTC_RB_STRING_QQ;
const int wxSTC_RB_STRING_QX;
const int wxSTC_RB_STRING_QR;
const int wxSTC_RB_STRING_QW;
const int wxSTC_RB_WORD_DEMOTED;
const int wxSTC_RB_STDIN;
const int wxSTC_RB_STDOUT;
const int wxSTC_RB_STDERR;
const int wxSTC_RB_UPPER_BOUND;
const int wxSTC_B_DEFAULT;
const int wxSTC_B_COMMENT;
const int wxSTC_B_NUMBER;
const int wxSTC_B_KEYWORD;
const int wxSTC_B_STRING;
const int wxSTC_B_PREPROCESSOR;
const int wxSTC_B_OPERATOR;
const int wxSTC_B_IDENTIFIER;
const int wxSTC_B_DATE;
const int wxSTC_B_STRINGEOL;
const int wxSTC_B_KEYWORD2;
const int wxSTC_B_KEYWORD3;
const int wxSTC_B_KEYWORD4;
const int wxSTC_B_CONSTANT;
const int wxSTC_B_ASM;
const int wxSTC_B_LABEL;
const int wxSTC_B_ERROR;
const int wxSTC_B_HEXNUMBER;
const int wxSTC_B_BINNUMBER;
const int wxSTC_B_COMMENTBLOCK;
const int wxSTC_B_DOCLINE;
const int wxSTC_B_DOCBLOCK;
const int wxSTC_B_DOCKEYWORD;
const int wxSTC_PROPS_DEFAULT;
const int wxSTC_PROPS_COMMENT;
const int wxSTC_PROPS_SECTION;
const int wxSTC_PROPS_ASSIGNMENT;
const int wxSTC_PROPS_DEFVAL;
const int wxSTC_PROPS_KEY;
const int wxSTC_L_DEFAULT;
const int wxSTC_L_COMMAND;
const int wxSTC_L_TAG;
const int wxSTC_L_MATH;
const int wxSTC_L_COMMENT;
const int wxSTC_L_TAG2;
const int wxSTC_L_MATH2;
const int wxSTC_L_COMMENT2;
const int wxSTC_L_VERBATIM;
const int wxSTC_L_SHORTCMD;
const int wxSTC_L_SPECIAL;
const int wxSTC_L_CMDOPT;
const int wxSTC_L_ERROR;
const int wxSTC_LUA_DEFAULT;
const int wxSTC_LUA_COMMENT;
const int wxSTC_LUA_COMMENTLINE;
const int wxSTC_LUA_COMMENTDOC;
const int wxSTC_LUA_NUMBER;
const int wxSTC_LUA_WORD;
const int wxSTC_LUA_STRING;
const int wxSTC_LUA_CHARACTER;
const int wxSTC_LUA_LITERALSTRING;
const int wxSTC_LUA_PREPROCESSOR;
const int wxSTC_LUA_OPERATOR;
const int wxSTC_LUA_IDENTIFIER;
const int wxSTC_LUA_STRINGEOL;
const int wxSTC_LUA_WORD2;
const int wxSTC_LUA_WORD3;
const int wxSTC_LUA_WORD4;
const int wxSTC_LUA_WORD5;
const int wxSTC_LUA_WORD6;
const int wxSTC_LUA_WORD7;
const int wxSTC_LUA_WORD8;
const int wxSTC_LUA_LABEL;
const int wxSTC_ERR_DEFAULT;
const int wxSTC_ERR_PYTHON;
const int wxSTC_ERR_GCC;
const int wxSTC_ERR_MS;
const int wxSTC_ERR_CMD;
const int wxSTC_ERR_BORLAND;
const int wxSTC_ERR_PERL;
const int wxSTC_ERR_NET;
const int wxSTC_ERR_LUA;
const int wxSTC_ERR_CTAG;
const int wxSTC_ERR_DIFF_CHANGED;
const int wxSTC_ERR_DIFF_ADDITION;
const int wxSTC_ERR_DIFF_DELETION;
const int wxSTC_ERR_DIFF_MESSAGE;
const int wxSTC_ERR_PHP;
const int wxSTC_ERR_ELF;
const int wxSTC_ERR_IFC;
const int wxSTC_ERR_IFORT;
const int wxSTC_ERR_ABSF;
const int wxSTC_ERR_TIDY;
const int wxSTC_ERR_JAVA_STACK;
const int wxSTC_ERR_VALUE;
const int wxSTC_ERR_GCC_INCLUDED_FROM;
const int wxSTC_ERR_ESCSEQ;
const int wxSTC_ERR_ESCSEQ_UNKNOWN;
const int wxSTC_ERR_ES_BLACK;
const int wxSTC_ERR_ES_RED;
const int wxSTC_ERR_ES_GREEN;
const int wxSTC_ERR_ES_BROWN;
const int wxSTC_ERR_ES_BLUE;
const int wxSTC_ERR_ES_MAGENTA;
const int wxSTC_ERR_ES_CYAN;
const int wxSTC_ERR_ES_GRAY;
const int wxSTC_ERR_ES_DARK_GRAY;
const int wxSTC_ERR_ES_BRIGHT_RED;
const int wxSTC_ERR_ES_BRIGHT_GREEN;
const int wxSTC_ERR_ES_YELLOW;
const int wxSTC_ERR_ES_BRIGHT_BLUE;
const int wxSTC_ERR_ES_BRIGHT_MAGENTA;
const int wxSTC_ERR_ES_BRIGHT_CYAN;
const int wxSTC_ERR_ES_WHITE;
const int wxSTC_BAT_DEFAULT;
const int wxSTC_BAT_COMMENT;
const int wxSTC_BAT_WORD;
const int wxSTC_BAT_LABEL;
const int wxSTC_BAT_HIDE;
const int wxSTC_BAT_COMMAND;
const int wxSTC_BAT_IDENTIFIER;
const int wxSTC_BAT_OPERATOR;
const int wxSTC_TCMD_DEFAULT;
const int wxSTC_TCMD_COMMENT;
const int wxSTC_TCMD_WORD;
const int wxSTC_TCMD_LABEL;
const int wxSTC_TCMD_HIDE;
const int wxSTC_TCMD_COMMAND;
const int wxSTC_TCMD_IDENTIFIER;
const int wxSTC_TCMD_OPERATOR;
const int wxSTC_TCMD_ENVIRONMENT;
const int wxSTC_TCMD_EXPANSION;
const int wxSTC_TCMD_CLABEL;
const int wxSTC_MAKE_DEFAULT;
const int wxSTC_MAKE_COMMENT;
const int wxSTC_MAKE_PREPROCESSOR;
const int wxSTC_MAKE_IDENTIFIER;
const int wxSTC_MAKE_OPERATOR;
const int wxSTC_MAKE_TARGET;
const int wxSTC_MAKE_IDEOL;
const int wxSTC_DIFF_DEFAULT;
const int wxSTC_DIFF_COMMENT;
const int wxSTC_DIFF_COMMAND;
const int wxSTC_DIFF_HEADER;
const int wxSTC_DIFF_POSITION;
const int wxSTC_DIFF_DELETED;
const int wxSTC_DIFF_ADDED;
const int wxSTC_DIFF_CHANGED;
const int wxSTC_CONF_DEFAULT;
const int wxSTC_CONF_COMMENT;
const int wxSTC_CONF_NUMBER;
const int wxSTC_CONF_IDENTIFIER;
const int wxSTC_CONF_EXTENSION;
const int wxSTC_CONF_PARAMETER;
const int wxSTC_CONF_STRING;
const int wxSTC_CONF_OPERATOR;
const int wxSTC_CONF_IP;
const int wxSTC_CONF_DIRECTIVE;
const int wxSTC_AVE_DEFAULT;
const int wxSTC_AVE_COMMENT;
const int wxSTC_AVE_NUMBER;
const int wxSTC_AVE_WORD;
const int wxSTC_AVE_STRING;
const int wxSTC_AVE_ENUM;
const int wxSTC_AVE_STRINGEOL;
const int wxSTC_AVE_IDENTIFIER;
const int wxSTC_AVE_OPERATOR;
const int wxSTC_AVE_WORD1;
const int wxSTC_AVE_WORD2;
const int wxSTC_AVE_WORD3;
const int wxSTC_AVE_WORD4;
const int wxSTC_AVE_WORD5;
const int wxSTC_AVE_WORD6;
const int wxSTC_ADA_DEFAULT;
const int wxSTC_ADA_WORD;
const int wxSTC_ADA_IDENTIFIER;
const int wxSTC_ADA_NUMBER;
const int wxSTC_ADA_DELIMITER;
const int wxSTC_ADA_CHARACTER;
const int wxSTC_ADA_CHARACTEREOL;
const int wxSTC_ADA_STRING;
const int wxSTC_ADA_STRINGEOL;
const int wxSTC_ADA_LABEL;
const int wxSTC_ADA_COMMENTLINE;
const int wxSTC_ADA_ILLEGAL;
const int wxSTC_BAAN_DEFAULT;
const int wxSTC_BAAN_COMMENT;
const int wxSTC_BAAN_COMMENTDOC;
const int wxSTC_BAAN_NUMBER;
const int wxSTC_BAAN_WORD;
const int wxSTC_BAAN_STRING;
const int wxSTC_BAAN_PREPROCESSOR;
const int wxSTC_BAAN_OPERATOR;
const int wxSTC_BAAN_IDENTIFIER;
const int wxSTC_BAAN_STRINGEOL;
const int wxSTC_BAAN_WORD2;
const int wxSTC_BAAN_WORD3;
const int wxSTC_BAAN_WORD4;
const int wxSTC_BAAN_WORD5;
const int wxSTC_BAAN_WORD6;
const int wxSTC_BAAN_WORD7;
const int wxSTC_BAAN_WORD8;
const int wxSTC_BAAN_WORD9;
const int wxSTC_BAAN_TABLEDEF;
const int wxSTC_BAAN_TABLESQL;
const int wxSTC_BAAN_FUNCTION;
const int wxSTC_BAAN_DOMDEF;
const int wxSTC_BAAN_FUNCDEF;
const int wxSTC_BAAN_OBJECTDEF;
const int wxSTC_BAAN_DEFINEDEF;
const int wxSTC_LISP_DEFAULT;
const int wxSTC_LISP_COMMENT;
const int wxSTC_LISP_NUMBER;
const int wxSTC_LISP_KEYWORD;
const int wxSTC_LISP_KEYWORD_KW;
const int wxSTC_LISP_SYMBOL;
const int wxSTC_LISP_STRING;
const int wxSTC_LISP_STRINGEOL;
const int wxSTC_LISP_IDENTIFIER;
const int wxSTC_LISP_OPERATOR;
const int wxSTC_LISP_SPECIAL;
const int wxSTC_LISP_MULTI_COMMENT;
const int wxSTC_EIFFEL_DEFAULT;
const int wxSTC_EIFFEL_COMMENTLINE;
const int wxSTC_EIFFEL_NUMBER;
const int wxSTC_EIFFEL_WORD;
const int wxSTC_EIFFEL_STRING;
const int wxSTC_EIFFEL_CHARACTER;
const int wxSTC_EIFFEL_OPERATOR;
const int wxSTC_EIFFEL_IDENTIFIER;
const int wxSTC_EIFFEL_STRINGEOL;
const int wxSTC_NNCRONTAB_DEFAULT;
const int wxSTC_NNCRONTAB_COMMENT;
const int wxSTC_NNCRONTAB_TASK;
const int wxSTC_NNCRONTAB_SECTION;
const int wxSTC_NNCRONTAB_KEYWORD;
const int wxSTC_NNCRONTAB_MODIFIER;
const int wxSTC_NNCRONTAB_ASTERISK;
const int wxSTC_NNCRONTAB_NUMBER;
const int wxSTC_NNCRONTAB_STRING;
const int wxSTC_NNCRONTAB_ENVIRONMENT;
const int wxSTC_NNCRONTAB_IDENTIFIER;
const int wxSTC_FORTH_DEFAULT;
const int wxSTC_FORTH_COMMENT;
const int wxSTC_FORTH_COMMENT_ML;
const int wxSTC_FORTH_IDENTIFIER;
const int wxSTC_FORTH_CONTROL;
const int wxSTC_FORTH_KEYWORD;
const int wxSTC_FORTH_DEFWORD;
const int wxSTC_FORTH_PREWORD1;
const int wxSTC_FORTH_PREWORD2;
const int wxSTC_FORTH_NUMBER;
const int wxSTC_FORTH_STRING;
const int wxSTC_FORTH_LOCALE;
const int wxSTC_MATLAB_DEFAULT;
const int wxSTC_MATLAB_COMMENT;
const int wxSTC_MATLAB_COMMAND;
const int wxSTC_MATLAB_NUMBER;
const int wxSTC_MATLAB_KEYWORD;
const int wxSTC_MATLAB_STRING;
const int wxSTC_MATLAB_OPERATOR;
const int wxSTC_MATLAB_IDENTIFIER;
const int wxSTC_MATLAB_DOUBLEQUOTESTRING;
const int wxSTC_SCRIPTOL_DEFAULT;
const int wxSTC_SCRIPTOL_WHITE;
const int wxSTC_SCRIPTOL_COMMENTLINE;
const int wxSTC_SCRIPTOL_PERSISTENT;
const int wxSTC_SCRIPTOL_CSTYLE;
const int wxSTC_SCRIPTOL_COMMENTBLOCK;
const int wxSTC_SCRIPTOL_NUMBER;
const int wxSTC_SCRIPTOL_STRING;
const int wxSTC_SCRIPTOL_CHARACTER;
const int wxSTC_SCRIPTOL_STRINGEOL;
const int wxSTC_SCRIPTOL_KEYWORD;
const int wxSTC_SCRIPTOL_OPERATOR;
const int wxSTC_SCRIPTOL_IDENTIFIER;
const int wxSTC_SCRIPTOL_TRIPLE;
const int wxSTC_SCRIPTOL_CLASSNAME;
const int wxSTC_SCRIPTOL_PREPROCESSOR;
const int wxSTC_ASM_DEFAULT;
const int wxSTC_ASM_COMMENT;
const int wxSTC_ASM_NUMBER;
const int wxSTC_ASM_STRING;
const int wxSTC_ASM_OPERATOR;
const int wxSTC_ASM_IDENTIFIER;
const int wxSTC_ASM_CPUINSTRUCTION;
const int wxSTC_ASM_MATHINSTRUCTION;
const int wxSTC_ASM_REGISTER;
const int wxSTC_ASM_DIRECTIVE;
const int wxSTC_ASM_DIRECTIVEOPERAND;
const int wxSTC_ASM_COMMENTBLOCK;
const int wxSTC_ASM_CHARACTER;
const int wxSTC_ASM_STRINGEOL;
const int wxSTC_ASM_EXTINSTRUCTION;
const int wxSTC_ASM_COMMENTDIRECTIVE;
const int wxSTC_F_DEFAULT;
const int wxSTC_F_COMMENT;
const int wxSTC_F_NUMBER;
const int wxSTC_F_STRING1;
const int wxSTC_F_STRING2;
const int wxSTC_F_STRINGEOL;
const int wxSTC_F_OPERATOR;
const int wxSTC_F_IDENTIFIER;
const int wxSTC_F_WORD;
const int wxSTC_F_WORD2;
const int wxSTC_F_WORD3;
const int wxSTC_F_PREPROCESSOR;
const int wxSTC_F_OPERATOR2;
const int wxSTC_F_LABEL;
const int wxSTC_F_CONTINUATION;
const int wxSTC_CSS_DEFAULT;
const int wxSTC_CSS_TAG;
const int wxSTC_CSS_CLASS;
const int wxSTC_CSS_PSEUDOCLASS;
const int wxSTC_CSS_UNKNOWN_PSEUDOCLASS;
const int wxSTC_CSS_OPERATOR;
const int wxSTC_CSS_IDENTIFIER;
const int wxSTC_CSS_UNKNOWN_IDENTIFIER;
const int wxSTC_CSS_VALUE;
const int wxSTC_CSS_COMMENT;
const int wxSTC_CSS_ID;
const int wxSTC_CSS_IMPORTANT;
const int wxSTC_CSS_DIRECTIVE;
const int wxSTC_CSS_DOUBLESTRING;
const int wxSTC_CSS_SINGLESTRING;
const int wxSTC_CSS_IDENTIFIER2;
const int wxSTC_CSS_ATTRIBUTE;
const int wxSTC_CSS_IDENTIFIER3;
const int wxSTC_CSS_PSEUDOELEMENT;
const int wxSTC_CSS_EXTENDED_IDENTIFIER;
const int wxSTC_CSS_EXTENDED_PSEUDOCLASS;
const int wxSTC_CSS_EXTENDED_PSEUDOELEMENT;
const int wxSTC_CSS_MEDIA;
const int wxSTC_CSS_VARIABLE;
const int wxSTC_POV_DEFAULT;
const int wxSTC_POV_COMMENT;
const int wxSTC_POV_COMMENTLINE;
const int wxSTC_POV_NUMBER;
const int wxSTC_POV_OPERATOR;
const int wxSTC_POV_IDENTIFIER;
const int wxSTC_POV_STRING;
const int wxSTC_POV_STRINGEOL;
const int wxSTC_POV_DIRECTIVE;
const int wxSTC_POV_BADDIRECTIVE;
const int wxSTC_POV_WORD2;
const int wxSTC_POV_WORD3;
const int wxSTC_POV_WORD4;
const int wxSTC_POV_WORD5;
const int wxSTC_POV_WORD6;
const int wxSTC_POV_WORD7;
const int wxSTC_POV_WORD8;
const int wxSTC_LOUT_DEFAULT;
const int wxSTC_LOUT_COMMENT;
const int wxSTC_LOUT_NUMBER;
const int wxSTC_LOUT_WORD;
const int wxSTC_LOUT_WORD2;
const int wxSTC_LOUT_WORD3;
const int wxSTC_LOUT_WORD4;
const int wxSTC_LOUT_STRING;
const int wxSTC_LOUT_OPERATOR;
const int wxSTC_LOUT_IDENTIFIER;
const int wxSTC_LOUT_STRINGEOL;
const int wxSTC_ESCRIPT_DEFAULT;
const int wxSTC_ESCRIPT_COMMENT;
const int wxSTC_ESCRIPT_COMMENTLINE;
const int wxSTC_ESCRIPT_COMMENTDOC;
const int wxSTC_ESCRIPT_NUMBER;
const int wxSTC_ESCRIPT_WORD;
const int wxSTC_ESCRIPT_STRING;
const int wxSTC_ESCRIPT_OPERATOR;
const int wxSTC_ESCRIPT_IDENTIFIER;
const int wxSTC_ESCRIPT_BRACE;
const int wxSTC_ESCRIPT_WORD2;
const int wxSTC_ESCRIPT_WORD3;
const int wxSTC_PS_DEFAULT;
const int wxSTC_PS_COMMENT;
const int wxSTC_PS_DSC_COMMENT;
const int wxSTC_PS_DSC_VALUE;
const int wxSTC_PS_NUMBER;
const int wxSTC_PS_NAME;
const int wxSTC_PS_KEYWORD;
const int wxSTC_PS_LITERAL;
const int wxSTC_PS_IMMEVAL;
const int wxSTC_PS_PAREN_ARRAY;
const int wxSTC_PS_PAREN_DICT;
const int wxSTC_PS_PAREN_PROC;
const int wxSTC_PS_TEXT;
const int wxSTC_PS_HEXSTRING;
const int wxSTC_PS_BASE85STRING;
const int wxSTC_PS_BADSTRINGCHAR;
const int wxSTC_NSIS_DEFAULT;
const int wxSTC_NSIS_COMMENT;
const int wxSTC_NSIS_STRINGDQ;
const int wxSTC_NSIS_STRINGLQ;
const int wxSTC_NSIS_STRINGRQ;
const int wxSTC_NSIS_FUNCTION;
const int wxSTC_NSIS_VARIABLE;
const int wxSTC_NSIS_LABEL;
const int wxSTC_NSIS_USERDEFINED;
const int wxSTC_NSIS_SECTIONDEF;
const int wxSTC_NSIS_SUBSECTIONDEF;
const int wxSTC_NSIS_IFDEFINEDEF;
const int wxSTC_NSIS_MACRODEF;
const int wxSTC_NSIS_STRINGVAR;
const int wxSTC_NSIS_NUMBER;
const int wxSTC_NSIS_SECTIONGROUP;
const int wxSTC_NSIS_PAGEEX;
const int wxSTC_NSIS_FUNCTIONDEF;
const int wxSTC_NSIS_COMMENTBOX;
const int wxSTC_MMIXAL_LEADWS;
const int wxSTC_MMIXAL_COMMENT;
const int wxSTC_MMIXAL_LABEL;
const int wxSTC_MMIXAL_OPCODE;
const int wxSTC_MMIXAL_OPCODE_PRE;
const int wxSTC_MMIXAL_OPCODE_VALID;
const int wxSTC_MMIXAL_OPCODE_UNKNOWN;
const int wxSTC_MMIXAL_OPCODE_POST;
const int wxSTC_MMIXAL_OPERANDS;
const int wxSTC_MMIXAL_NUMBER;
const int wxSTC_MMIXAL_REF;
const int wxSTC_MMIXAL_CHAR;
const int wxSTC_MMIXAL_STRING;
const int wxSTC_MMIXAL_REGISTER;
const int wxSTC_MMIXAL_HEX;
const int wxSTC_MMIXAL_OPERATOR;
const int wxSTC_MMIXAL_SYMBOL;
const int wxSTC_MMIXAL_INCLUDE;
const int wxSTC_CLW_DEFAULT;
const int wxSTC_CLW_LABEL;
const int wxSTC_CLW_COMMENT;
const int wxSTC_CLW_STRING;
const int wxSTC_CLW_USER_IDENTIFIER;
const int wxSTC_CLW_INTEGER_CONSTANT;
const int wxSTC_CLW_REAL_CONSTANT;
const int wxSTC_CLW_PICTURE_STRING;
const int wxSTC_CLW_KEYWORD;
const int wxSTC_CLW_COMPILER_DIRECTIVE;
const int wxSTC_CLW_RUNTIME_EXPRESSIONS;
const int wxSTC_CLW_BUILTIN_PROCEDURES_FUNCTION;
const int wxSTC_CLW_STRUCTURE_DATA_TYPE;
const int wxSTC_CLW_ATTRIBUTE;
const int wxSTC_CLW_STANDARD_EQUATE;
const int wxSTC_CLW_ERROR;
const int wxSTC_CLW_DEPRECATED;
const int wxSTC_LOT_DEFAULT;
const int wxSTC_LOT_HEADER;
const int wxSTC_LOT_BREAK;
const int wxSTC_LOT_SET;
const int wxSTC_LOT_PASS;
const int wxSTC_LOT_FAIL;
const int wxSTC_LOT_ABORT;
const int wxSTC_YAML_DEFAULT;
const int wxSTC_YAML_COMMENT;
const int wxSTC_YAML_IDENTIFIER;
const int wxSTC_YAML_KEYWORD;
const int wxSTC_YAML_NUMBER;
const int wxSTC_YAML_REFERENCE;
const int wxSTC_YAML_DOCUMENT;
const int wxSTC_YAML_TEXT;
const int wxSTC_YAML_ERROR;
const int wxSTC_YAML_OPERATOR;
const int wxSTC_TEX_DEFAULT;
const int wxSTC_TEX_SPECIAL;
const int wxSTC_TEX_GROUP;
const int wxSTC_TEX_SYMBOL;
const int wxSTC_TEX_COMMAND;
const int wxSTC_TEX_TEXT;
const int wxSTC_METAPOST_DEFAULT;
const int wxSTC_METAPOST_SPECIAL;
const int wxSTC_METAPOST_GROUP;
const int wxSTC_METAPOST_SYMBOL;
const int wxSTC_METAPOST_COMMAND;
const int wxSTC_METAPOST_TEXT;
const int wxSTC_METAPOST_EXTRA;
const int wxSTC_ERLANG_DEFAULT;
const int wxSTC_ERLANG_COMMENT;
const int wxSTC_ERLANG_VARIABLE;
const int wxSTC_ERLANG_NUMBER;
const int wxSTC_ERLANG_KEYWORD;
const int wxSTC_ERLANG_STRING;
const int wxSTC_ERLANG_OPERATOR;
const int wxSTC_ERLANG_ATOM;
const int wxSTC_ERLANG_FUNCTION_NAME;
const int wxSTC_ERLANG_CHARACTER;
const int wxSTC_ERLANG_MACRO;
const int wxSTC_ERLANG_RECORD;
const int wxSTC_ERLANG_PREPROC;
const int wxSTC_ERLANG_NODE_NAME;
const int wxSTC_ERLANG_COMMENT_FUNCTION;
const int wxSTC_ERLANG_COMMENT_MODULE;
const int wxSTC_ERLANG_COMMENT_DOC;
const int wxSTC_ERLANG_COMMENT_DOC_MACRO;
const int wxSTC_ERLANG_ATOM_QUOTED;
const int wxSTC_ERLANG_MACRO_QUOTED;
const int wxSTC_ERLANG_RECORD_QUOTED;
const int wxSTC_ERLANG_NODE_NAME_QUOTED;
const int wxSTC_ERLANG_BIFS;
const int wxSTC_ERLANG_MODULES;
const int wxSTC_ERLANG_MODULES_ATT;
const int wxSTC_ERLANG_UNKNOWN;
const int wxSTC_MSSQL_DEFAULT;
const int wxSTC_MSSQL_COMMENT;
const int wxSTC_MSSQL_LINE_COMMENT;
const int wxSTC_MSSQL_NUMBER;
const int wxSTC_MSSQL_STRING;
const int wxSTC_MSSQL_OPERATOR;
const int wxSTC_MSSQL_IDENTIFIER;
const int wxSTC_MSSQL_VARIABLE;
const int wxSTC_MSSQL_COLUMN_NAME;
const int wxSTC_MSSQL_STATEMENT;
const int wxSTC_MSSQL_DATATYPE;
const int wxSTC_MSSQL_SYSTABLE;
const int wxSTC_MSSQL_GLOBAL_VARIABLE;
const int wxSTC_MSSQL_FUNCTION;
const int wxSTC_MSSQL_STORED_PROCEDURE;
const int wxSTC_MSSQL_DEFAULT_PREF_DATATYPE;
const int wxSTC_MSSQL_COLUMN_NAME_2;
const int wxSTC_V_DEFAULT;
const int wxSTC_V_COMMENT;
const int wxSTC_V_COMMENTLINE;
const int wxSTC_V_COMMENTLINEBANG;
const int wxSTC_V_NUMBER;
const int wxSTC_V_WORD;
const int wxSTC_V_STRING;
const int wxSTC_V_WORD2;
const int wxSTC_V_WORD3;
const int wxSTC_V_PREPROCESSOR;
const int wxSTC_V_OPERATOR;
const int wxSTC_V_IDENTIFIER;
const int wxSTC_V_STRINGEOL;
const int wxSTC_V_USER;
const int wxSTC_V_COMMENT_WORD;
const int wxSTC_V_INPUT;
const int wxSTC_V_OUTPUT;
const int wxSTC_V_INOUT;
const int wxSTC_V_PORT_CONNECT;
const int wxSTC_KIX_DEFAULT;
const int wxSTC_KIX_COMMENT;
const int wxSTC_KIX_STRING1;
const int wxSTC_KIX_STRING2;
const int wxSTC_KIX_NUMBER;
const int wxSTC_KIX_VAR;
const int wxSTC_KIX_MACRO;
const int wxSTC_KIX_KEYWORD;
const int wxSTC_KIX_FUNCTIONS;
const int wxSTC_KIX_OPERATOR;
const int wxSTC_KIX_COMMENTSTREAM;
const int wxSTC_KIX_IDENTIFIER;
const int wxSTC_GC_DEFAULT;
const int wxSTC_GC_COMMENTLINE;
const int wxSTC_GC_COMMENTBLOCK;
const int wxSTC_GC_GLOBAL;
const int wxSTC_GC_EVENT;
const int wxSTC_GC_ATTRIBUTE;
const int wxSTC_GC_CONTROL;
const int wxSTC_GC_COMMAND;
const int wxSTC_GC_STRING;
const int wxSTC_GC_OPERATOR;
const int wxSTC_SN_DEFAULT;
const int wxSTC_SN_CODE;
const int wxSTC_SN_COMMENTLINE;
const int wxSTC_SN_COMMENTLINEBANG;
const int wxSTC_SN_NUMBER;
const int wxSTC_SN_WORD;
const int wxSTC_SN_STRING;
const int wxSTC_SN_WORD2;
const int wxSTC_SN_WORD3;
const int wxSTC_SN_PREPROCESSOR;
const int wxSTC_SN_OPERATOR;
const int wxSTC_SN_IDENTIFIER;
const int wxSTC_SN_STRINGEOL;
const int wxSTC_SN_REGEXTAG;
const int wxSTC_SN_SIGNAL;
const int wxSTC_SN_USER;
const int wxSTC_AU3_DEFAULT;
const int wxSTC_AU3_COMMENT;
const int wxSTC_AU3_COMMENTBLOCK;
const int wxSTC_AU3_NUMBER;
const int wxSTC_AU3_FUNCTION;
const int wxSTC_AU3_KEYWORD;
const int wxSTC_AU3_MACRO;
const int wxSTC_AU3_STRING;
const int wxSTC_AU3_OPERATOR;
const int wxSTC_AU3_VARIABLE;
const int wxSTC_AU3_SENT;
const int wxSTC_AU3_PREPROCESSOR;
const int wxSTC_AU3_SPECIAL;
const int wxSTC_AU3_EXPAND;
const int wxSTC_AU3_COMOBJ;
const int wxSTC_AU3_UDF;
const int wxSTC_APDL_DEFAULT;
const int wxSTC_APDL_COMMENT;
const int wxSTC_APDL_COMMENTBLOCK;
const int wxSTC_APDL_NUMBER;
const int wxSTC_APDL_STRING;
const int wxSTC_APDL_OPERATOR;
const int wxSTC_APDL_WORD;
const int wxSTC_APDL_PROCESSOR;
const int wxSTC_APDL_COMMAND;
const int wxSTC_APDL_SLASHCOMMAND;
const int wxSTC_APDL_STARCOMMAND;
const int wxSTC_APDL_ARGUMENT;
const int wxSTC_APDL_FUNCTION;
const int wxSTC_SH_DEFAULT;
const int wxSTC_SH_ERROR;
const int wxSTC_SH_COMMENTLINE;
const int wxSTC_SH_NUMBER;
const int wxSTC_SH_WORD;
const int wxSTC_SH_STRING;
const int wxSTC_SH_CHARACTER;
const int wxSTC_SH_OPERATOR;
const int wxSTC_SH_IDENTIFIER;
const int wxSTC_SH_SCALAR;
const int wxSTC_SH_PARAM;
const int wxSTC_SH_BACKTICKS;
const int wxSTC_SH_HERE_DELIM;
const int wxSTC_SH_HERE_Q;
const int wxSTC_ASN1_DEFAULT;
const int wxSTC_ASN1_COMMENT;
const int wxSTC_ASN1_IDENTIFIER;
const int wxSTC_ASN1_STRING;
const int wxSTC_ASN1_OID;
const int wxSTC_ASN1_SCALAR;
const int wxSTC_ASN1_KEYWORD;
const int wxSTC_ASN1_ATTRIBUTE;
const int wxSTC_ASN1_DESCRIPTOR;
const int wxSTC_ASN1_TYPE;
const int wxSTC_ASN1_OPERATOR;
const int wxSTC_VHDL_DEFAULT;
const int wxSTC_VHDL_COMMENT;
const int wxSTC_VHDL_COMMENTLINEBANG;
const int wxSTC_VHDL_NUMBER;
const int wxSTC_VHDL_STRING;
const int wxSTC_VHDL_OPERATOR;
const int wxSTC_VHDL_IDENTIFIER;
const int wxSTC_VHDL_STRINGEOL;
const int wxSTC_VHDL_KEYWORD;
const int wxSTC_VHDL_STDOPERATOR;
const int wxSTC_VHDL_ATTRIBUTE;
const int wxSTC_VHDL_STDFUNCTION;
const int wxSTC_VHDL_STDPACKAGE;
const int wxSTC_VHDL_STDTYPE;
const int wxSTC_VHDL_USERWORD;
const int wxSTC_VHDL_BLOCK_COMMENT;
const int wxSTC_CAML_DEFAULT;
const int wxSTC_CAML_IDENTIFIER;
const int wxSTC_CAML_TAGNAME;
const int wxSTC_CAML_KEYWORD;
const int wxSTC_CAML_KEYWORD2;
const int wxSTC_CAML_KEYWORD3;
const int wxSTC_CAML_LINENUM;
const int wxSTC_CAML_OPERATOR;
const int wxSTC_CAML_NUMBER;
const int wxSTC_CAML_CHAR;
const int wxSTC_CAML_WHITE;
const int wxSTC_CAML_STRING;
const int wxSTC_CAML_COMMENT;
const int wxSTC_CAML_COMMENT1;
const int wxSTC_CAML_COMMENT2;
const int wxSTC_CAML_COMMENT3;
const int wxSTC_HA_DEFAULT;
const int wxSTC_HA_IDENTIFIER;
const int wxSTC_HA_KEYWORD;
const int wxSTC_HA_NUMBER;
const int wxSTC_HA_STRING;
const int wxSTC_HA_CHARACTER;
const int wxSTC_HA_CLASS;
const int wxSTC_HA_MODULE;
const int wxSTC_HA_CAPITAL;
const int wxSTC_HA_DATA;
const int wxSTC_HA_IMPORT;
const int wxSTC_HA_OPERATOR;
const int wxSTC_HA_INSTANCE;
const int wxSTC_HA_COMMENTLINE;
const int wxSTC_HA_COMMENTBLOCK;
const int wxSTC_HA_COMMENTBLOCK2;
const int wxSTC_HA_COMMENTBLOCK3;
const int wxSTC_HA_PRAGMA;
const int wxSTC_HA_PREPROCESSOR;
const int wxSTC_HA_STRINGEOL;
const int wxSTC_HA_RESERVED_OPERATOR;
const int wxSTC_HA_LITERATE_COMMENT;
const int wxSTC_HA_LITERATE_CODEDELIM;
const int wxSTC_T3_DEFAULT;
const int wxSTC_T3_X_DEFAULT;
const int wxSTC_T3_PREPROCESSOR;
const int wxSTC_T3_BLOCK_COMMENT;
const int wxSTC_T3_LINE_COMMENT;
const int wxSTC_T3_OPERATOR;
const int wxSTC_T3_KEYWORD;
const int wxSTC_T3_NUMBER;
const int wxSTC_T3_IDENTIFIER;
const int wxSTC_T3_S_STRING;
const int wxSTC_T3_D_STRING;
const int wxSTC_T3_X_STRING;
const int wxSTC_T3_LIB_DIRECTIVE;
const int wxSTC_T3_MSG_PARAM;
const int wxSTC_T3_HTML_TAG;
const int wxSTC_T3_HTML_DEFAULT;
const int wxSTC_T3_HTML_STRING;
const int wxSTC_T3_USER1;
const int wxSTC_T3_USER2;
const int wxSTC_T3_USER3;
const int wxSTC_T3_BRACE;
const int wxSTC_REBOL_DEFAULT;
const int wxSTC_REBOL_COMMENTLINE;
const int wxSTC_REBOL_COMMENTBLOCK;
const int wxSTC_REBOL_PREFACE;
const int wxSTC_REBOL_OPERATOR;
const int wxSTC_REBOL_CHARACTER;
const int wxSTC_REBOL_QUOTEDSTRING;
const int wxSTC_REBOL_BRACEDSTRING;
const int wxSTC_REBOL_NUMBER;
const int wxSTC_REBOL_PAIR;
const int wxSTC_REBOL_TUPLE;
const int wxSTC_REBOL_BINARY;
const int wxSTC_REBOL_MONEY;
const int wxSTC_REBOL_ISSUE;
const int wxSTC_REBOL_TAG;
const int wxSTC_REBOL_FILE;
const int wxSTC_REBOL_EMAIL;
const int wxSTC_REBOL_URL;
const int wxSTC_REBOL_DATE;
const int wxSTC_REBOL_TIME;
const int wxSTC_REBOL_IDENTIFIER;
const int wxSTC_REBOL_WORD;
const int wxSTC_REBOL_WORD2;
const int wxSTC_REBOL_WORD3;
const int wxSTC_REBOL_WORD4;
const int wxSTC_REBOL_WORD5;
const int wxSTC_REBOL_WORD6;
const int wxSTC_REBOL_WORD7;
const int wxSTC_REBOL_WORD8;
const int wxSTC_SQL_DEFAULT;
const int wxSTC_SQL_COMMENT;
const int wxSTC_SQL_COMMENTLINE;
const int wxSTC_SQL_COMMENTDOC;
const int wxSTC_SQL_NUMBER;
const int wxSTC_SQL_WORD;
const int wxSTC_SQL_STRING;
const int wxSTC_SQL_CHARACTER;
const int wxSTC_SQL_SQLPLUS;
const int wxSTC_SQL_SQLPLUS_PROMPT;
const int wxSTC_SQL_OPERATOR;
const int wxSTC_SQL_IDENTIFIER;
const int wxSTC_SQL_SQLPLUS_COMMENT;
const int wxSTC_SQL_COMMENTLINEDOC;
const int wxSTC_SQL_WORD2;
const int wxSTC_SQL_COMMENTDOCKEYWORD;
const int wxSTC_SQL_COMMENTDOCKEYWORDERROR;
const int wxSTC_SQL_USER1;
const int wxSTC_SQL_USER2;
const int wxSTC_SQL_USER3;
const int wxSTC_SQL_USER4;
const int wxSTC_SQL_QUOTEDIDENTIFIER;
const int wxSTC_SQL_QOPERATOR;
const int wxSTC_ST_DEFAULT;
const int wxSTC_ST_STRING;
const int wxSTC_ST_NUMBER;
const int wxSTC_ST_COMMENT;
const int wxSTC_ST_SYMBOL;
const int wxSTC_ST_BINARY;
const int wxSTC_ST_BOOL;
const int wxSTC_ST_SELF;
const int wxSTC_ST_SUPER;
const int wxSTC_ST_NIL;
const int wxSTC_ST_GLOBAL;
const int wxSTC_ST_RETURN;
const int wxSTC_ST_SPECIAL;
const int wxSTC_ST_KWSEND;
const int wxSTC_ST_ASSIGN;
const int wxSTC_ST_CHARACTER;
const int wxSTC_ST_SPEC_SEL;
const int wxSTC_FS_DEFAULT;
const int wxSTC_FS_COMMENT;
const int wxSTC_FS_COMMENTLINE;
const int wxSTC_FS_COMMENTDOC;
const int wxSTC_FS_COMMENTLINEDOC;
const int wxSTC_FS_COMMENTDOCKEYWORD;
const int wxSTC_FS_COMMENTDOCKEYWORDERROR;
const int wxSTC_FS_KEYWORD;
const int wxSTC_FS_KEYWORD2;
const int wxSTC_FS_KEYWORD3;
const int wxSTC_FS_KEYWORD4;
const int wxSTC_FS_NUMBER;
const int wxSTC_FS_STRING;
const int wxSTC_FS_PREPROCESSOR;
const int wxSTC_FS_OPERATOR;
const int wxSTC_FS_IDENTIFIER;
const int wxSTC_FS_DATE;
const int wxSTC_FS_STRINGEOL;
const int wxSTC_FS_CONSTANT;
const int wxSTC_FS_WORDOPERATOR;
const int wxSTC_FS_DISABLEDCODE;
const int wxSTC_FS_DEFAULT_C;
const int wxSTC_FS_COMMENTDOC_C;
const int wxSTC_FS_COMMENTLINEDOC_C;
const int wxSTC_FS_KEYWORD_C;
const int wxSTC_FS_KEYWORD2_C;
const int wxSTC_FS_NUMBER_C;
const int wxSTC_FS_STRING_C;
const int wxSTC_FS_PREPROCESSOR_C;
const int wxSTC_FS_OPERATOR_C;
const int wxSTC_FS_IDENTIFIER_C;
const int wxSTC_FS_STRINGEOL_C;
const int wxSTC_CSOUND_DEFAULT;
const int wxSTC_CSOUND_COMMENT;
const int wxSTC_CSOUND_NUMBER;
const int wxSTC_CSOUND_OPERATOR;
const int wxSTC_CSOUND_INSTR;
const int wxSTC_CSOUND_IDENTIFIER;
const int wxSTC_CSOUND_OPCODE;
const int wxSTC_CSOUND_HEADERSTMT;
const int wxSTC_CSOUND_USERKEYWORD;
const int wxSTC_CSOUND_COMMENTBLOCK;
const int wxSTC_CSOUND_PARAM;
const int wxSTC_CSOUND_ARATE_VAR;
const int wxSTC_CSOUND_KRATE_VAR;
const int wxSTC_CSOUND_IRATE_VAR;
const int wxSTC_CSOUND_GLOBAL_VAR;
const int wxSTC_CSOUND_STRINGEOL;
const int wxSTC_INNO_DEFAULT;
const int wxSTC_INNO_COMMENT;
const int wxSTC_INNO_KEYWORD;
const int wxSTC_INNO_PARAMETER;
const int wxSTC_INNO_SECTION;
const int wxSTC_INNO_PREPROC;
const int wxSTC_INNO_INLINE_EXPANSION;
const int wxSTC_INNO_COMMENT_PASCAL;
const int wxSTC_INNO_KEYWORD_PASCAL;
const int wxSTC_INNO_KEYWORD_USER;
const int wxSTC_INNO_STRING_DOUBLE;
const int wxSTC_INNO_STRING_SINGLE;
const int wxSTC_INNO_IDENTIFIER;
const int wxSTC_OPAL_SPACE;
const int wxSTC_OPAL_COMMENT_BLOCK;
const int wxSTC_OPAL_COMMENT_LINE;
const int wxSTC_OPAL_INTEGER;
const int wxSTC_OPAL_KEYWORD;
const int wxSTC_OPAL_SORT;
const int wxSTC_OPAL_STRING;
const int wxSTC_OPAL_PAR;
const int wxSTC_OPAL_BOOL_CONST;
const int wxSTC_OPAL_DEFAULT;
const int wxSTC_SPICE_DEFAULT;
const int wxSTC_SPICE_IDENTIFIER;
const int wxSTC_SPICE_KEYWORD;
const int wxSTC_SPICE_KEYWORD2;
const int wxSTC_SPICE_KEYWORD3;
const int wxSTC_SPICE_NUMBER;
const int wxSTC_SPICE_DELIMITER;
const int wxSTC_SPICE_VALUE;
const int wxSTC_SPICE_COMMENTLINE;
const int wxSTC_CMAKE_DEFAULT;
const int wxSTC_CMAKE_COMMENT;
const int wxSTC_CMAKE_STRINGDQ;
const int wxSTC_CMAKE_STRINGLQ;
const int wxSTC_CMAKE_STRINGRQ;
const int wxSTC_CMAKE_COMMANDS;
const int wxSTC_CMAKE_PARAMETERS;
const int wxSTC_CMAKE_VARIABLE;
const int wxSTC_CMAKE_USERDEFINED;
const int wxSTC_CMAKE_WHILEDEF;
const int wxSTC_CMAKE_FOREACHDEF;
const int wxSTC_CMAKE_IFDEFINEDEF;
const int wxSTC_CMAKE_MACRODEF;
const int wxSTC_CMAKE_STRINGVAR;
const int wxSTC_CMAKE_NUMBER;
const int wxSTC_GAP_DEFAULT;
const int wxSTC_GAP_IDENTIFIER;
const int wxSTC_GAP_KEYWORD;
const int wxSTC_GAP_KEYWORD2;
const int wxSTC_GAP_KEYWORD3;
const int wxSTC_GAP_KEYWORD4;
const int wxSTC_GAP_STRING;
const int wxSTC_GAP_CHAR;
const int wxSTC_GAP_OPERATOR;
const int wxSTC_GAP_COMMENT;
const int wxSTC_GAP_NUMBER;
const int wxSTC_GAP_STRINGEOL;
const int wxSTC_PLM_DEFAULT;
const int wxSTC_PLM_COMMENT;
const int wxSTC_PLM_STRING;
const int wxSTC_PLM_NUMBER;
const int wxSTC_PLM_IDENTIFIER;
const int wxSTC_PLM_OPERATOR;
const int wxSTC_PLM_CONTROL;
const int wxSTC_PLM_KEYWORD;
const int wxSTC_ABL_DEFAULT;
const int wxSTC_ABL_NUMBER;
const int wxSTC_ABL_WORD;
const int wxSTC_ABL_STRING;
const int wxSTC_ABL_CHARACTER;
const int wxSTC_ABL_PREPROCESSOR;
const int wxSTC_ABL_OPERATOR;
const int wxSTC_ABL_IDENTIFIER;
const int wxSTC_ABL_BLOCK;
const int wxSTC_ABL_END;
const int wxSTC_ABL_COMMENT;
const int wxSTC_ABL_TASKMARKER;
const int wxSTC_ABL_LINECOMMENT;
const int wxSTC_ABAQUS_DEFAULT;
const int wxSTC_ABAQUS_COMMENT;
const int wxSTC_ABAQUS_COMMENTBLOCK;
const int wxSTC_ABAQUS_NUMBER;
const int wxSTC_ABAQUS_STRING;
const int wxSTC_ABAQUS_OPERATOR;
const int wxSTC_ABAQUS_WORD;
const int wxSTC_ABAQUS_PROCESSOR;
const int wxSTC_ABAQUS_COMMAND;
const int wxSTC_ABAQUS_SLASHCOMMAND;
const int wxSTC_ABAQUS_STARCOMMAND;
const int wxSTC_ABAQUS_ARGUMENT;
const int wxSTC_ABAQUS_FUNCTION;
const int wxSTC_ASY_DEFAULT;
const int wxSTC_ASY_COMMENT;
const int wxSTC_ASY_COMMENTLINE;
const int wxSTC_ASY_NUMBER;
const int wxSTC_ASY_WORD;
const int wxSTC_ASY_STRING;
const int wxSTC_ASY_CHARACTER;
const int wxSTC_ASY_OPERATOR;
const int wxSTC_ASY_IDENTIFIER;
const int wxSTC_ASY_STRINGEOL;
const int wxSTC_ASY_COMMENTLINEDOC;
const int wxSTC_ASY_WORD2;
const int wxSTC_R_DEFAULT;
const int wxSTC_R_COMMENT;
const int wxSTC_R_KWORD;
const int wxSTC_R_BASEKWORD;
const int wxSTC_R_OTHERKWORD;
const int wxSTC_R_NUMBER;
const int wxSTC_R_STRING;
const int wxSTC_R_STRING2;
const int wxSTC_R_OPERATOR;
const int wxSTC_R_IDENTIFIER;
const int wxSTC_R_INFIX;
const int wxSTC_R_INFIXEOL;
const int wxSTC_MAGIK_DEFAULT;
const int wxSTC_MAGIK_COMMENT;
const int wxSTC_MAGIK_HYPER_COMMENT;
const int wxSTC_MAGIK_STRING;
const int wxSTC_MAGIK_CHARACTER;
const int wxSTC_MAGIK_NUMBER;
const int wxSTC_MAGIK_IDENTIFIER;
const int wxSTC_MAGIK_OPERATOR;
const int wxSTC_MAGIK_FLOW;
const int wxSTC_MAGIK_CONTAINER;
const int wxSTC_MAGIK_BRACKET_BLOCK;
const int wxSTC_MAGIK_BRACE_BLOCK;
const int wxSTC_MAGIK_SQBRACKET_BLOCK;
const int wxSTC_MAGIK_UNKNOWN_KEYWORD;
const int wxSTC_MAGIK_KEYWORD;
const int wxSTC_MAGIK_PRAGMA;
const int wxSTC_MAGIK_SYMBOL;
const int wxSTC_POWERSHELL_DEFAULT;
const int wxSTC_POWERSHELL_COMMENT;
const int wxSTC_POWERSHELL_STRING;
const int wxSTC_POWERSHELL_CHARACTER;
const int wxSTC_POWERSHELL_NUMBER;
const int wxSTC_POWERSHELL_VARIABLE;
const int wxSTC_POWERSHELL_OPERATOR;
const int wxSTC_POWERSHELL_IDENTIFIER;
const int wxSTC_POWERSHELL_KEYWORD;
const int wxSTC_POWERSHELL_CMDLET;
const int wxSTC_POWERSHELL_ALIAS;
const int wxSTC_POWERSHELL_FUNCTION;
const int wxSTC_POWERSHELL_USER1;
const int wxSTC_POWERSHELL_COMMENTSTREAM;
const int wxSTC_POWERSHELL_HERE_STRING;
const int wxSTC_POWERSHELL_HERE_CHARACTER;
const int wxSTC_POWERSHELL_COMMENTDOCKEYWORD;
const int wxSTC_MYSQL_DEFAULT;
const int wxSTC_MYSQL_COMMENT;
const int wxSTC_MYSQL_COMMENTLINE;
const int wxSTC_MYSQL_VARIABLE;
const int wxSTC_MYSQL_SYSTEMVARIABLE;
const int wxSTC_MYSQL_KNOWNSYSTEMVARIABLE;
const int wxSTC_MYSQL_NUMBER;
const int wxSTC_MYSQL_MAJORKEYWORD;
const int wxSTC_MYSQL_KEYWORD;
const int wxSTC_MYSQL_DATABASEOBJECT;
const int wxSTC_MYSQL_PROCEDUREKEYWORD;
const int wxSTC_MYSQL_STRING;
const int wxSTC_MYSQL_SQSTRING;
const int wxSTC_MYSQL_DQSTRING;
const int wxSTC_MYSQL_OPERATOR;
const int wxSTC_MYSQL_FUNCTION;
const int wxSTC_MYSQL_IDENTIFIER;
const int wxSTC_MYSQL_QUOTEDIDENTIFIER;
const int wxSTC_MYSQL_USER1;
const int wxSTC_MYSQL_USER2;
const int wxSTC_MYSQL_USER3;
const int wxSTC_MYSQL_HIDDENCOMMAND;
const int wxSTC_MYSQL_PLACEHOLDER;
const int wxSTC_PO_DEFAULT;
const int wxSTC_PO_COMMENT;
const int wxSTC_PO_MSGID;
const int wxSTC_PO_MSGID_TEXT;
const int wxSTC_PO_MSGSTR;
const int wxSTC_PO_MSGSTR_TEXT;
const int wxSTC_PO_MSGCTXT;
const int wxSTC_PO_MSGCTXT_TEXT;
const int wxSTC_PO_FUZZY;
const int wxSTC_PO_PROGRAMMER_COMMENT;
const int wxSTC_PO_REFERENCE;
const int wxSTC_PO_FLAGS;
const int wxSTC_PO_MSGID_TEXT_EOL;
const int wxSTC_PO_MSGSTR_TEXT_EOL;
const int wxSTC_PO_MSGCTXT_TEXT_EOL;
const int wxSTC_PO_ERROR;
const int wxSTC_PAS_DEFAULT;
const int wxSTC_PAS_IDENTIFIER;
const int wxSTC_PAS_COMMENT;
const int wxSTC_PAS_COMMENT2;
const int wxSTC_PAS_COMMENTLINE;
const int wxSTC_PAS_PREPROCESSOR;
const int wxSTC_PAS_PREPROCESSOR2;
const int wxSTC_PAS_NUMBER;
const int wxSTC_PAS_HEXNUMBER;
const int wxSTC_PAS_WORD;
const int wxSTC_PAS_STRING;
const int wxSTC_PAS_STRINGEOL;
const int wxSTC_PAS_CHARACTER;
const int wxSTC_PAS_OPERATOR;
const int wxSTC_PAS_ASM;
const int wxSTC_SORCUS_DEFAULT;
const int wxSTC_SORCUS_COMMAND;
const int wxSTC_SORCUS_PARAMETER;
const int wxSTC_SORCUS_COMMENTLINE;
const int wxSTC_SORCUS_STRING;
const int wxSTC_SORCUS_STRINGEOL;
const int wxSTC_SORCUS_IDENTIFIER;
const int wxSTC_SORCUS_OPERATOR;
const int wxSTC_SORCUS_NUMBER;
const int wxSTC_SORCUS_CONSTANT;
const int wxSTC_POWERPRO_DEFAULT;
const int wxSTC_POWERPRO_COMMENTBLOCK;
const int wxSTC_POWERPRO_COMMENTLINE;
const int wxSTC_POWERPRO_NUMBER;
const int wxSTC_POWERPRO_WORD;
const int wxSTC_POWERPRO_WORD2;
const int wxSTC_POWERPRO_WORD3;
const int wxSTC_POWERPRO_WORD4;
const int wxSTC_POWERPRO_DOUBLEQUOTEDSTRING;
const int wxSTC_POWERPRO_SINGLEQUOTEDSTRING;
const int wxSTC_POWERPRO_LINECONTINUE;
const int wxSTC_POWERPRO_OPERATOR;
const int wxSTC_POWERPRO_IDENTIFIER;
const int wxSTC_POWERPRO_STRINGEOL;
const int wxSTC_POWERPRO_VERBATIM;
const int wxSTC_POWERPRO_ALTQUOTE;
const int wxSTC_POWERPRO_FUNCTION;
const int wxSTC_SML_DEFAULT;
const int wxSTC_SML_IDENTIFIER;
const int wxSTC_SML_TAGNAME;
const int wxSTC_SML_KEYWORD;
const int wxSTC_SML_KEYWORD2;
const int wxSTC_SML_KEYWORD3;
const int wxSTC_SML_LINENUM;
const int wxSTC_SML_OPERATOR;
const int wxSTC_SML_NUMBER;
const int wxSTC_SML_CHAR;
const int wxSTC_SML_STRING;
const int wxSTC_SML_COMMENT;
const int wxSTC_SML_COMMENT1;
const int wxSTC_SML_COMMENT2;
const int wxSTC_SML_COMMENT3;
const int wxSTC_MARKDOWN_DEFAULT;
const int wxSTC_MARKDOWN_LINE_BEGIN;
const int wxSTC_MARKDOWN_STRONG1;
const int wxSTC_MARKDOWN_STRONG2;
const int wxSTC_MARKDOWN_EM1;
const int wxSTC_MARKDOWN_EM2;
const int wxSTC_MARKDOWN_HEADER1;
const int wxSTC_MARKDOWN_HEADER2;
const int wxSTC_MARKDOWN_HEADER3;
const int wxSTC_MARKDOWN_HEADER4;
const int wxSTC_MARKDOWN_HEADER5;
const int wxSTC_MARKDOWN_HEADER6;
const int wxSTC_MARKDOWN_PRECHAR;
const int wxSTC_MARKDOWN_ULIST_ITEM;
const int wxSTC_MARKDOWN_OLIST_ITEM;
const int wxSTC_MARKDOWN_BLOCKQUOTE;
const int wxSTC_MARKDOWN_STRIKEOUT;
const int wxSTC_MARKDOWN_HRULE;
const int wxSTC_MARKDOWN_LINK;
const int wxSTC_MARKDOWN_CODE;
const int wxSTC_MARKDOWN_CODE2;
const int wxSTC_MARKDOWN_CODEBK;
const int wxSTC_TXT2TAGS_DEFAULT;
const int wxSTC_TXT2TAGS_LINE_BEGIN;
const int wxSTC_TXT2TAGS_STRONG1;
const int wxSTC_TXT2TAGS_STRONG2;
const int wxSTC_TXT2TAGS_EM1;
const int wxSTC_TXT2TAGS_EM2;
const int wxSTC_TXT2TAGS_HEADER1;
const int wxSTC_TXT2TAGS_HEADER2;
const int wxSTC_TXT2TAGS_HEADER3;
const int wxSTC_TXT2TAGS_HEADER4;
const int wxSTC_TXT2TAGS_HEADER5;
const int wxSTC_TXT2TAGS_HEADER6;
const int wxSTC_TXT2TAGS_PRECHAR;
const int wxSTC_TXT2TAGS_ULIST_ITEM;
const int wxSTC_TXT2TAGS_OLIST_ITEM;
const int wxSTC_TXT2TAGS_BLOCKQUOTE;
const int wxSTC_TXT2TAGS_STRIKEOUT;
const int wxSTC_TXT2TAGS_HRULE;
const int wxSTC_TXT2TAGS_LINK;
const int wxSTC_TXT2TAGS_CODE;
const int wxSTC_TXT2TAGS_CODE2;
const int wxSTC_TXT2TAGS_CODEBK;
const int wxSTC_TXT2TAGS_COMMENT;
const int wxSTC_TXT2TAGS_OPTION;
const int wxSTC_TXT2TAGS_PREPROC;
const int wxSTC_TXT2TAGS_POSTPROC;
const int wxSTC_A68K_DEFAULT;
const int wxSTC_A68K_COMMENT;
const int wxSTC_A68K_NUMBER_DEC;
const int wxSTC_A68K_NUMBER_BIN;
const int wxSTC_A68K_NUMBER_HEX;
const int wxSTC_A68K_STRING1;
const int wxSTC_A68K_OPERATOR;
const int wxSTC_A68K_CPUINSTRUCTION;
const int wxSTC_A68K_EXTINSTRUCTION;
const int wxSTC_A68K_REGISTER;
const int wxSTC_A68K_DIRECTIVE;
const int wxSTC_A68K_MACRO_ARG;
const int wxSTC_A68K_LABEL;
const int wxSTC_A68K_STRING2;
const int wxSTC_A68K_IDENTIFIER;
const int wxSTC_A68K_MACRO_DECLARATION;
const int wxSTC_A68K_COMMENT_WORD;
const int wxSTC_A68K_COMMENT_SPECIAL;
const int wxSTC_A68K_COMMENT_DOXYGEN;
const int wxSTC_MODULA_DEFAULT;
const int wxSTC_MODULA_COMMENT;
const int wxSTC_MODULA_DOXYCOMM;
const int wxSTC_MODULA_DOXYKEY;
const int wxSTC_MODULA_KEYWORD;
const int wxSTC_MODULA_RESERVED;
const int wxSTC_MODULA_NUMBER;
const int wxSTC_MODULA_BASENUM;
const int wxSTC_MODULA_FLOAT;
const int wxSTC_MODULA_STRING;
const int wxSTC_MODULA_STRSPEC;
const int wxSTC_MODULA_CHAR;
const int wxSTC_MODULA_CHARSPEC;
const int wxSTC_MODULA_PROC;
const int wxSTC_MODULA_PRAGMA;
const int wxSTC_MODULA_PRGKEY;
const int wxSTC_MODULA_OPERATOR;
const int wxSTC_MODULA_BADSTR;
const int wxSTC_COFFEESCRIPT_DEFAULT;
const int wxSTC_COFFEESCRIPT_COMMENT;
const int wxSTC_COFFEESCRIPT_COMMENTLINE;
const int wxSTC_COFFEESCRIPT_COMMENTDOC;
const int wxSTC_COFFEESCRIPT_NUMBER;
const int wxSTC_COFFEESCRIPT_WORD;
const int wxSTC_COFFEESCRIPT_STRING;
const int wxSTC_COFFEESCRIPT_CHARACTER;
const int wxSTC_COFFEESCRIPT_UUID;
const int wxSTC_COFFEESCRIPT_PREPROCESSOR;
const int wxSTC_COFFEESCRIPT_OPERATOR;
const int wxSTC_COFFEESCRIPT_IDENTIFIER;
const int wxSTC_COFFEESCRIPT_STRINGEOL;
const int wxSTC_COFFEESCRIPT_VERBATIM;
const int wxSTC_COFFEESCRIPT_REGEX;
const int wxSTC_COFFEESCRIPT_COMMENTLINEDOC;
const int wxSTC_COFFEESCRIPT_WORD2;
const int wxSTC_COFFEESCRIPT_COMMENTDOCKEYWORD;
const int wxSTC_COFFEESCRIPT_COMMENTDOCKEYWORDERROR;
const int wxSTC_COFFEESCRIPT_GLOBALCLASS;
const int wxSTC_COFFEESCRIPT_STRINGRAW;
const int wxSTC_COFFEESCRIPT_TRIPLEVERBATIM;
const int wxSTC_COFFEESCRIPT_COMMENTBLOCK;
const int wxSTC_COFFEESCRIPT_VERBOSE_REGEX;
const int wxSTC_COFFEESCRIPT_VERBOSE_REGEX_COMMENT;
const int wxSTC_COFFEESCRIPT_INSTANCEPROPERTY;
const int wxSTC_AVS_DEFAULT;
const int wxSTC_AVS_COMMENTBLOCK;
const int wxSTC_AVS_COMMENTBLOCKN;
const int wxSTC_AVS_COMMENTLINE;
const int wxSTC_AVS_NUMBER;
const int wxSTC_AVS_OPERATOR;
const int wxSTC_AVS_IDENTIFIER;
const int wxSTC_AVS_STRING;
const int wxSTC_AVS_TRIPLESTRING;
const int wxSTC_AVS_KEYWORD;
const int wxSTC_AVS_FILTER;
const int wxSTC_AVS_PLUGIN;
const int wxSTC_AVS_FUNCTION;
const int wxSTC_AVS_CLIPPROP;
const int wxSTC_AVS_USERDFN;
const int wxSTC_ECL_DEFAULT;
const int wxSTC_ECL_COMMENT;
const int wxSTC_ECL_COMMENTLINE;
const int wxSTC_ECL_NUMBER;
const int wxSTC_ECL_STRING;
const int wxSTC_ECL_WORD0;
const int wxSTC_ECL_OPERATOR;
const int wxSTC_ECL_CHARACTER;
const int wxSTC_ECL_UUID;
const int wxSTC_ECL_PREPROCESSOR;
const int wxSTC_ECL_UNKNOWN;
const int wxSTC_ECL_IDENTIFIER;
const int wxSTC_ECL_STRINGEOL;
const int wxSTC_ECL_VERBATIM;
const int wxSTC_ECL_REGEX;
const int wxSTC_ECL_COMMENTLINEDOC;
const int wxSTC_ECL_WORD1;
const int wxSTC_ECL_COMMENTDOCKEYWORD;
const int wxSTC_ECL_COMMENTDOCKEYWORDERROR;
const int wxSTC_ECL_WORD2;
const int wxSTC_ECL_WORD3;
const int wxSTC_ECL_WORD4;
const int wxSTC_ECL_WORD5;
const int wxSTC_ECL_COMMENTDOC;
const int wxSTC_ECL_ADDED;
const int wxSTC_ECL_DELETED;
const int wxSTC_ECL_CHANGED;
const int wxSTC_ECL_MOVED;
const int wxSTC_OSCRIPT_DEFAULT;
const int wxSTC_OSCRIPT_LINE_COMMENT;
const int wxSTC_OSCRIPT_BLOCK_COMMENT;
const int wxSTC_OSCRIPT_DOC_COMMENT;
const int wxSTC_OSCRIPT_PREPROCESSOR;
const int wxSTC_OSCRIPT_NUMBER;
const int wxSTC_OSCRIPT_SINGLEQUOTE_STRING;
const int wxSTC_OSCRIPT_DOUBLEQUOTE_STRING;
const int wxSTC_OSCRIPT_CONSTANT;
const int wxSTC_OSCRIPT_IDENTIFIER;
const int wxSTC_OSCRIPT_GLOBAL;
const int wxSTC_OSCRIPT_KEYWORD;
const int wxSTC_OSCRIPT_OPERATOR;
const int wxSTC_OSCRIPT_LABEL;
const int wxSTC_OSCRIPT_TYPE;
const int wxSTC_OSCRIPT_FUNCTION;
const int wxSTC_OSCRIPT_OBJECT;
const int wxSTC_OSCRIPT_PROPERTY;
const int wxSTC_OSCRIPT_METHOD;
const int wxSTC_VISUALPROLOG_DEFAULT;
const int wxSTC_VISUALPROLOG_KEY_MAJOR;
const int wxSTC_VISUALPROLOG_KEY_MINOR;
const int wxSTC_VISUALPROLOG_KEY_DIRECTIVE;
const int wxSTC_VISUALPROLOG_COMMENT_BLOCK;
const int wxSTC_VISUALPROLOG_COMMENT_LINE;
const int wxSTC_VISUALPROLOG_COMMENT_KEY;
const int wxSTC_VISUALPROLOG_COMMENT_KEY_ERROR;
const int wxSTC_VISUALPROLOG_IDENTIFIER;
const int wxSTC_VISUALPROLOG_VARIABLE;
const int wxSTC_VISUALPROLOG_ANONYMOUS;
const int wxSTC_VISUALPROLOG_NUMBER;
const int wxSTC_VISUALPROLOG_OPERATOR;
const int wxSTC_VISUALPROLOG_CHARACTER;
const int wxSTC_VISUALPROLOG_CHARACTER_TOO_MANY;
const int wxSTC_VISUALPROLOG_CHARACTER_ESCAPE_ERROR;
const int wxSTC_VISUALPROLOG_STRING;
const int wxSTC_VISUALPROLOG_STRING_ESCAPE;
const int wxSTC_VISUALPROLOG_STRING_ESCAPE_ERROR;
const int wxSTC_VISUALPROLOG_STRING_EOL_OPEN;
const int wxSTC_VISUALPROLOG_STRING_VERBATIM;
const int wxSTC_VISUALPROLOG_STRING_VERBATIM_SPECIAL;
const int wxSTC_VISUALPROLOG_STRING_VERBATIM_EOL;
const int wxSTC_STTXT_DEFAULT;
const int wxSTC_STTXT_COMMENT;
const int wxSTC_STTXT_COMMENTLINE;
const int wxSTC_STTXT_KEYWORD;
const int wxSTC_STTXT_TYPE;
const int wxSTC_STTXT_FUNCTION;
const int wxSTC_STTXT_FB;
const int wxSTC_STTXT_NUMBER;
const int wxSTC_STTXT_HEXNUMBER;
const int wxSTC_STTXT_PRAGMA;
const int wxSTC_STTXT_OPERATOR;
const int wxSTC_STTXT_CHARACTER;
const int wxSTC_STTXT_STRING1;
const int wxSTC_STTXT_STRING2;
const int wxSTC_STTXT_STRINGEOL;
const int wxSTC_STTXT_IDENTIFIER;
const int wxSTC_STTXT_DATETIME;
const int wxSTC_STTXT_VARS;
const int wxSTC_STTXT_PRAGMAS;
const int wxSTC_KVIRC_DEFAULT;
const int wxSTC_KVIRC_COMMENT;
const int wxSTC_KVIRC_COMMENTBLOCK;
const int wxSTC_KVIRC_STRING;
const int wxSTC_KVIRC_WORD;
const int wxSTC_KVIRC_KEYWORD;
const int wxSTC_KVIRC_FUNCTION_KEYWORD;
const int wxSTC_KVIRC_FUNCTION;
const int wxSTC_KVIRC_VARIABLE;
const int wxSTC_KVIRC_NUMBER;
const int wxSTC_KVIRC_OPERATOR;
const int wxSTC_KVIRC_STRING_FUNCTION;
const int wxSTC_KVIRC_STRING_VARIABLE;
const int wxSTC_RUST_DEFAULT;
const int wxSTC_RUST_COMMENTBLOCK;
const int wxSTC_RUST_COMMENTLINE;
const int wxSTC_RUST_COMMENTBLOCKDOC;
const int wxSTC_RUST_COMMENTLINEDOC;
const int wxSTC_RUST_NUMBER;
const int wxSTC_RUST_WORD;
const int wxSTC_RUST_WORD2;
const int wxSTC_RUST_WORD3;
const int wxSTC_RUST_WORD4;
const int wxSTC_RUST_WORD5;
const int wxSTC_RUST_WORD6;
const int wxSTC_RUST_WORD7;
const int wxSTC_RUST_STRING;
const int wxSTC_RUST_STRINGR;
const int wxSTC_RUST_CHARACTER;
const int wxSTC_RUST_OPERATOR;
const int wxSTC_RUST_IDENTIFIER;
const int wxSTC_RUST_LIFETIME;
const int wxSTC_RUST_MACRO;
const int wxSTC_RUST_LEXERROR;
const int wxSTC_RUST_BYTESTRING;
const int wxSTC_RUST_BYTESTRINGR;
const int wxSTC_RUST_BYTECHARACTER;
const int wxSTC_DMAP_DEFAULT;
const int wxSTC_DMAP_COMMENT;
const int wxSTC_DMAP_NUMBER;
const int wxSTC_DMAP_STRING1;
const int wxSTC_DMAP_STRING2;
const int wxSTC_DMAP_STRINGEOL;
const int wxSTC_DMAP_OPERATOR;
const int wxSTC_DMAP_IDENTIFIER;
const int wxSTC_DMAP_WORD;
const int wxSTC_DMAP_WORD2;
const int wxSTC_DMAP_WORD3;
const int wxSTC_DMIS_DEFAULT;
const int wxSTC_DMIS_COMMENT;
const int wxSTC_DMIS_STRING;
const int wxSTC_DMIS_NUMBER;
const int wxSTC_DMIS_KEYWORD;
const int wxSTC_DMIS_MAJORWORD;
const int wxSTC_DMIS_MINORWORD;
const int wxSTC_DMIS_UNSUPPORTED_MAJOR;
const int wxSTC_DMIS_UNSUPPORTED_MINOR;
const int wxSTC_DMIS_LABEL;
const int wxSTC_REG_DEFAULT;
const int wxSTC_REG_COMMENT;
const int wxSTC_REG_VALUENAME;
const int wxSTC_REG_STRING;
const int wxSTC_REG_HEXDIGIT;
const int wxSTC_REG_VALUETYPE;
const int wxSTC_REG_ADDEDKEY;
const int wxSTC_REG_DELETEDKEY;
const int wxSTC_REG_ESCAPED;
const int wxSTC_REG_KEYPATH_GUID;
const int wxSTC_REG_STRING_GUID;
const int wxSTC_REG_PARAMETER;
const int wxSTC_REG_OPERATOR;
const int wxSTC_BIBTEX_DEFAULT;
const int wxSTC_BIBTEX_ENTRY;
const int wxSTC_BIBTEX_UNKNOWN_ENTRY;
const int wxSTC_BIBTEX_KEY;
const int wxSTC_BIBTEX_PARAMETER;
const int wxSTC_BIBTEX_VALUE;
const int wxSTC_BIBTEX_COMMENT;
const int wxSTC_HEX_DEFAULT;
const int wxSTC_HEX_RECSTART;
const int wxSTC_HEX_RECTYPE;
const int wxSTC_HEX_RECTYPE_UNKNOWN;
const int wxSTC_HEX_BYTECOUNT;
const int wxSTC_HEX_BYTECOUNT_WRONG;
const int wxSTC_HEX_NOADDRESS;
const int wxSTC_HEX_DATAADDRESS;
const int wxSTC_HEX_RECCOUNT;
const int wxSTC_HEX_STARTADDRESS;
const int wxSTC_HEX_ADDRESSFIELD_UNKNOWN;
const int wxSTC_HEX_EXTENDEDADDRESS;
const int wxSTC_HEX_DATA_ODD;
const int wxSTC_HEX_DATA_EVEN;
const int wxSTC_HEX_DATA_UNKNOWN;
const int wxSTC_HEX_DATA_EMPTY;
const int wxSTC_HEX_CHECKSUM;
const int wxSTC_HEX_CHECKSUM_WRONG;
const int wxSTC_HEX_GARBAGE;
const int wxSTC_JSON_DEFAULT;
const int wxSTC_JSON_NUMBER;
const int wxSTC_JSON_STRING;
const int wxSTC_JSON_STRINGEOL;
const int wxSTC_JSON_PROPERTYNAME;
const int wxSTC_JSON_ESCAPESEQUENCE;
const int wxSTC_JSON_LINECOMMENT;
const int wxSTC_JSON_BLOCKCOMMENT;
const int wxSTC_JSON_OPERATOR;
const int wxSTC_JSON_URI;
const int wxSTC_JSON_COMPACTIRI;
const int wxSTC_JSON_KEYWORD;
const int wxSTC_JSON_LDKEYWORD;
const int wxSTC_JSON_ERROR;
const int wxSTC_EDI_DEFAULT;
const int wxSTC_EDI_SEGMENTSTART;
const int wxSTC_EDI_SEGMENTEND;
const int wxSTC_EDI_SEP_ELEMENT;
const int wxSTC_EDI_SEP_COMPOSITE;
const int wxSTC_EDI_SEP_RELEASE;
const int wxSTC_EDI_UNA;
const int wxSTC_EDI_UNH;
const int wxSTC_EDI_BADSEGMENT;
const int wxSTC_INDIC0_MASK;
const int wxSTC_INDIC1_MASK;
const int wxSTC_INDIC2_MASK;
const int wxSTC_INDICS_MASK;
const int wxSTC_CMD_REDO;
const int wxSTC_CMD_SELECTALL;
const int wxSTC_CMD_UNDO;
const int wxSTC_CMD_CUT;
const int wxSTC_CMD_COPY;
const int wxSTC_CMD_PASTE;
const int wxSTC_CMD_CLEAR;
const int wxSTC_CMD_LINEDOWN;
const int wxSTC_CMD_LINEDOWNEXTEND;
const int wxSTC_CMD_LINEUP;
const int wxSTC_CMD_LINEUPEXTEND;
const int wxSTC_CMD_CHARLEFT;
const int wxSTC_CMD_CHARLEFTEXTEND;
const int wxSTC_CMD_CHARRIGHT;
const int wxSTC_CMD_CHARRIGHTEXTEND;
const int wxSTC_CMD_WORDLEFT;
const int wxSTC_CMD_WORDLEFTEXTEND;
const int wxSTC_CMD_WORDRIGHT;
const int wxSTC_CMD_WORDRIGHTEXTEND;
const int wxSTC_CMD_HOME;
const int wxSTC_CMD_HOMEEXTEND;
const int wxSTC_CMD_LINEEND;
const int wxSTC_CMD_LINEENDEXTEND;
const int wxSTC_CMD_DOCUMENTSTART;
const int wxSTC_CMD_DOCUMENTSTARTEXTEND;
const int wxSTC_CMD_DOCUMENTEND;
const int wxSTC_CMD_DOCUMENTENDEXTEND;
const int wxSTC_CMD_PAGEUP;
const int wxSTC_CMD_PAGEUPEXTEND;
const int wxSTC_CMD_PAGEDOWN;
const int wxSTC_CMD_PAGEDOWNEXTEND;
const int wxSTC_CMD_EDITTOGGLEOVERTYPE;
const int wxSTC_CMD_CANCEL;
const int wxSTC_CMD_DELETEBACK;
const int wxSTC_CMD_TAB;
const int wxSTC_CMD_BACKTAB;
const int wxSTC_CMD_NEWLINE;
const int wxSTC_CMD_FORMFEED;
const int wxSTC_CMD_VCHOME;
const int wxSTC_CMD_VCHOMEEXTEND;
const int wxSTC_CMD_ZOOMIN;
const int wxSTC_CMD_ZOOMOUT;
const int wxSTC_CMD_DELWORDLEFT;
const int wxSTC_CMD_DELWORDRIGHT;
const int wxSTC_CMD_DELWORDRIGHTEND;
const int wxSTC_CMD_LINECUT;
const int wxSTC_CMD_LINEDELETE;
const int wxSTC_CMD_LINETRANSPOSE;
const int wxSTC_CMD_LINEDUPLICATE;
const int wxSTC_CMD_LOWERCASE;
const int wxSTC_CMD_UPPERCASE;
const int wxSTC_CMD_LINESCROLLDOWN;
const int wxSTC_CMD_LINESCROLLUP;
const int wxSTC_CMD_DELETEBACKNOTLINE;
const int wxSTC_CMD_HOMEDISPLAY;
const int wxSTC_CMD_HOMEDISPLAYEXTEND;
const int wxSTC_CMD_LINEENDDISPLAY;
const int wxSTC_CMD_LINEENDDISPLAYEXTEND;
const int wxSTC_CMD_HOMEWRAP;
const int wxSTC_CMD_HOMEWRAPEXTEND;
const int wxSTC_CMD_LINEENDWRAP;
const int wxSTC_CMD_LINEENDWRAPEXTEND;
const int wxSTC_CMD_VCHOMEWRAP;
const int wxSTC_CMD_VCHOMEWRAPEXTEND;
const int wxSTC_CMD_LINECOPY;
const int wxSTC_CMD_WORDPARTLEFT;
const int wxSTC_CMD_WORDPARTLEFTEXTEND;
const int wxSTC_CMD_WORDPARTRIGHT;
const int wxSTC_CMD_WORDPARTRIGHTEXTEND;
const int wxSTC_CMD_DELLINELEFT;
const int wxSTC_CMD_DELLINERIGHT;
const int wxSTC_CMD_PARADOWN;
const int wxSTC_CMD_PARADOWNEXTEND;
const int wxSTC_CMD_PARAUP;
const int wxSTC_CMD_PARAUPEXTEND;
const int wxSTC_CMD_LINEDOWNRECTEXTEND;
const int wxSTC_CMD_LINEUPRECTEXTEND;
const int wxSTC_CMD_CHARLEFTRECTEXTEND;
const int wxSTC_CMD_CHARRIGHTRECTEXTEND;
const int wxSTC_CMD_HOMERECTEXTEND;
const int wxSTC_CMD_VCHOMERECTEXTEND;
const int wxSTC_CMD_LINEENDRECTEXTEND;
const int wxSTC_CMD_PAGEUPRECTEXTEND;
const int wxSTC_CMD_PAGEDOWNRECTEXTEND;
const int wxSTC_CMD_STUTTEREDPAGEUP;
const int wxSTC_CMD_STUTTEREDPAGEUPEXTEND;
const int wxSTC_CMD_STUTTEREDPAGEDOWN;
const int wxSTC_CMD_STUTTEREDPAGEDOWNEXTEND;
const int wxSTC_CMD_WORDLEFTEND;
const int wxSTC_CMD_WORDLEFTENDEXTEND;
const int wxSTC_CMD_WORDRIGHTEND;
const int wxSTC_CMD_WORDRIGHTENDEXTEND;
const int wxSTC_CMD_VERTICALCENTRECARET;
const int wxSTC_CMD_MOVESELECTEDLINESUP;
const int wxSTC_CMD_MOVESELECTEDLINESDOWN;
const int wxSTC_CMD_SCROLLTOSTART;
const int wxSTC_CMD_SCROLLTOEND;
const int wxSTC_CMD_VCHOMEDISPLAY;
const int wxSTC_CMD_VCHOMEDISPLAYEXTEND;
const wxEventType wxEVT_STC_CHANGE   /PyName=wxEVT_STC_CHANGE/;

const wxEventType wxEVT_STC_STYLENEEDED   /PyName=wxEVT_STC_STYLENEEDED/;

const wxEventType wxEVT_STC_CHARADDED   /PyName=wxEVT_STC_CHARADDED/;

const wxEventType wxEVT_STC_SAVEPOINTREACHED   /PyName=wxEVT_STC_SAVEPOINTREACHED/;

const wxEventType wxEVT_STC_SAVEPOINTLEFT   /PyName=wxEVT_STC_SAVEPOINTLEFT/;

const wxEventType wxEVT_STC_ROMODIFYATTEMPT   /PyName=wxEVT_STC_ROMODIFYATTEMPT/;

const wxEventType wxEVT_STC_KEY   /PyName=wxEVT_STC_KEY/;

const wxEventType wxEVT_STC_DOUBLECLICK   /PyName=wxEVT_STC_DOUBLECLICK/;

const wxEventType wxEVT_STC_UPDATEUI   /PyName=wxEVT_STC_UPDATEUI/;

const wxEventType wxEVT_STC_MODIFIED   /PyName=wxEVT_STC_MODIFIED/;

const wxEventType wxEVT_STC_MACRORECORD   /PyName=wxEVT_STC_MACRORECORD/;

const wxEventType wxEVT_STC_MARGINCLICK   /PyName=wxEVT_STC_MARGINCLICK/;

const wxEventType wxEVT_STC_NEEDSHOWN   /PyName=wxEVT_STC_NEEDSHOWN/;

const wxEventType wxEVT_STC_PAINTED   /PyName=wxEVT_STC_PAINTED/;

const wxEventType wxEVT_STC_USERLISTSELECTION   /PyName=wxEVT_STC_USERLISTSELECTION/;

const wxEventType wxEVT_STC_URIDROPPED   /PyName=wxEVT_STC_URIDROPPED/;

const wxEventType wxEVT_STC_DWELLSTART   /PyName=wxEVT_STC_DWELLSTART/;

const wxEventType wxEVT_STC_DWELLEND   /PyName=wxEVT_STC_DWELLEND/;

const wxEventType wxEVT_STC_START_DRAG   /PyName=wxEVT_STC_START_DRAG/;

const wxEventType wxEVT_STC_DRAG_OVER   /PyName=wxEVT_STC_DRAG_OVER/;

const wxEventType wxEVT_STC_DO_DROP   /PyName=wxEVT_STC_DO_DROP/;

const wxEventType wxEVT_STC_ZOOM   /PyName=wxEVT_STC_ZOOM/;

const wxEventType wxEVT_STC_HOTSPOT_CLICK   /PyName=wxEVT_STC_HOTSPOT_CLICK/;

const wxEventType wxEVT_STC_HOTSPOT_DCLICK   /PyName=wxEVT_STC_HOTSPOT_DCLICK/;

const wxEventType wxEVT_STC_CALLTIP_CLICK   /PyName=wxEVT_STC_CALLTIP_CLICK/;

const wxEventType wxEVT_STC_AUTOCOMP_SELECTION   /PyName=wxEVT_STC_AUTOCOMP_SELECTION/;

const wxEventType wxEVT_STC_INDICATOR_CLICK   /PyName=wxEVT_STC_INDICATOR_CLICK/;

const wxEventType wxEVT_STC_INDICATOR_RELEASE   /PyName=wxEVT_STC_INDICATOR_RELEASE/;

const wxEventType wxEVT_STC_AUTOCOMP_CANCELLED   /PyName=wxEVT_STC_AUTOCOMP_CANCELLED/;

const wxEventType wxEVT_STC_AUTOCOMP_CHAR_DELETED   /PyName=wxEVT_STC_AUTOCOMP_CHAR_DELETED/;

const wxEventType wxEVT_STC_HOTSPOT_RELEASE_CLICK   /PyName=wxEVT_STC_HOTSPOT_RELEASE_CLICK/;

const wxEventType wxEVT_STC_CLIPBOARD_COPY   /PyName=wxEVT_STC_CLIPBOARD_COPY/;

const wxEventType wxEVT_STC_CLIPBOARD_PASTE   /PyName=wxEVT_STC_CLIPBOARD_PASTE/;

const wxEventType wxEVT_STC_AUTOCOMP_COMPLETED   /PyName=wxEVT_STC_AUTOCOMP_COMPLETED/;

const wxEventType wxEVT_STC_MARGIN_RIGHT_CLICK   /PyName=wxEVT_STC_MARGIN_RIGHT_CLICK/;

const wxEventType wxEVT_STC_AUTOCOMP_SELECTION_CHANGE   /PyName=wxEVT_STC_AUTOCOMP_SELECTION_CHANGE/;

const char* wxSTCNameStr;

class wxStyledTextCtrl : wxControl
{
    %Docstring
        StyledTextCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr)
        StyledTextCtrl()
        
        A wxWidgets implementation of the Scintilla source code editing
        component.
    %End
    %TypeHeaderCode
        #include <wx/stc/stc.h>
    %End

public:
    wxStyledTextCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxSTCNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxStyledTextCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxStyledTextCtrl();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxString & name = wxSTCNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr) -> bool
        
        Create the UI elements for a STC that was created with the default
        ctor.
    %End

    void AddText(
        const wxString & text
    );
    %Docstring
        AddText(text)
        
        Add text to the document at current position.
    %End

    void AddStyledText(
        const wxMemoryBuffer & data
    );
    %Docstring
        AddStyledText(data)
        
        Add array of cells to document.
    %End

    void InsertText(
        int pos,
        const wxString & text
    );
    %Docstring
        InsertText(pos, text)
        
        Insert string at a position.
    %End

    void ChangeInsertion(
        int length,
        const wxString & text
    );
    %Docstring
        ChangeInsertion(length, text)
        
        Change the text that is being inserted in response to
        wxSTC_MOD_INSERTCHECK.
    %End

    void ClearAll();
    %Docstring
        ClearAll()
        
        Delete all text in the document.
    %End

    void DeleteRange(
        int start,
        int lengthDelete
    );
    %Docstring
        DeleteRange(start, lengthDelete)
        
        Delete a range of text in the document.
    %End

    void ClearDocumentStyle();
    %Docstring
        ClearDocumentStyle()
        
        Set all style bytes to 0, remove all folding information.
    %End

    int GetCharAt(
        int pos
    ) const;
    %Docstring
        GetCharAt(pos) -> int
        
        Returns the character byte at the position.
    %End

    int GetStyleAt(
        int pos
    ) const;
    %Docstring
        GetStyleAt(pos) -> int
        
        Returns the style byte at the position.
    %End

    void SetSavePoint();
    %Docstring
        SetSavePoint()
        
        Remember the current position in the undo history as the position at
        which the document was saved.
    %End

    wxMemoryBuffer GetStyledText(
        int startPos,
        int endPos
    );
    %Docstring
        GetStyledText(startPos, endPos) -> MemoryBuffer
        
        Retrieve a buffer of cells.
    %End

    bool GetReadOnly() const;
    %Docstring
        GetReadOnly() -> bool
        
        In read-only mode?
    %End

    wxString GetLine(
        int line
    ) const;
    %Docstring
        GetLine(line) -> String
        
        Retrieve the contents of a line.
    %End

    wxString GetTextRange(
        int startPos,
        int endPos
    );
    %Docstring
        GetTextRange(startPos, endPos) -> String
        
        Retrieve a range of text.
    %End

    void ReplaceSelection(
        const wxString & text
    );
    %Docstring
        ReplaceSelection(text)
        
        Replace the selected text with the argument text.
    %End

    void SetReadOnly(
        bool readOnly
    );
    %Docstring
        SetReadOnly(readOnly)
        
        Set to read only or read write.
    %End

    void SetText(
        const wxString & text
    );
    %Docstring
        SetText(text)
        
        Replace the contents of the document with the argument text.
    %End

    wxString GetText() const;
    %Docstring
        GetText() -> String
        
        Retrieve all the text in the document.
    %End

    virtual
    void AppendText(
        const wxString & text
    );
    %Docstring
        AppendText(text)
        
        Append a string to the end of the document without changing the
        selection.
    %End

    void Allocate(
        int bytes
    );
    %Docstring
        Allocate(bytes)
        
        Enlarge the document to a particular size of text bytes.
    %End

    void ReleaseAllExtendedStyles();
    %Docstring
        ReleaseAllExtendedStyles()
        
        Release all extended (>255) style numbers.
    %End

    int AllocateExtendedStyles(
        int numberStyles
    );
    %Docstring
        AllocateExtendedStyles(numberStyles) -> int
        
        Allocate some extended (>255) style numbers and return the start of
        the range.
    %End

    int FindText(
        int minPos,
        int maxPos,
        const wxString & text,
        int flags = 0,
        int * findEnd   /Out/ = NULL
    );
    %Docstring
        FindText(minPos, maxPos, text, flags=0) -> (int, findEnd)
        
        Find some text in the document.
    %End

    void SetTargetStart(
        int start
    );
    %Docstring
        SetTargetStart(start)
        
        Sets the position that starts the target which is used for updating
        the document without affecting the scroll position.
    %End

    int GetTargetStart() const;
    %Docstring
        GetTargetStart() -> int
        
        Get the position that starts the target.
    %End

    void SetTargetEnd(
        int end
    );
    %Docstring
        SetTargetEnd(end)
        
        Sets the position that ends the target which is used for updating the
        document without affecting the scroll position.
    %End

    int GetTargetEnd() const;
    %Docstring
        GetTargetEnd() -> int
        
        Get the position that ends the target.
    %End

    void SetTargetRange(
        int start,
        int end
    );
    %Docstring
        SetTargetRange(start, end)
        
        Sets both the start and end of the target in one call.
    %End

    wxString GetTargetText() const;
    %Docstring
        GetTargetText() -> String
        
        Retrieve the text in the target.
    %End

    void TargetFromSelection();
    %Docstring
        TargetFromSelection()
        
        Make the target range start and end be the same as the selection range
        start and end.
    %End

    void TargetWholeDocument();
    %Docstring
        TargetWholeDocument()
        
        Sets the target to the whole document.
    %End

    int ReplaceTarget(
        const wxString & text
    );
    %Docstring
        ReplaceTarget(text) -> int
        
        Replace the target text with the argument text.
    %End

    int ReplaceTargetRE(
        const wxString & text
    );
    %Docstring
        ReplaceTargetRE(text) -> int
        
        Replace the target text with the argument text after \d processing.
    %End

    int SearchInTarget(
        const wxString & text
    );
    %Docstring
        SearchInTarget(text) -> int
        
        Search for a counted string in the target and set the target to the
        found range.
    %End

    void SetSearchFlags(
        int searchFlags
    );
    %Docstring
        SetSearchFlags(searchFlags)
        
        Set the search flags used by SearchInTarget.
    %End

    int GetSearchFlags() const;
    %Docstring
        GetSearchFlags() -> int
        
        Get the search flags used by SearchInTarget.
    %End

    wxString GetTag(
        int tagNumber
    ) const;
    %Docstring
        GetTag(tagNumber) -> String
        
        Retrieve the value of a tag from a regular expression search.
    %End

    void SearchAnchor();
    %Docstring
        SearchAnchor()
        
        Sets the current caret position to be the search anchor.
    %End

    int SearchNext(
        int searchFlags,
        const wxString & text
    );
    %Docstring
        SearchNext(searchFlags, text) -> int
        
        Find some text starting at the search anchor.
    %End

    int SearchPrev(
        int searchFlags,
        const wxString & text
    );
    %Docstring
        SearchPrev(searchFlags, text) -> int
        
        Find some text starting at the search anchor and moving backwards.
    %End

    void SetOvertype(
        bool overType
    );
    %Docstring
        SetOvertype(overType)
        
        Set to overtype (true) or insert mode.
    %End

    bool GetOvertype() const;
    %Docstring
        GetOvertype() -> bool
        
        Returns true if overtype mode is active otherwise false is returned.
    %End

    virtual
    bool CanPaste() const;
    %Docstring
        CanPaste() -> bool
        
        Will a paste succeed?
    %End

    virtual
    void Cut();
    %Docstring
        Cut()
        
        Cut the selection to the clipboard.
    %End

    virtual
    void Copy();
    %Docstring
        Copy()
        
        Copy the selection to the clipboard.
    %End

    virtual
    void Paste();
    %Docstring
        Paste()
        
        Paste the contents of the clipboard into the document replacing the
        selection.
    %End

    virtual
    void Clear();
    %Docstring
        Clear()
        
        Clear the selection.
    %End

    void CopyRange(
        int start,
        int end
    );
    %Docstring
        CopyRange(start, end)
        
        Copy a range of text to the clipboard.
    %End

    void CopyText(
        int length,
        const wxString & text
    );
    %Docstring
        CopyText(length, text)
        
        Copy argument text to the clipboard.
    %End

    void SetPasteConvertEndings(
        bool convert
    );
    %Docstring
        SetPasteConvertEndings(convert)
        
        Enable/Disable convert-on-paste for line endings.
    %End

    bool GetPasteConvertEndings() const;
    %Docstring
        GetPasteConvertEndings() -> bool
        
        Get convert-on-paste setting.
    %End

    void CopyAllowLine();
    %Docstring
        CopyAllowLine()
        
        Copy the selection, if selection empty copy the line with the caret.
    %End

    void SetStatus(
        int status
    );
    %Docstring
        SetStatus(status)
        
        Change error status - 0 = OK.
    %End

    int GetStatus() const;
    %Docstring
        GetStatus() -> int
        
        Get error status.
    %End

    virtual
    void Redo();
    %Docstring
        Redo()
        
        Redoes the next action on the undo history.
    %End

    void SetUndoCollection(
        bool collectUndo
    );
    %Docstring
        SetUndoCollection(collectUndo)
        
        Choose between collecting actions into the undo history and discarding
        them.
    %End

    virtual
    bool CanRedo() const;
    %Docstring
        CanRedo() -> bool
        
        Are there any redoable actions in the undo history?
    %End

    bool GetUndoCollection() const;
    %Docstring
        GetUndoCollection() -> bool
        
        Is undo history being collected?
    %End

    void BeginUndoAction();
    %Docstring
        BeginUndoAction()
        
        Start a sequence of actions that is undone and redone as a unit.
    %End

    void EndUndoAction();
    %Docstring
        EndUndoAction()
        
        End a sequence of actions that is undone and redone as a unit.
    %End

    virtual
    bool CanUndo() const;
    %Docstring
        CanUndo() -> bool
        
        Are there any undoable actions in the undo history?
    %End

    void EmptyUndoBuffer();
    %Docstring
        EmptyUndoBuffer()
        
        Delete the undo history.
    %End

    virtual
    void Undo();
    %Docstring
        Undo()
        
        Undo one action in the undo history.
    %End

    void AddUndoAction(
        int token,
        int flags
    );
    %Docstring
        AddUndoAction(token, flags)
        
        Add a container action to the undo stack.
    %End

    int GetLength() const;
    %Docstring
        GetLength() -> int
        
        Returns the number of bytes in the document.
    %End

    int GetCurrentPos() const;
    %Docstring
        GetCurrentPos() -> int
        
        Returns the position of the caret.
    %End

    int GetAnchor() const;
    %Docstring
        GetAnchor() -> int
        
        Returns the position of the opposite end of the selection to the
        caret.
    %End

    virtual
    void SelectAll();
    %Docstring
        SelectAll()
        
        Select all the text in the document.
    %End

    int PositionFromPoint(
        wxPoint pt
    ) const;
    %Docstring
        PositionFromPoint(pt) -> int
        
        Find the position from a point within the window.
    %End

    int PositionFromPointClose(
        int x,
        int y
    );
    %Docstring
        PositionFromPointClose(x, y) -> int
        
        Find the position from a point within the window but return
        wxSTC_INVALID_POSITION if not close to text.
    %End

    void GotoLine(
        int line
    );
    %Docstring
        GotoLine(line)
        
        Set caret to start of a line and ensure it is visible.
    %End

    void GotoPos(
        int caret
    );
    %Docstring
        GotoPos(caret)
        
        Set caret to a position and ensure it is visible.
    %End

    void SetAnchor(
        int anchor
    );
    %Docstring
        SetAnchor(anchor)
        
        Set the selection anchor to a position.
    %End

    wxString GetCurLine(
        int * linePos   /Out/ = NULL
    );
    %Docstring
        GetCurLine() -> (String, linePos)
        
        Retrieve the text of the line containing the caret.
    %End

    int GetColumn(
        int pos
    ) const;
    %Docstring
        GetColumn(pos) -> int
        
        Retrieve the column number of a position, taking tab width into
        account.
    %End

    int CountCharacters(
        int start,
        int end
    );
    %Docstring
        CountCharacters(start, end) -> int
        
        Count characters between two positions.
    %End

    int GetLineEndPosition(
        int line
    ) const;
    %Docstring
        GetLineEndPosition(line) -> int
        
        Get the position after the last visible characters on a line.
    %End

    void SetCurrentPos(
        int caret
    );
    %Docstring
        SetCurrentPos(caret)
        
        Sets the position of the caret.
    %End

    void SetSelectionStart(
        int anchor
    );
    %Docstring
        SetSelectionStart(anchor)
        
        Sets the position that starts the selection - this becomes the anchor.
    %End

    int GetSelectionStart() const;
    %Docstring
        GetSelectionStart() -> int
        
        Returns the position at the start of the selection.
    %End

    void SetSelectionEnd(
        int caret
    );
    %Docstring
        SetSelectionEnd(caret)
        
        Sets the position that ends the selection - this becomes the caret.
    %End

    int GetSelectionEnd() const;
    %Docstring
        GetSelectionEnd() -> int
        
        Returns the position at the end of the selection.
    %End

    void SetEmptySelection(
        int caret
    );
    %Docstring
        SetEmptySelection(caret)
        
        Set caret to a position, while removing any existing selection.
    %End

    int GetLineCount() const;
    %Docstring
        GetLineCount() -> int
        
        Returns the number of lines in the document.
    %End

    bool GetModify() const;
    %Docstring
        GetModify() -> bool
        
        Is the document different from when it was last saved?
    %End

    wxString GetSelectedText();
    %Docstring
        GetSelectedText() -> String
        
        Retrieve the selected text.
    %End

    void HideSelection(
        bool hide
    );
    %Docstring
        HideSelection(hide)
        
        Draw the selection in normal style or with selection highlighted.
    %End

    wxPoint PointFromPosition(
        int pos
    );
    %Docstring
        PointFromPosition(pos) -> Point
        
        Retrieve the point in the window where a position is displayed.
    %End

    int LineFromPosition(
        int pos
    ) const;
    %Docstring
        LineFromPosition(pos) -> int
        
        Retrieve the line containing a position.
    %End

    int PositionFromLine(
        int line
    ) const;
    %Docstring
        PositionFromLine(line) -> int
        
        Retrieve the position at the start of a line.
    %End

    int GetTextLength() const;
    %Docstring
        GetTextLength() -> int
        
        Retrieve the number of characters in the document.
    %End

    int TextWidth(
        int style,
        const wxString & text
    );
    %Docstring
        TextWidth(style, text) -> int
        
        Measure the pixel width of some text in a particular style.
    %End

    int TextHeight(
        int line
    );
    %Docstring
        TextHeight(line) -> int
        
        Retrieve the height of a particular line of text in pixels.
    %End

    void MoveCaretInsideView();
    %Docstring
        MoveCaretInsideView()
        
        Move the caret inside current view if it's not there already.
    %End

    int LineLength(
        int line
    ) const;
    %Docstring
        LineLength(line) -> int
        
        How many characters are on a line, including end of line characters?
    %End

    int LinesOnScreen() const;
    %Docstring
        LinesOnScreen() -> int
        
        Retrieves the number of lines completely visible.
    %End

    bool SelectionIsRectangle() const;
    %Docstring
        SelectionIsRectangle() -> bool
        
        Is the selection rectangular? The alternative is the more common
        stream selection.
    %End

    void ChooseCaretX();
    %Docstring
        ChooseCaretX()
        
        Set the last x chosen value to be the caret x position.
    %End

    int PositionBefore(
        int pos
    );
    %Docstring
        PositionBefore(pos) -> int
        
        Given a valid document position, return the previous position taking
        code page into account.
    %End

    int PositionAfter(
        int pos
    );
    %Docstring
        PositionAfter(pos) -> int
        
        Given a valid document position, return the next position taking code
        page into account.
    %End

    int PositionRelative(
        int pos,
        int relative
    );
    %Docstring
        PositionRelative(pos, relative) -> int
        
        Given a valid document position, return a position that differs in a
        number of characters.
    %End

    void SetSelectionMode(
        int selectionMode
    );
    %Docstring
        SetSelectionMode(selectionMode)
        
        Set the selection mode to stream (wxSTC_SEL_STREAM) or rectangular
        (wxSTC_SEL_RECTANGLE/wxSTC_SEL_THIN) or by lines (wxSTC_SEL_LINES).
    %End

    int GetSelectionMode() const;
    %Docstring
        GetSelectionMode() -> int
        
        Get the mode of the current selection.
    %End

    int GetLineSelStartPosition(
        int line
    );
    %Docstring
        GetLineSelStartPosition(line) -> int
        
        Retrieve the position of the start of the selection at the given line
        (wxSTC_INVALID_POSITION if no selection on this line).
    %End

    int GetLineSelEndPosition(
        int line
    );
    %Docstring
        GetLineSelEndPosition(line) -> int
        
        Retrieve the position of the end of the selection at the given line
        (wxSTC_INVALID_POSITION if no selection on this line).
    %End

    int FindColumn(
        int line,
        int column
    );
    %Docstring
        FindColumn(line, column) -> int
        
        Find the position of a column on a line taking into account tabs and
        multi-byte characters.
    %End

    int CharPositionFromPoint(
        int x,
        int y
    );
    %Docstring
        CharPositionFromPoint(x, y) -> int
        
        Find the position of a character from a point within the window.
    %End

    int CharPositionFromPointClose(
        int x,
        int y
    );
    %Docstring
        CharPositionFromPointClose(x, y) -> int
        
        Find the position of a character from a point within the window.
    %End

    void SetMouseSelectionRectangularSwitch(
        bool mouseSelectionRectangularSwitch
    );
    %Docstring
        SetMouseSelectionRectangularSwitch(mouseSelectionRectangularSwitch)
        
        Set whether switching to rectangular mode while selecting with the
        mouse is allowed.
    %End

    bool GetMouseSelectionRectangularSwitch() const;
    %Docstring
        GetMouseSelectionRectangularSwitch() -> bool
        
        Whether switching to rectangular mode while selecting with the mouse
        is allowed.
    %End

    void MoveSelectedLinesUp();
    %Docstring
        MoveSelectedLinesUp()
        
        Move the selected lines up one line, shifting the line above after the
        selection.
    %End

    void MoveSelectedLinesDown();
    %Docstring
        MoveSelectedLinesDown()
        
        Move the selected lines down one line, shifting the line below before
        the selection.
    %End

    void SetMultiPaste(
        int multiPaste
    );
    %Docstring
        SetMultiPaste(multiPaste)
        
        Change the effect of pasting when there are multiple selections.
    %End

    int GetMultiPaste() const;
    %Docstring
        GetMultiPaste() -> int
        
        Retrieve the effect of pasting when there are multiple selections.
    %End

    void SetMultipleSelection(
        bool multipleSelection
    );
    %Docstring
        SetMultipleSelection(multipleSelection)
        
        Set whether multiple selections can be made.
    %End

    bool GetMultipleSelection() const;
    %Docstring
        GetMultipleSelection() -> bool
        
        Whether multiple selections can be made.
    %End

    void SetAdditionalSelectionTyping(
        bool additionalSelectionTyping
    );
    %Docstring
        SetAdditionalSelectionTyping(additionalSelectionTyping)
        
        Set whether typing can be performed into multiple selections.
    %End

    bool GetAdditionalSelectionTyping() const;
    %Docstring
        GetAdditionalSelectionTyping() -> bool
        
        Whether typing can be performed into multiple selections.
    %End

    void SetAdditionalCaretsBlink(
        bool additionalCaretsBlink
    );
    %Docstring
        SetAdditionalCaretsBlink(additionalCaretsBlink)
        
        Set whether additional carets will blink.
    %End

    bool GetAdditionalCaretsBlink() const;
    %Docstring
        GetAdditionalCaretsBlink() -> bool
        
        Whether additional carets will blink.
    %End

    void SetAdditionalCaretsVisible(
        bool additionalCaretsVisible
    );
    %Docstring
        SetAdditionalCaretsVisible(additionalCaretsVisible)
        
        Set whether additional carets are visible.
    %End

    bool GetAdditionalCaretsVisible() const;
    %Docstring
        GetAdditionalCaretsVisible() -> bool
        
        Whether additional carets are visible.
    %End

    int GetSelections() const;
    %Docstring
        GetSelections() -> int
        
        How many selections are there?
    %End

    bool GetSelectionEmpty() const;
    %Docstring
        GetSelectionEmpty() -> bool
        
        Is every selected range empty?
    %End

    void ClearSelections();
    %Docstring
        ClearSelections()
        
        Clear selections to a single empty stream selection.
    %End

    int AddSelection(
        int caret,
        int anchor
    );
    %Docstring
        AddSelection(caret, anchor) -> int
        
        Add a selection.
    %End

    void DropSelectionN(
        int selection
    );
    %Docstring
        DropSelectionN(selection)
        
        Drop one selection.
    %End

    void SetMainSelection(
        int selection
    );
    %Docstring
        SetMainSelection(selection)
        
        Set the main selection.
    %End

    int GetMainSelection() const;
    %Docstring
        GetMainSelection() -> int
        
        Which selection is the main selection.
    %End

    void SetSelectionNCaret(
        int selection,
        int caret
    );
    %Docstring
        SetSelectionNCaret(selection, caret)
        
        Set the caret position of the nth selection.
    %End

    int GetSelectionNCaret(
        int selection
    ) const;
    %Docstring
        GetSelectionNCaret(selection) -> int
        
        Return the caret position of the nth selection.
    %End

    void SetSelectionNAnchor(
        int selection,
        int anchor
    );
    %Docstring
        SetSelectionNAnchor(selection, anchor)
        
        Set the anchor position of the nth selection.
    %End

    int GetSelectionNAnchor(
        int selection
    ) const;
    %Docstring
        GetSelectionNAnchor(selection) -> int
        
        Return the anchor position of the nth selection.
    %End

    void SetSelectionNCaretVirtualSpace(
        int selection,
        int space
    );
    %Docstring
        SetSelectionNCaretVirtualSpace(selection, space)
        
        Set the virtual space of the caret of the nth selection.
    %End

    int GetSelectionNCaretVirtualSpace(
        int selection
    ) const;
    %Docstring
        GetSelectionNCaretVirtualSpace(selection) -> int
        
        Return the virtual space of the caret of the nth selection.
    %End

    void SetSelectionNAnchorVirtualSpace(
        int selection,
        int space
    );
    %Docstring
        SetSelectionNAnchorVirtualSpace(selection, space)
        
        Set the virtual space of the anchor of the nth selection.
    %End

    int GetSelectionNAnchorVirtualSpace(
        int selection
    ) const;
    %Docstring
        GetSelectionNAnchorVirtualSpace(selection) -> int
        
        Return the virtual space of the anchor of the nth selection.
    %End

    void SetSelectionNStart(
        int selection,
        int anchor
    );
    %Docstring
        SetSelectionNStart(selection, anchor)
        
        Sets the position that starts the selection - this becomes the anchor.
    %End

    int GetSelectionNStart(
        int selection
    ) const;
    %Docstring
        GetSelectionNStart(selection) -> int
        
        Returns the position at the start of the selection.
    %End

    void SetSelectionNEnd(
        int selection,
        int caret
    );
    %Docstring
        SetSelectionNEnd(selection, caret)
        
        Sets the position that ends the selection - this becomes the
        currentPosition.
    %End

    int GetSelectionNEnd(
        int selection
    ) const;
    %Docstring
        GetSelectionNEnd(selection) -> int
        
        Returns the position at the end of the selection.
    %End

    void SetRectangularSelectionCaret(
        int caret
    );
    %Docstring
        SetRectangularSelectionCaret(caret)
        
        Set the caret position of the rectangular selection.
    %End

    int GetRectangularSelectionCaret() const;
    %Docstring
        GetRectangularSelectionCaret() -> int
        
        Return the caret position of the rectangular selection.
    %End

    void SetRectangularSelectionAnchor(
        int anchor
    );
    %Docstring
        SetRectangularSelectionAnchor(anchor)
        
        Set the anchor position of the rectangular selection.
    %End

    int GetRectangularSelectionAnchor() const;
    %Docstring
        GetRectangularSelectionAnchor() -> int
        
        Return the anchor position of the rectangular selection.
    %End

    void SetRectangularSelectionCaretVirtualSpace(
        int space
    );
    %Docstring
        SetRectangularSelectionCaretVirtualSpace(space)
        
        Set the virtual space of the caret of the rectangular selection.
    %End

    int GetRectangularSelectionCaretVirtualSpace() const;
    %Docstring
        GetRectangularSelectionCaretVirtualSpace() -> int
        
        Return the virtual space of the caret of the rectangular selection.
    %End

    void SetRectangularSelectionAnchorVirtualSpace(
        int space
    );
    %Docstring
        SetRectangularSelectionAnchorVirtualSpace(space)
        
        Set the virtual space of the anchor of the rectangular selection.
    %End

    int GetRectangularSelectionAnchorVirtualSpace() const;
    %Docstring
        GetRectangularSelectionAnchorVirtualSpace() -> int
        
        Return the virtual space of the anchor of the rectangular selection.
    %End

    void SetVirtualSpaceOptions(
        int virtualSpaceOptions
    );
    %Docstring
        SetVirtualSpaceOptions(virtualSpaceOptions)
        
        Set options for virtual space behaviour.
    %End

    int GetVirtualSpaceOptions() const;
    %Docstring
        GetVirtualSpaceOptions() -> int
        
        Return options for virtual space behaviour.
    %End

    void SetRectangularSelectionModifier(
        int modifier
    );
    %Docstring
        SetRectangularSelectionModifier(modifier)
        
        On GTK+, allow selecting the modifier key to use for mouse-based
        rectangular selection.
    %End

    int GetRectangularSelectionModifier() const;
    %Docstring
        GetRectangularSelectionModifier() -> int
        
        Get the modifier key used for rectangular selection.
    %End

    void SetAdditionalSelForeground(
        const wxColour & fore
    );
    %Docstring
        SetAdditionalSelForeground(fore)
        
        Set the foreground colour of additional selections.
    %End

    void SetAdditionalSelBackground(
        const wxColour & back
    );
    %Docstring
        SetAdditionalSelBackground(back)
        
        Set the background colour of additional selections.
    %End

    void SetAdditionalSelAlpha(
        int alpha
    );
    %Docstring
        SetAdditionalSelAlpha(alpha)
        
        Set the alpha of the selection.
    %End

    int GetAdditionalSelAlpha() const;
    %Docstring
        GetAdditionalSelAlpha() -> int
        
        Get the alpha of the selection.
    %End

    void SetAdditionalCaretForeground(
        const wxColour & fore
    );
    %Docstring
        SetAdditionalCaretForeground(fore)
        
        Set the foreground colour of additional carets.
    %End

    wxColour GetAdditionalCaretForeground() const;
    %Docstring
        GetAdditionalCaretForeground() -> Colour
        
        Get the foreground colour of additional carets.
    %End

    void RotateSelection();
    %Docstring
        RotateSelection()
        
        Set the main selection to the next selection.
    %End

    void SwapMainAnchorCaret();
    %Docstring
        SwapMainAnchorCaret()
        
        Swap that caret and anchor of the main selection.
    %End

    void MultipleSelectAddNext();
    %Docstring
        MultipleSelectAddNext()
        
        Add the next occurrence of the main selection to the set of selections
        as main.
    %End

    void MultipleSelectAddEach();
    %Docstring
        MultipleSelectAddEach()
        
        Add each occurrence of the main selection in the target to the set of
        selections.
    %End

    void SetUseHorizontalScrollBar(
        bool visible
    );
    %Docstring
        SetUseHorizontalScrollBar(visible)
        
        Show or hide the horizontal scroll bar.
    %End

    bool GetUseHorizontalScrollBar() const;
    %Docstring
        GetUseHorizontalScrollBar() -> bool
        
        Is the horizontal scroll bar visible?
    %End

    int GetFirstVisibleLine() const;
    %Docstring
        GetFirstVisibleLine() -> int
        
        Retrieve the display line at the top of the display.
    %End

    void LineScroll(
        int columns,
        int lines
    );
    %Docstring
        LineScroll(columns, lines)
        
        Scroll horizontally and vertically.
    %End

    void EnsureCaretVisible();
    %Docstring
        EnsureCaretVisible()
        
        Ensure the caret is visible.
    %End

    void ScrollRange(
        int secondary,
        int primary
    );
    %Docstring
        ScrollRange(secondary, primary)
        
        Scroll the argument positions and the range between them into view
        giving priority to the primary position then the secondary position.
    %End

    void SetScrollWidth(
        int pixelWidth
    );
    %Docstring
        SetScrollWidth(pixelWidth)
        
        Sets the document width assumed for scrolling.
    %End

    int GetScrollWidth() const;
    %Docstring
        GetScrollWidth() -> int
        
        Retrieve the document width assumed for scrolling.
    %End

    void SetScrollWidthTracking(
        bool tracking
    );
    %Docstring
        SetScrollWidthTracking(tracking)
        
        Sets whether the maximum width line displayed is used to set scroll
        width.
    %End

    bool GetScrollWidthTracking() const;
    %Docstring
        GetScrollWidthTracking() -> bool
        
        Retrieve whether the scroll width tracks wide lines.
    %End

    void SetEndAtLastLine(
        bool endAtLastLine
    );
    %Docstring
        SetEndAtLastLine(endAtLastLine)
        
        Sets the scroll range so that maximum scroll position has the last
        line at the bottom of the view (default).
    %End

    bool GetEndAtLastLine() const;
    %Docstring
        GetEndAtLastLine() -> bool
        
        Retrieve whether the maximum scroll position has the last line at the
        bottom of the view.
    %End

    void SetUseVerticalScrollBar(
        bool visible
    );
    %Docstring
        SetUseVerticalScrollBar(visible)
        
        Show or hide the vertical scroll bar.
    %End

    bool GetUseVerticalScrollBar() const;
    %Docstring
        GetUseVerticalScrollBar() -> bool
        
        Is the vertical scroll bar visible?
    %End

    void SetFirstVisibleLine(
        int displayLine
    );
    %Docstring
        SetFirstVisibleLine(displayLine)
        
        Scroll so that a display line is at the top of the display.
    %End

    void SetVisiblePolicy(
        int visiblePolicy,
        int visibleSlop
    );
    %Docstring
        SetVisiblePolicy(visiblePolicy, visibleSlop)
        
        Set the way the display area is determined when a particular line is
        to be moved to by Find, FindNext, GotoLine, etc.
    %End

    void SetXOffset(
        int xOffset
    );
    %Docstring
        SetXOffset(xOffset)
        
        Set the xOffset (ie, horizontal scroll position).
    %End

    int GetXOffset() const;
    %Docstring
        GetXOffset() -> int
        
        Get the xOffset (ie, horizontal scroll position).
    %End

    void SetXCaretPolicy(
        int caretPolicy,
        int caretSlop
    );
    %Docstring
        SetXCaretPolicy(caretPolicy, caretSlop)
        
        Set the way the caret is kept visible when going sideways.
    %End

    void SetYCaretPolicy(
        int caretPolicy,
        int caretSlop
    );
    %Docstring
        SetYCaretPolicy(caretPolicy, caretSlop)
        
        Set the way the line the caret is on is kept visible.
    %End

    int GetViewWhiteSpace() const;
    %Docstring
        GetViewWhiteSpace() -> int
        
        Are white space characters currently visible? Returns one of
        wxSTC_WS_* constants.
    %End

    void SetViewWhiteSpace(
        int viewWS
    );
    %Docstring
        SetViewWhiteSpace(viewWS)
        
        Make white space characters invisible, always visible or visible
        outside indentation.
    %End

    int GetTabDrawMode() const;
    %Docstring
        GetTabDrawMode() -> int
        
        Retrieve the current tab draw mode.
    %End

    void SetTabDrawMode(
        int tabDrawMode
    );
    %Docstring
        SetTabDrawMode(tabDrawMode)
        
        Set how tabs are drawn when visible.
    %End

    void SetWhitespaceForeground(
        bool useSetting,
        const wxColour & fore
    );
    %Docstring
        SetWhitespaceForeground(useSetting, fore)
        
        Set the foreground colour of all whitespace and whether to use this
        setting.
    %End

    void SetWhitespaceBackground(
        bool useSetting,
        const wxColour & back
    );
    %Docstring
        SetWhitespaceBackground(useSetting, back)
        
        Set the background colour of all whitespace and whether to use this
        setting.
    %End

    void SetWhitespaceSize(
        int size
    );
    %Docstring
        SetWhitespaceSize(size)
        
        Set the size of the dots used to mark space characters.
    %End

    int GetWhitespaceSize() const;
    %Docstring
        GetWhitespaceSize() -> int
        
        Get the size of the dots used to mark space characters.
    %End

    void SetExtraAscent(
        int extraAscent
    );
    %Docstring
        SetExtraAscent(extraAscent)
        
        Set extra ascent for each line.
    %End

    int GetExtraAscent() const;
    %Docstring
        GetExtraAscent() -> int
        
        Get extra ascent for each line.
    %End

    void SetExtraDescent(
        int extraDescent
    );
    %Docstring
        SetExtraDescent(extraDescent)
        
        Set extra descent for each line.
    %End

    int GetExtraDescent() const;
    %Docstring
        GetExtraDescent() -> int
        
        Get extra descent for each line.
    %End

    void SetSTCCursor(
        int cursorType
    );
    %Docstring
        SetSTCCursor(cursorType)
        
        Sets the cursor to one of the wxSTC_CURSOR* values.
    %End

    int GetSTCCursor() const;
    %Docstring
        GetSTCCursor() -> int
        
        Get cursor type.
    %End

    void SetMouseDownCaptures(
        bool captures
    );
    %Docstring
        SetMouseDownCaptures(captures)
        
        Set whether the mouse is captured when its button is pressed.
    %End

    bool GetMouseDownCaptures() const;
    %Docstring
        GetMouseDownCaptures() -> bool
        
        Get whether mouse gets captured.
    %End

    void SetMouseWheelCaptures(
        bool captures
    );
    %Docstring
        SetMouseWheelCaptures(captures)
        
        Set whether the mouse wheel can be active outside the window.
    %End

    bool GetMouseWheelCaptures() const;
    %Docstring
        GetMouseWheelCaptures() -> bool
        
        Get whether mouse wheel can be active outside the window.
    %End

    void ConvertEOLs(
        int eolMode
    );
    %Docstring
        ConvertEOLs(eolMode)
        
        Convert all line endings in the document to one mode.
    %End

    int GetEOLMode() const;
    %Docstring
        GetEOLMode() -> int
        
        Retrieve the current end of line mode - one of wxSTC_EOL_CRLF,
        wxSTC_EOL_CR, or wxSTC_EOL_LF.
    %End

    void SetEOLMode(
        int eolMode
    );
    %Docstring
        SetEOLMode(eolMode)
        
        Set the current end of line mode.
    %End

    bool GetViewEOL() const;
    %Docstring
        GetViewEOL() -> bool
        
        Are the end of line characters visible?
    %End

    void SetViewEOL(
        bool visible
    );
    %Docstring
        SetViewEOL(visible)
        
        Make the end of line characters visible or invisible.
    %End

    void SetLineEndTypesAllowed(
        int lineEndBitSet
    );
    %Docstring
        SetLineEndTypesAllowed(lineEndBitSet)
        
        Set the line end types that the application wants to use.
    %End

    int GetLineEndTypesAllowed() const;
    %Docstring
        GetLineEndTypesAllowed() -> int
        
        Get the line end types currently allowed.
    %End

    int GetLineEndTypesActive() const;
    %Docstring
        GetLineEndTypesActive() -> int
        
        Get the line end types currently recognised.
    %End

    int GetLineEndTypesSupported() const;
    %Docstring
        GetLineEndTypesSupported() -> int
        
        Bit set of LineEndType enumertion for which line ends beyond the
        standard LF, CR, and CRLF are supported by the lexer.
    %End

    void SetWordChars(
        const wxString & characters
    );
    %Docstring
        SetWordChars(characters)
        
        Set the set of characters making up words for when moving or selecting
        by word.
    %End

    wxString GetWordChars() const;
    %Docstring
        GetWordChars() -> String
        
        Get the set of characters making up words for when moving or selecting
        by word.
    %End

    int WordStartPosition(
        int pos,
        bool onlyWordCharacters
    );
    %Docstring
        WordStartPosition(pos, onlyWordCharacters) -> int
        
        Get position of start of word.
    %End

    int WordEndPosition(
        int pos,
        bool onlyWordCharacters
    );
    %Docstring
        WordEndPosition(pos, onlyWordCharacters) -> int
        
        Get position of end of word.
    %End

    bool IsRangeWord(
        int start,
        int end
    );
    %Docstring
        IsRangeWord(start, end) -> bool
        
        Is the range start..end considered a word?
    %End

    void SetWhitespaceChars(
        const wxString & characters
    );
    %Docstring
        SetWhitespaceChars(characters)
        
        Set the set of characters making up whitespace for when moving or
        selecting by word.
    %End

    wxString GetWhitespaceChars() const;
    %Docstring
        GetWhitespaceChars() -> String
        
        Get the set of characters making up whitespace for when moving or
        selecting by word.
    %End

    void SetPunctuationChars(
        const wxString & characters
    );
    %Docstring
        SetPunctuationChars(characters)
        
        Set the set of characters making up punctuation characters Should be
        called after SetWordChars.
    %End

    wxString GetPunctuationChars() const;
    %Docstring
        GetPunctuationChars() -> String
        
        Get the set of characters making up punctuation characters.
    %End

    void SetCharsDefault();
    %Docstring
        SetCharsDefault()
        
        Reset the set of characters for whitespace and word characters to the
        defaults.
    %End

    int GetEndStyled() const;
    %Docstring
        GetEndStyled() -> int
        
        Retrieve the position of the last correctly styled character.
    %End

    void StartStyling(
        int start
    );
    %Docstring
        StartStyling(start)
        
        Set the current styling position to start.
    %End

    void SetStyling(
        int length,
        int style
    );
    %Docstring
        SetStyling(length, style)
        
        Change style from current styling position for length characters to a
        style and move the current styling position to after this newly styled
        segment.
    %End

    void SetStyleBytes(
        int length,
        char * styleBytes
    );
    %Docstring
        SetStyleBytes(length, styleBytes)
        
        Set the styles for a segment of the document.
    %End

    void SetLineState(
        int line,
        int state
    );
    %Docstring
        SetLineState(line, state)
        
        Used to hold extra styling information for each line.
    %End

    int GetLineState(
        int line
    ) const;
    %Docstring
        GetLineState(line) -> int
        
        Retrieve the extra styling information for a line.
    %End

    int GetMaxLineState() const;
    %Docstring
        GetMaxLineState() -> int
        
        Retrieve the last line number that has line state.
    %End

    void SetIdleStyling(
        int idleStyling
    );
    %Docstring
        SetIdleStyling(idleStyling)
        
        Sets limits to idle styling.
    %End

    int GetIdleStyling() const;
    %Docstring
        GetIdleStyling() -> int
        
        Retrieve the limits to idle styling.
    %End

    void StyleClearAll();
    %Docstring
        StyleClearAll()
        
        Clear all the styles and make equivalent to the global default style.
    %End

    void StyleSetForeground(
        int style,
        const wxColour & fore
    );
    %Docstring
        StyleSetForeground(style, fore)
        
        Set the foreground colour of a style.
    %End

    void StyleSetBackground(
        int style,
        const wxColour & back
    );
    %Docstring
        StyleSetBackground(style, back)
        
        Set the background colour of a style.
    %End

    void StyleSetBold(
        int style,
        bool bold
    );
    %Docstring
        StyleSetBold(style, bold)
        
        Set a style to be bold or not.
    %End

    void StyleSetItalic(
        int style,
        bool italic
    );
    %Docstring
        StyleSetItalic(style, italic)
        
        Set a style to be italic or not.
    %End

    void StyleSetSize(
        int style,
        int sizePoints
    );
    %Docstring
        StyleSetSize(style, sizePoints)
        
        Set the size of characters of a style.
    %End

    void StyleSetFaceName(
        int style,
        const wxString & fontName
    );
    %Docstring
        StyleSetFaceName(style, fontName)
        
        Set the font of a style.
    %End

    void StyleSetEOLFilled(
        int style,
        bool eolFilled
    );
    %Docstring
        StyleSetEOLFilled(style, eolFilled)
        
        Set a style to have its end of line filled or not.
    %End

    void StyleResetDefault();
    %Docstring
        StyleResetDefault()
        
        Reset the default style to its state at startup.
    %End

    void StyleSetUnderline(
        int style,
        bool underline
    );
    %Docstring
        StyleSetUnderline(style, underline)
        
        Set a style to be underlined or not.
    %End

    wxColour StyleGetForeground(
        int style
    ) const;
    %Docstring
        StyleGetForeground(style) -> Colour
        
        Get the foreground colour of a style.
    %End

    wxColour StyleGetBackground(
        int style
    ) const;
    %Docstring
        StyleGetBackground(style) -> Colour
        
        Get the background colour of a style.
    %End

    bool StyleGetBold(
        int style
    ) const;
    %Docstring
        StyleGetBold(style) -> bool
        
        Get is a style bold or not.
    %End

    bool StyleGetItalic(
        int style
    ) const;
    %Docstring
        StyleGetItalic(style) -> bool
        
        Get is a style italic or not.
    %End

    int StyleGetSize(
        int style
    ) const;
    %Docstring
        StyleGetSize(style) -> int
        
        Get the size of characters of a style.
    %End

    wxString StyleGetFaceName(
        int style
    );
    %Docstring
        StyleGetFaceName(style) -> String
        
        Get the font facename of a style.
    %End

    bool StyleGetEOLFilled(
        int style
    ) const;
    %Docstring
        StyleGetEOLFilled(style) -> bool
        
        Get is a style to have its end of line filled or not.
    %End

    bool StyleGetUnderline(
        int style
    ) const;
    %Docstring
        StyleGetUnderline(style) -> bool
        
        Get is a style underlined or not.
    %End

    int StyleGetCase(
        int style
    ) const;
    %Docstring
        StyleGetCase(style) -> int
        
        Get is a style mixed case, or to force upper or lower case.
    %End

    int StyleGetCharacterSet(
        int style
    ) const;
    %Docstring
        StyleGetCharacterSet(style) -> int
        
        Get the character get of the font in a style.
    %End

    bool StyleGetVisible(
        int style
    ) const;
    %Docstring
        StyleGetVisible(style) -> bool
        
        Get is a style visible or not.
    %End

    bool StyleGetChangeable(
        int style
    ) const;
    %Docstring
        StyleGetChangeable(style) -> bool
        
        Get is a style changeable or not (read only).
    %End

    bool StyleGetHotSpot(
        int style
    ) const;
    %Docstring
        StyleGetHotSpot(style) -> bool
        
        Get is a style a hotspot or not.
    %End

    void StyleSetCase(
        int style,
        int caseVisible
    );
    %Docstring
        StyleSetCase(style, caseVisible)
        
        Set a style to be mixed case, or to force upper or lower case.
    %End

    void StyleSetSizeFractional(
        int style,
        int sizeHundredthPoints
    );
    %Docstring
        StyleSetSizeFractional(style, sizeHundredthPoints)
        
        Set the size of characters of a style.
    %End

    int StyleGetSizeFractional(
        int style
    ) const;
    %Docstring
        StyleGetSizeFractional(style) -> int
        
        Get the size of characters of a style in points multiplied by 100.
    %End

    void StyleSetWeight(
        int style,
        int weight
    );
    %Docstring
        StyleSetWeight(style, weight)
        
        Set the weight of characters of a style.
    %End

    int StyleGetWeight(
        int style
    ) const;
    %Docstring
        StyleGetWeight(style) -> int
        
        Get the weight of characters of a style.
    %End

    void StyleSetCharacterSet(
        int style,
        int characterSet
    );
    %Docstring
        StyleSetCharacterSet(style, characterSet)
        
        Set the character set of the font in a style.
    %End

    void StyleSetHotSpot(
        int style,
        bool hotspot
    );
    %Docstring
        StyleSetHotSpot(style, hotspot)
        
        Set a style to be a hotspot or not.
    %End

    void StyleSetVisible(
        int style,
        bool visible
    );
    %Docstring
        StyleSetVisible(style, visible)
        
        Set a style to be visible or not.
    %End

    void StyleSetChangeable(
        int style,
        bool changeable
    );
    %Docstring
        StyleSetChangeable(style, changeable)
        
        Set a style to be changeable or not (read only).
    %End

    void SetSelForeground(
        bool useSetting,
        const wxColour & fore
    );
    %Docstring
        SetSelForeground(useSetting, fore)
        
        Set the foreground colour of the main and additional selections and
        whether to use this setting.
    %End

    void SetSelBackground(
        bool useSetting,
        const wxColour & back
    );
    %Docstring
        SetSelBackground(useSetting, back)
        
        Set the background colour of the main and additional selections and
        whether to use this setting.
    %End

    int GetSelAlpha() const;
    %Docstring
        GetSelAlpha() -> int
        
        Get the alpha of the selection.
    %End

    void SetSelAlpha(
        int alpha
    );
    %Docstring
        SetSelAlpha(alpha)
        
        Set the alpha of the selection.
    %End

    bool GetSelEOLFilled() const;
    %Docstring
        GetSelEOLFilled() -> bool
        
        Is the selection end of line filled?
    %End

    void SetSelEOLFilled(
        bool filled
    );
    %Docstring
        SetSelEOLFilled(filled)
        
        Set the selection to have its end of line filled or not.
    %End

    void SetCaretForeground(
        const wxColour & fore
    );
    %Docstring
        SetCaretForeground(fore)
        
        Set the foreground colour of the caret.
    %End

    int GetCaretPeriod() const;
    %Docstring
        GetCaretPeriod() -> int
        
        Get the time in milliseconds that the caret is on and off.
    %End

    void SetCaretPeriod(
        int periodMilliseconds
    );
    %Docstring
        SetCaretPeriod(periodMilliseconds)
        
        Get the time in milliseconds that the caret is on and off.
    %End

    bool GetCaretLineVisible() const;
    %Docstring
        GetCaretLineVisible() -> bool
        
        Is the background of the line containing the caret in a different
        colour?
    %End

    void SetCaretLineVisible(
        bool show
    );
    %Docstring
        SetCaretLineVisible(show)
        
        Display the background of the line containing the caret in a different
        colour.
    %End

    wxColour GetCaretLineBackground() const;
    %Docstring
        GetCaretLineBackground() -> Colour
        
        Get the colour of the background of the line containing the caret.
    %End

    void SetCaretLineBackground(
        const wxColour & back
    );
    %Docstring
        SetCaretLineBackground(back)
        
        Set the colour of the background of the line containing the caret.
    %End

    wxColour GetCaretForeground() const;
    %Docstring
        GetCaretForeground() -> Colour
        
        Get the foreground colour of the caret.
    %End

    void SetCaretWidth(
        int pixelWidth
    );
    %Docstring
        SetCaretWidth(pixelWidth)
        
        Set the width of the insert mode caret.
    %End

    int GetCaretWidth() const;
    %Docstring
        GetCaretWidth() -> int
        
        Returns the width of the insert mode caret.
    %End

    void SetHotspotActiveForeground(
        bool useSetting,
        const wxColour & fore
    );
    %Docstring
        SetHotspotActiveForeground(useSetting, fore)
        
        Set a fore colour for active hotspots.
    %End

    wxColour GetHotspotActiveForeground() const;
    %Docstring
        GetHotspotActiveForeground() -> Colour
        
        Get the fore colour for active hotspots.
    %End

    void SetHotspotActiveBackground(
        bool useSetting,
        const wxColour & back
    );
    %Docstring
        SetHotspotActiveBackground(useSetting, back)
        
        Set a back colour for active hotspots.
    %End

    wxColour GetHotspotActiveBackground() const;
    %Docstring
        GetHotspotActiveBackground() -> Colour
        
        Get the back colour for active hotspots.
    %End

    void SetHotspotActiveUnderline(
        bool underline
    );
    %Docstring
        SetHotspotActiveUnderline(underline)
        
        Enable / Disable underlining active hotspots.
    %End

    bool GetHotspotActiveUnderline() const;
    %Docstring
        GetHotspotActiveUnderline() -> bool
        
        Get whether underlining for active hotspots.
    %End

    void SetHotspotSingleLine(
        bool singleLine
    );
    %Docstring
        SetHotspotSingleLine(singleLine)
        
        Limit hotspots to single line so hotspots on two lines don't merge.
    %End

    bool GetHotspotSingleLine() const;
    %Docstring
        GetHotspotSingleLine() -> bool
        
        Get the HotspotSingleLine property.
    %End

    int GetCaretSticky() const;
    %Docstring
        GetCaretSticky() -> int
        
        Can the caret preferred x position only be changed by explicit
        movement commands?
    %End

    void SetCaretSticky(
        int useCaretStickyBehaviour
    );
    %Docstring
        SetCaretSticky(useCaretStickyBehaviour)
        
        Stop the caret preferred x position changing when the user types.
    %End

    void ToggleCaretSticky();
    %Docstring
        ToggleCaretSticky()
        
        Switch between sticky and non-sticky: meant to be bound to a key.
    %End

    void SetCaretLineBackAlpha(
        int alpha
    );
    %Docstring
        SetCaretLineBackAlpha(alpha)
        
        Set background alpha of the caret line.
    %End

    int GetCaretLineBackAlpha() const;
    %Docstring
        GetCaretLineBackAlpha() -> int
        
        Get the background alpha of the caret line.
    %End

    void SetCaretStyle(
        int caretStyle
    );
    %Docstring
        SetCaretStyle(caretStyle)
        
        Set the style of the caret to be drawn.
    %End

    int GetCaretStyle() const;
    %Docstring
        GetCaretStyle() -> int
        
        Returns the current style of the caret.
    %End

    bool GetCaretLineVisibleAlways() const;
    %Docstring
        GetCaretLineVisibleAlways() -> bool
        
        Is the caret line always visible?
    %End

    void SetCaretLineVisibleAlways(
        bool alwaysVisible
    );
    %Docstring
        SetCaretLineVisibleAlways(alwaysVisible)
        
        Sets the caret line to always visible.
    %End

    void SetControlCharSymbol(
        int symbol
    );
    %Docstring
        SetControlCharSymbol(symbol)
        
        Change the way control characters are displayed: If symbol is < 32,
        keep the drawn way, else, use the given character.
    %End

    int GetControlCharSymbol() const;
    %Docstring
        GetControlCharSymbol() -> int
        
        Get the way control characters are displayed.
    %End

    void SetRepresentation(
        const wxString & encodedCharacter,
        const wxString & representation
    );
    %Docstring
        SetRepresentation(encodedCharacter, representation)
        
        Set the way a character is drawn.
    %End

    wxString GetRepresentation(
        const wxString & encodedCharacter
    ) const;
    %Docstring
        GetRepresentation(encodedCharacter) -> String
        
        Set the way a character is drawn.
    %End

    void ClearRepresentation(
        const wxString & encodedCharacter
    );
    %Docstring
        ClearRepresentation(encodedCharacter)
        
        Remove a character representation.
    %End

    void SetMarginType(
        int margin,
        int marginType
    );
    %Docstring
        SetMarginType(margin, marginType)
        
        Set a margin to be either numeric or symbolic.
    %End

    int GetMarginType(
        int margin
    ) const;
    %Docstring
        GetMarginType(margin) -> int
        
        Retrieve the type of a margin.
    %End

    void SetMarginWidth(
        int margin,
        int pixelWidth
    );
    %Docstring
        SetMarginWidth(margin, pixelWidth)
        
        Set the width of a margin to a width expressed in pixels.
    %End

    int GetMarginWidth(
        int margin
    ) const;
    %Docstring
        GetMarginWidth(margin) -> int
        
        Retrieve the width of a margin in pixels.
    %End

    void SetMarginMask(
        int margin,
        int mask
    );
    %Docstring
        SetMarginMask(margin, mask)
        
        Set a mask that determines which markers are displayed in a margin.
    %End

    int GetMarginMask(
        int margin
    ) const;
    %Docstring
        GetMarginMask(margin) -> int
        
        Retrieve the marker mask of a margin.
    %End

    void SetMarginSensitive(
        int margin,
        bool sensitive
    );
    %Docstring
        SetMarginSensitive(margin, sensitive)
        
        Make a margin sensitive or insensitive to mouse clicks.
    %End

    bool GetMarginSensitive(
        int margin
    ) const;
    %Docstring
        GetMarginSensitive(margin) -> bool
        
        Retrieve the mouse click sensitivity of a margin.
    %End

    void SetMarginCursor(
        int margin,
        int cursor
    );
    %Docstring
        SetMarginCursor(margin, cursor)
        
        Set the cursor shown when the mouse is inside a margin.
    %End

    int GetMarginCursor(
        int margin
    ) const;
    %Docstring
        GetMarginCursor(margin) -> int
        
        Retrieve the cursor shown in a margin.
    %End

    void SetMarginBackground(
        int margin,
        const wxColour & back
    );
    %Docstring
        SetMarginBackground(margin, back)
        
        Set the background colour of a margin.
    %End

    wxColour GetMarginBackground(
        int margin
    ) const;
    %Docstring
        GetMarginBackground(margin) -> Colour
        
        Retrieve the background colour of a margin.
    %End

    void SetMarginCount(
        int margins
    );
    %Docstring
        SetMarginCount(margins)
        
        Allocate a non-standard number of margins.
    %End

    int GetMarginCount() const;
    %Docstring
        GetMarginCount() -> int
        
        How many margins are there?.
    %End

    void SetMarginLeft(
        int pixelWidth
    );
    %Docstring
        SetMarginLeft(pixelWidth)
        
        Sets the size in pixels of the left margin.
    %End

    int GetMarginLeft() const;
    %Docstring
        GetMarginLeft() -> int
        
        Returns the size in pixels of the left margin.
    %End

    void SetMarginRight(
        int pixelWidth
    );
    %Docstring
        SetMarginRight(pixelWidth)
        
        Sets the size in pixels of the right margin.
    %End

    int GetMarginRight() const;
    %Docstring
        GetMarginRight() -> int
        
        Returns the size in pixels of the right margin.
    %End

    void SetFoldMarginColour(
        bool useSetting,
        const wxColour & back
    );
    %Docstring
        SetFoldMarginColour(useSetting, back)
        
        Set one of the colours used as a chequerboard pattern in the fold
        margin.
    %End

    void SetFoldMarginHiColour(
        bool useSetting,
        const wxColour & fore
    );
    %Docstring
        SetFoldMarginHiColour(useSetting, fore)
        
        Set the other colour used as a chequerboard pattern in the fold
        margin.
    %End

    void MarginSetText(
        int line,
        const wxString & text
    );
    %Docstring
        MarginSetText(line, text)
        
        Set the text in the text margin for a line.
    %End

    wxString MarginGetText(
        int line
    ) const;
    %Docstring
        MarginGetText(line) -> String
        
        Get the text in the text margin for a line.
    %End

    void MarginSetStyle(
        int line,
        int style
    );
    %Docstring
        MarginSetStyle(line, style)
        
        Set the style number for the text margin for a line.
    %End

    int MarginGetStyle(
        int line
    ) const;
    %Docstring
        MarginGetStyle(line) -> int
        
        Get the style number for the text margin for a line.
    %End

    void MarginSetStyles(
        int line,
        const wxString & styles
    );
    %Docstring
        MarginSetStyles(line, styles)
        
        Set the style in the text margin for a line.
    %End

    wxString MarginGetStyles(
        int line
    ) const;
    %Docstring
        MarginGetStyles(line) -> String
        
        Get the styles in the text margin for a line.
    %End

    void MarginTextClearAll();
    %Docstring
        MarginTextClearAll()
        
        Clear the margin text on all lines.
    %End

    void MarginSetStyleOffset(
        int style
    );
    %Docstring
        MarginSetStyleOffset(style)
        
        Get the start of the range of style numbers used for margin text.
    %End

    int MarginGetStyleOffset() const;
    %Docstring
        MarginGetStyleOffset() -> int
        
        Get the start of the range of style numbers used for margin text.
    %End

    void SetMarginOptions(
        int marginOptions
    );
    %Docstring
        SetMarginOptions(marginOptions)
        
        Set the margin options.
    %End

    int GetMarginOptions() const;
    %Docstring
        GetMarginOptions() -> int
        
        Get the margin options.
    %End

    void AnnotationSetText(
        int line,
        const wxString & text
    );
    %Docstring
        AnnotationSetText(line, text)
        
        Set the annotation text for a line.
    %End

    wxString AnnotationGetText(
        int line
    ) const;
    %Docstring
        AnnotationGetText(line) -> String
        
        Get the annotation text for a line.
    %End

    void AnnotationSetStyle(
        int line,
        int style
    );
    %Docstring
        AnnotationSetStyle(line, style)
        
        Set the style number for the annotations for a line.
    %End

    int AnnotationGetStyle(
        int line
    ) const;
    %Docstring
        AnnotationGetStyle(line) -> int
        
        Get the style number for the annotations for a line.
    %End

    void AnnotationSetStyles(
        int line,
        const wxString & styles
    );
    %Docstring
        AnnotationSetStyles(line, styles)
        
        Set the annotation styles for a line.
    %End

    wxString AnnotationGetStyles(
        int line
    ) const;
    %Docstring
        AnnotationGetStyles(line) -> String
        
        Get the annotation styles for a line.
    %End

    int AnnotationGetLines(
        int line
    ) const;
    %Docstring
        AnnotationGetLines(line) -> int
        
        Get the number of annotation lines for a line.
    %End

    void AnnotationClearAll();
    %Docstring
        AnnotationClearAll()
        
        Clear the annotations from all lines.
    %End

    void AnnotationSetVisible(
        int visible
    );
    %Docstring
        AnnotationSetVisible(visible)
        
        Set the visibility for the annotations for a view.
    %End

    int AnnotationGetVisible() const;
    %Docstring
        AnnotationGetVisible() -> int
        
        Get the visibility for the annotations for a view.
    %End

    void AnnotationSetStyleOffset(
        int style
    );
    %Docstring
        AnnotationSetStyleOffset(style)
        
        Get the start of the range of style numbers used for annotations.
    %End

    int AnnotationGetStyleOffset() const;
    %Docstring
        AnnotationGetStyleOffset() -> int
        
        Get the start of the range of style numbers used for annotations.
    %End

    bool GetBufferedDraw() const;
    %Docstring
        GetBufferedDraw() -> bool
        
        Is drawing done first into a buffer or direct to the screen?
    %End

    void SetBufferedDraw(
        bool buffered
    );
    %Docstring
        SetBufferedDraw(buffered)
        
        If drawing is buffered then each line of text is drawn into a bitmap
        buffer before drawing it to the screen to avoid flicker.
    %End

    void SetCodePage(
        int codePage
    );
    %Docstring
        SetCodePage(codePage)
        
        Set the code page used to interpret the bytes of the document as
        characters.
    %End

    int GetIMEInteraction() const;
    %Docstring
        GetIMEInteraction() -> int
        
        Is the IME displayed in a window or inline?
    %End

    void SetIMEInteraction(
        int imeInteraction
    );
    %Docstring
        SetIMEInteraction(imeInteraction)
        
        Choose to display the IME in a winow or inline.
    %End

    int GetCodePage() const;
    %Docstring
        GetCodePage() -> int
        
        Get the code page used to interpret the bytes of the document as
        characters.
    %End

    void SetLayoutCache(
        int cacheMode
    );
    %Docstring
        SetLayoutCache(cacheMode)
        
        Sets the degree of caching of layout information.
    %End

    bool GetTwoPhaseDraw() const;
    %Docstring
        GetTwoPhaseDraw() -> bool
        
        Is drawing done in two phases with backgrounds drawn before
        foregrounds?
    %End

    void SetTwoPhaseDraw(
        bool twoPhase
    );
    %Docstring
        SetTwoPhaseDraw(twoPhase)
        
        In twoPhaseDraw mode, drawing is performed in two phases, first the
        background and then the foreground.
    %End

    int GetPhasesDraw() const;
    %Docstring
        GetPhasesDraw() -> int
        
        How many phases is drawing done in?
    %End

    void SetPhasesDraw(
        int phases
    );
    %Docstring
        SetPhasesDraw(phases)
        
        In one phase draw, text is drawn in a series of rectangular blocks
        with no overlap.
    %End

    void SetFontQuality(
        int fontQuality
    );
    %Docstring
        SetFontQuality(fontQuality)
        
        Choose the quality level for text.
    %End

    int GetFontQuality() const;
    %Docstring
        GetFontQuality() -> int
        
        Retrieve the quality level for text.
    %End

    void SetSTCFocus(
        bool focus
    );
    %Docstring
        SetSTCFocus(focus)
        
        Change internal focus flag.
    %End

    bool GetSTCFocus() const;
    %Docstring
        GetSTCFocus() -> bool
        
        Get internal focus flag.
    %End

    void SetTechnology(
        int technology
    );
    %Docstring
        SetTechnology(technology)
        
        Set the technology used.
    %End

    int GetTechnology() const;
    %Docstring
        GetTechnology() -> int
        
        Get the tech.
    %End

    void BraceHighlight(
        int posA,
        int posB
    );
    %Docstring
        BraceHighlight(posA, posB)
        
        Highlight the characters at two positions.
    %End

    void BraceHighlightIndicator(
        bool useSetting,
        int indicator
    );
    %Docstring
        BraceHighlightIndicator(useSetting, indicator)
        
        Use specified indicator to highlight matching braces instead of
        changing their style.
    %End

    void BraceBadLight(
        int pos
    );
    %Docstring
        BraceBadLight(pos)
        
        Highlight the character at a position indicating there is no matching
        brace.
    %End

    void BraceBadLightIndicator(
        bool useSetting,
        int indicator
    );
    %Docstring
        BraceBadLightIndicator(useSetting, indicator)
        
        Use specified indicator to highlight non matching brace instead of
        changing its style.
    %End

    int BraceMatch(
        int pos,
        int maxReStyle = 0
    );
    %Docstring
        BraceMatch(pos, maxReStyle=0) -> int
        
        Find the position of a matching brace or wxSTC_INVALID_POSITION if no
        match.
    %End

    void SetTabWidth(
        int tabWidth
    );
    %Docstring
        SetTabWidth(tabWidth)
        
        Change the visible size of a tab to be a multiple of the width of a
        space character.
    %End

    int GetTabWidth() const;
    %Docstring
        GetTabWidth() -> int
        
        Retrieve the visible size of a tab.
    %End

    void ClearTabStops(
        int line
    );
    %Docstring
        ClearTabStops(line)
        
        Clear explicit tabstops on a line.
    %End

    void AddTabStop(
        int line,
        int x
    );
    %Docstring
        AddTabStop(line, x)
        
        Add an explicit tab stop for a line.
    %End

    int GetNextTabStop(
        int line,
        int x
    );
    %Docstring
        GetNextTabStop(line, x) -> int
        
        Find the next explicit tab stop position on a line after a position.
    %End

    void SetIndent(
        int indentSize
    );
    %Docstring
        SetIndent(indentSize)
        
        Set the number of spaces used for one level of indentation.
    %End

    int GetIndent() const;
    %Docstring
        GetIndent() -> int
        
        Retrieve indentation size.
    %End

    void SetUseTabs(
        bool useTabs
    );
    %Docstring
        SetUseTabs(useTabs)
        
        Indentation will only use space characters if useTabs is false,
        otherwise it will use a combination of tabs and spaces.
    %End

    bool GetUseTabs() const;
    %Docstring
        GetUseTabs() -> bool
        
        Retrieve whether tabs will be used in indentation.
    %End

    void SetLineIndentation(
        int line,
        int indentation
    );
    %Docstring
        SetLineIndentation(line, indentation)
        
        Change the indentation of a line to a number of columns.
    %End

    int GetLineIndentation(
        int line
    ) const;
    %Docstring
        GetLineIndentation(line) -> int
        
        Retrieve the number of columns that a line is indented.
    %End

    int GetLineIndentPosition(
        int line
    ) const;
    %Docstring
        GetLineIndentPosition(line) -> int
        
        Retrieve the position before the first non indentation character on a
        line.
    %End

    void SetIndentationGuides(
        int indentView
    );
    %Docstring
        SetIndentationGuides(indentView)
        
        Show or hide indentation guides.
    %End

    int GetIndentationGuides() const;
    %Docstring
        GetIndentationGuides() -> int
        
        Are the indentation guides visible?
    %End

    void SetHighlightGuide(
        int column
    );
    %Docstring
        SetHighlightGuide(column)
        
        Set the highlighted indentation guide column.
    %End

    int GetHighlightGuide() const;
    %Docstring
        GetHighlightGuide() -> int
        
        Get the highlighted indentation guide column.
    %End

    void SetTabIndents(
        bool tabIndents
    );
    %Docstring
        SetTabIndents(tabIndents)
        
        Sets whether a tab pressed when caret is within indentation indents.
    %End

    bool GetTabIndents() const;
    %Docstring
        GetTabIndents() -> bool
        
        Does a tab pressed when caret is within indentation indent?
    %End

    void SetBackSpaceUnIndents(
        bool bsUnIndents
    );
    %Docstring
        SetBackSpaceUnIndents(bsUnIndents)
        
        Sets whether a backspace pressed when caret is within indentation
        unindents.
    %End

    bool GetBackSpaceUnIndents() const;
    %Docstring
        GetBackSpaceUnIndents() -> bool
        
        Does a backspace pressed when caret is within indentation unindent?
    %End

    int MarkerLineFromHandle(
        int markerHandle
    );
    %Docstring
        MarkerLineFromHandle(markerHandle) -> int
        
        Retrieve the line number at which a particular marker is located.
    %End

    void MarkerDeleteHandle(
        int markerHandle
    );
    %Docstring
        MarkerDeleteHandle(markerHandle)
        
        Delete a marker.
    %End

    void MarkerDefine(
        int markerNumber,
        int markerSymbol,
        const wxColour & foreground = wxNullColour,
        const wxColour & background = wxNullColour
    );
    %Docstring
        MarkerDefine(markerNumber, markerSymbol, foreground=NullColour, background=NullColour)
        
        Set the symbol used for a particular marker number, and optionally the
        fore and background colours.
    %End

    void MarkerSetForeground(
        int markerNumber,
        const wxColour & fore
    );
    %Docstring
        MarkerSetForeground(markerNumber, fore)
        
        Set the foreground colour used for a particular marker number.
    %End

    void MarkerSetBackground(
        int markerNumber,
        const wxColour & back
    );
    %Docstring
        MarkerSetBackground(markerNumber, back)
        
        Set the background colour used for a particular marker number.
    %End

    void MarkerSetBackgroundSelected(
        int markerNumber,
        const wxColour & back
    );
    %Docstring
        MarkerSetBackgroundSelected(markerNumber, back)
        
        Set the background colour used for a particular marker number when its
        folding block is selected.
    %End

    void MarkerEnableHighlight(
        bool enabled
    );
    %Docstring
        MarkerEnableHighlight(enabled)
        
        Enable/disable highlight for current folding block (smallest one that
        contains the caret)
    %End

    int MarkerAdd(
        int line,
        int markerNumber
    );
    %Docstring
        MarkerAdd(line, markerNumber) -> int
        
        Add a marker to a line, returning an ID which can be used to find or
        delete the marker.
    %End

    void MarkerDelete(
        int line,
        int markerNumber
    );
    %Docstring
        MarkerDelete(line, markerNumber)
        
        Delete a marker from a line.
    %End

    void MarkerDeleteAll(
        int markerNumber
    );
    %Docstring
        MarkerDeleteAll(markerNumber)
        
        Delete all markers with a particular number from all lines.
    %End

    int MarkerGet(
        int line
    );
    %Docstring
        MarkerGet(line) -> int
        
        Get a bit mask of all the markers set on a line.
    %End

    int MarkerNext(
        int lineStart,
        int markerMask
    );
    %Docstring
        MarkerNext(lineStart, markerMask) -> int
        
        Find the next line at or after lineStart that includes a marker in
        mask.
    %End

    int MarkerPrevious(
        int lineStart,
        int markerMask
    );
    %Docstring
        MarkerPrevious(lineStart, markerMask) -> int
        
        Find the previous line before lineStart that includes a marker in
        mask.
    %End

    void MarkerAddSet(
        int line,
        int markerSet
    );
    %Docstring
        MarkerAddSet(line, markerSet)
        
        Add a set of markers to a line.
    %End

    void MarkerSetAlpha(
        int markerNumber,
        int alpha
    );
    %Docstring
        MarkerSetAlpha(markerNumber, alpha)
        
        Set the alpha used for a marker that is drawn in the text area, not
        the margin.
    %End

    int GetMarkerSymbolDefined(
        int markerNumber
    );
    %Docstring
        GetMarkerSymbolDefined(markerNumber) -> int
        
        Which symbol was defined for markerNumber with MarkerDefine.
    %End

    void RGBAImageSetWidth(
        int width
    );
    %Docstring
        RGBAImageSetWidth(width)
        
        Set the width for future RGBA image data.
    %End

    void RGBAImageSetHeight(
        int height
    );
    %Docstring
        RGBAImageSetHeight(height)
        
        Set the height for future RGBA image data.
    %End

    void RGBAImageSetScale(
        int scalePercent
    );
    %Docstring
        RGBAImageSetScale(scalePercent)
        
        Set the scale factor in percent for future RGBA image data.
    %End

    void MarkerDefineRGBAImage(int markerNumber,  wxPyBuffer* pixels);
    %Docstring
        MarkerDefineRGBAImage(markerNumber, pixels)
        
        Define a marker from RGBA data.
        
        It has the width and height from RGBAImageSetWidth/Height. You must
        ensure that the buffer is at least width*height*4 bytes long.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStyledTextCtrl_MarkerDefineRGBAImage(sipCpp, markerNumber, pixels);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStyledTextCtrl_MarkerDefineRGBAImage(wxStyledTextCtrl* self, int markerNumber, wxPyBuffer* pixels)
    {
        self->MarkerDefineRGBAImage(markerNumber, (unsigned char*)pixels->m_ptr);
    }
    %End

    void IndicatorSetStyle(
        int indicator,
        int indicatorStyle
    );
    %Docstring
        IndicatorSetStyle(indicator, indicatorStyle)
        
        Set an indicator to plain, squiggle or TT.
    %End

    int IndicatorGetStyle(
        int indicator
    ) const;
    %Docstring
        IndicatorGetStyle(indicator) -> int
        
        Retrieve the style of an indicator.
    %End

    void IndicatorSetForeground(
        int indicator,
        const wxColour & fore
    );
    %Docstring
        IndicatorSetForeground(indicator, fore)
        
        Set the foreground colour of an indicator.
    %End

    wxColour IndicatorGetForeground(
        int indicator
    ) const;
    %Docstring
        IndicatorGetForeground(indicator) -> Colour
        
        Retrieve the foreground colour of an indicator.
    %End

    void IndicatorSetUnder(
        int indicator,
        bool under
    );
    %Docstring
        IndicatorSetUnder(indicator, under)
        
        Set an indicator to draw under text or over(default).
    %End

    bool IndicatorGetUnder(
        int indicator
    ) const;
    %Docstring
        IndicatorGetUnder(indicator) -> bool
        
        Retrieve whether indicator drawn under or over text.
    %End

    void IndicatorSetHoverStyle(
        int indicator,
        int indicatorStyle
    );
    %Docstring
        IndicatorSetHoverStyle(indicator, indicatorStyle)
        
        Set a hover indicator to plain, squiggle or TT.
    %End

    int IndicatorGetHoverStyle(
        int indicator
    ) const;
    %Docstring
        IndicatorGetHoverStyle(indicator) -> int
        
        Retrieve the hover style of an indicator.
    %End

    void IndicatorSetHoverForeground(
        int indicator,
        const wxColour & fore
    );
    %Docstring
        IndicatorSetHoverForeground(indicator, fore)
        
        Set the foreground hover colour of an indicator.
    %End

    wxColour IndicatorGetHoverForeground(
        int indicator
    ) const;
    %Docstring
        IndicatorGetHoverForeground(indicator) -> Colour
        
        Retrieve the foreground hover colour of an indicator.
    %End

    void IndicatorSetFlags(
        int indicator,
        int flags
    );
    %Docstring
        IndicatorSetFlags(indicator, flags)
        
        Set the attributes of an indicator.
    %End

    int IndicatorGetFlags(
        int indicator
    ) const;
    %Docstring
        IndicatorGetFlags(indicator) -> int
        
        Retrieve the attributes of an indicator.
    %End

    void SetIndicatorCurrent(
        int indicator
    );
    %Docstring
        SetIndicatorCurrent(indicator)
        
        Set the indicator used for IndicatorFillRange and IndicatorClearRange.
    %End

    int GetIndicatorCurrent() const;
    %Docstring
        GetIndicatorCurrent() -> int
        
        Get the current indicator.
    %End

    void SetIndicatorValue(
        int value
    );
    %Docstring
        SetIndicatorValue(value)
        
        Set the value used for IndicatorFillRange.
    %End

    int GetIndicatorValue() const;
    %Docstring
        GetIndicatorValue() -> int
        
        Get the current indicator value.
    %End

    void IndicatorFillRange(
        int start,
        int lengthFill
    );
    %Docstring
        IndicatorFillRange(start, lengthFill)
        
        Turn an indicator on over a range.
    %End

    void IndicatorClearRange(
        int start,
        int lengthClear
    );
    %Docstring
        IndicatorClearRange(start, lengthClear)
        
        Turn an indicator off over a range.
    %End

    int IndicatorAllOnFor(
        int pos
    );
    %Docstring
        IndicatorAllOnFor(pos) -> int
        
        Are any indicators present at pos?
    %End

    int IndicatorValueAt(
        int indicator,
        int pos
    );
    %Docstring
        IndicatorValueAt(indicator, pos) -> int
        
        What value does a particular indicator have at a position?
    %End

    int IndicatorStart(
        int indicator,
        int pos
    );
    %Docstring
        IndicatorStart(indicator, pos) -> int
        
        Where does a particular indicator start?
    %End

    int IndicatorEnd(
        int indicator,
        int pos
    );
    %Docstring
        IndicatorEnd(indicator, pos) -> int
        
        Where does a particular indicator end?
    %End

    void IndicatorSetAlpha(
        int indicator,
        int alpha
    );
    %Docstring
        IndicatorSetAlpha(indicator, alpha)
        
        Set the alpha fill colour of the given indicator.
    %End

    int IndicatorGetAlpha(
        int indicator
    ) const;
    %Docstring
        IndicatorGetAlpha(indicator) -> int
        
        Get the alpha fill colour of the given indicator.
    %End

    void IndicatorSetOutlineAlpha(
        int indicator,
        int alpha
    );
    %Docstring
        IndicatorSetOutlineAlpha(indicator, alpha)
        
        Set the alpha outline colour of the given indicator.
    %End

    int IndicatorGetOutlineAlpha(
        int indicator
    ) const;
    %Docstring
        IndicatorGetOutlineAlpha(indicator) -> int
        
        Get the alpha outline colour of the given indicator.
    %End

    void AutoCompShow(
        int lengthEntered,
        const wxString & itemList
    );
    %Docstring
        AutoCompShow(lengthEntered, itemList)
        
        Display an auto-completion list.
    %End

    void AutoCompCancel();
    %Docstring
        AutoCompCancel()
        
        Remove the auto-completion list from the screen.
    %End

    bool AutoCompActive();
    %Docstring
        AutoCompActive() -> bool
        
        Is there an auto-completion list visible?
    %End

    int AutoCompPosStart();
    %Docstring
        AutoCompPosStart() -> int
        
        Retrieve the position of the caret when the auto-completion list was
        displayed.
    %End

    void AutoCompComplete();
    %Docstring
        AutoCompComplete()
        
        User has selected an item so remove the list and insert the selection.
    %End

    void AutoCompStops(
        const wxString & characterSet
    );
    %Docstring
        AutoCompStops(characterSet)
        
        Define a set of character that when typed cancel the auto-completion
        list.
    %End

    void AutoCompSetSeparator(
        int separatorCharacter
    );
    %Docstring
        AutoCompSetSeparator(separatorCharacter)
        
        Change the separator character in the string setting up an auto-
        completion list.
    %End

    int AutoCompGetSeparator() const;
    %Docstring
        AutoCompGetSeparator() -> int
        
        Retrieve the auto-completion list separator character.
    %End

    void AutoCompSelect(
        const wxString & select
    );
    %Docstring
        AutoCompSelect(select)
        
        Select the item in the auto-completion list that starts with a string.
    %End

    void AutoCompSetCancelAtStart(
        bool cancel
    );
    %Docstring
        AutoCompSetCancelAtStart(cancel)
        
        Should the auto-completion list be cancelled if the user backspaces to
        a position before where the box was created.
    %End

    bool AutoCompGetCancelAtStart() const;
    %Docstring
        AutoCompGetCancelAtStart() -> bool
        
        Retrieve whether auto-completion cancelled by backspacing before
        start.
    %End

    void AutoCompSetFillUps(
        const wxString & characterSet
    );
    %Docstring
        AutoCompSetFillUps(characterSet)
        
        Define a set of characters that when typed will cause the
        autocompletion to choose the selected item.
    %End

    void AutoCompSetChooseSingle(
        bool chooseSingle
    );
    %Docstring
        AutoCompSetChooseSingle(chooseSingle)
        
        Should a single item auto-completion list automatically choose the
        item.
    %End

    bool AutoCompGetChooseSingle() const;
    %Docstring
        AutoCompGetChooseSingle() -> bool
        
        Retrieve whether a single item auto-completion list automatically
        choose the item.
    %End

    void AutoCompSetIgnoreCase(
        bool ignoreCase
    );
    %Docstring
        AutoCompSetIgnoreCase(ignoreCase)
        
        Set whether case is significant when performing auto-completion
        searches.
    %End

    bool AutoCompGetIgnoreCase() const;
    %Docstring
        AutoCompGetIgnoreCase() -> bool
        
        Retrieve state of ignore case flag.
    %End

    void AutoCompSetAutoHide(
        bool autoHide
    );
    %Docstring
        AutoCompSetAutoHide(autoHide)
        
        Set whether or not autocompletion is hidden automatically when nothing
        matches.
    %End

    bool AutoCompGetAutoHide() const;
    %Docstring
        AutoCompGetAutoHide() -> bool
        
        Retrieve whether or not autocompletion is hidden automatically when
        nothing matches.
    %End

    void AutoCompSetDropRestOfWord(
        bool dropRestOfWord
    );
    %Docstring
        AutoCompSetDropRestOfWord(dropRestOfWord)
        
        Set whether or not autocompletion deletes any word characters after
        the inserted text upon completion.
    %End

    bool AutoCompGetDropRestOfWord() const;
    %Docstring
        AutoCompGetDropRestOfWord() -> bool
        
        Retrieve whether or not autocompletion deletes any word characters
        after the inserted text upon completion.
    %End

    void RegisterImage(
        int type,
        const wxBitmap & bmp
    );
    %Docstring
        RegisterImage(type, bmp)
        
        Register an image for use in autocompletion lists.
    %End

    void ClearRegisteredImages();
    %Docstring
        ClearRegisteredImages()
        
        Clear all the registered images.
    %End

    int AutoCompGetTypeSeparator() const;
    %Docstring
        AutoCompGetTypeSeparator() -> int
        
        Retrieve the auto-completion list type-separator character.
    %End

    void AutoCompSetTypeSeparator(
        int separatorCharacter
    );
    %Docstring
        AutoCompSetTypeSeparator(separatorCharacter)
        
        Change the type-separator character in the string setting up an auto-
        completion list.
    %End

    void AutoCompSetMaxWidth(
        int characterCount
    );
    %Docstring
        AutoCompSetMaxWidth(characterCount)
        
        Set the maximum width, in characters, of auto-completion and user
        lists.
    %End

    int AutoCompGetMaxWidth() const;
    %Docstring
        AutoCompGetMaxWidth() -> int
        
        Get the maximum width, in characters, of auto-completion and user
        lists.
    %End

    void AutoCompSetMaxHeight(
        int rowCount
    );
    %Docstring
        AutoCompSetMaxHeight(rowCount)
        
        Set the maximum height, in rows, of auto-completion and user lists.
    %End

    int AutoCompGetMaxHeight() const;
    %Docstring
        AutoCompGetMaxHeight() -> int
        
        Set the maximum height, in rows, of auto-completion and user lists.
    %End

    int AutoCompGetCurrent() const;
    %Docstring
        AutoCompGetCurrent() -> int
        
        Get currently selected item position in the auto-completion list.
    %End

    wxString AutoCompGetCurrentText() const;
    %Docstring
        AutoCompGetCurrentText() -> String
        
        Get currently selected item text in the auto-completion list.
    %End

    void AutoCompSetCaseInsensitiveBehaviour(
        int behaviour
    );
    %Docstring
        AutoCompSetCaseInsensitiveBehaviour(behaviour)
        
        Set auto-completion case insensitive behaviour to either prefer case-
        sensitive matches or have no preference.
    %End

    int AutoCompGetCaseInsensitiveBehaviour() const;
    %Docstring
        AutoCompGetCaseInsensitiveBehaviour() -> int
        
        Get auto-completion case insensitive behaviour.
    %End

    void AutoCompSetMulti(
        int multi
    );
    %Docstring
        AutoCompSetMulti(multi)
        
        Change the effect of autocompleting when there are multiple
        selections.
    %End

    int AutoCompGetMulti() const;
    %Docstring
        AutoCompGetMulti() -> int
        
        Retrieve the effect of autocompleting when there are multiple
        selections.
    %End

    void AutoCompSetOrder(
        int order
    );
    %Docstring
        AutoCompSetOrder(order)
        
        Set the way autocompletion lists are ordered.
    %End

    int AutoCompGetOrder() const;
    %Docstring
        AutoCompGetOrder() -> int
        
        Get the way autocompletion lists are ordered.
    %End

    void RegisterRGBAImage(int type,  wxPyBuffer* pixels);
    %Docstring
        RegisterRGBAImage(type, pixels)
        
        Register an RGBA image for use in autocompletion lists.
        
        It has the width and height from RGBAImageSetWidth/Height. You must
        ensure that the buffer is at least width*height*4 bytes long.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStyledTextCtrl_RegisterRGBAImage(sipCpp, type, pixels);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStyledTextCtrl_RegisterRGBAImage(wxStyledTextCtrl* self, int type, wxPyBuffer* pixels)
    {
        self->RegisterRGBAImage(type, (unsigned char*)pixels->m_ptr);
    }
    %End

    void UserListShow(
        int listType,
        const wxString & itemList
    );
    %Docstring
        UserListShow(listType, itemList)
        
        Display a list of strings and send notification when user chooses one.
    %End

    void CallTipShow(
        int pos,
        const wxString & definition
    );
    %Docstring
        CallTipShow(pos, definition)
        
        Show a call tip containing a definition near position pos.
    %End

    void CallTipCancel();
    %Docstring
        CallTipCancel()
        
        Remove the call tip from the screen.
    %End

    bool CallTipActive();
    %Docstring
        CallTipActive() -> bool
        
        Is there an active call tip?
    %End

    int CallTipPosAtStart();
    %Docstring
        CallTipPosAtStart() -> int
        
        Retrieve the position where the caret was before displaying the call
        tip.
    %End

    void CallTipSetPosAtStart(
        int posStart
    );
    %Docstring
        CallTipSetPosAtStart(posStart)
        
        Set the start position in order to change when backspacing removes the
        calltip.
    %End

    void CallTipSetHighlight(
        int highlightStart,
        int highlightEnd
    );
    %Docstring
        CallTipSetHighlight(highlightStart, highlightEnd)
        
        Highlight a segment of the definition.
    %End

    void CallTipSetBackground(
        const wxColour & back
    );
    %Docstring
        CallTipSetBackground(back)
        
        Set the background colour for the call tip.
    %End

    void CallTipSetForeground(
        const wxColour & fore
    );
    %Docstring
        CallTipSetForeground(fore)
        
        Set the foreground colour for the call tip.
    %End

    void CallTipSetForegroundHighlight(
        const wxColour & fore
    );
    %Docstring
        CallTipSetForegroundHighlight(fore)
        
        Set the foreground colour for the highlighted part of the call tip.
    %End

    void CallTipUseStyle(
        int tabSize
    );
    %Docstring
        CallTipUseStyle(tabSize)
        
        Enable use of wxSTC_STYLE_CALLTIP and set call tip tab size in pixels.
    %End

    void CallTipSetPosition(
        bool above
    );
    %Docstring
        CallTipSetPosition(above)
        
        Set position of calltip, above or below text.
    %End

    void LineDown();
    %Docstring
        LineDown()
        
        Move caret down one line.
    %End

    void LineDownExtend();
    %Docstring
        LineDownExtend()
        
        Move caret down one line extending selection to new caret position.
    %End

    void LineUp();
    %Docstring
        LineUp()
        
        Move caret up one line.
    %End

    void LineUpExtend();
    %Docstring
        LineUpExtend()
        
        Move caret up one line extending selection to new caret position.
    %End

    void CharLeft();
    %Docstring
        CharLeft()
        
        Move caret left one character.
    %End

    void CharLeftExtend();
    %Docstring
        CharLeftExtend()
        
        Move caret left one character extending selection to new caret
        position.
    %End

    void CharRight();
    %Docstring
        CharRight()
        
        Move caret right one character.
    %End

    void CharRightExtend();
    %Docstring
        CharRightExtend()
        
        Move caret right one character extending selection to new caret
        position.
    %End

    void WordLeft();
    %Docstring
        WordLeft()
        
        Move caret left one word.
    %End

    void WordLeftExtend();
    %Docstring
        WordLeftExtend()
        
        Move caret left one word extending selection to new caret position.
    %End

    void WordRight();
    %Docstring
        WordRight()
        
        Move caret right one word.
    %End

    void WordRightExtend();
    %Docstring
        WordRightExtend()
        
        Move caret right one word extending selection to new caret position.
    %End

    void Home();
    %Docstring
        Home()
        
        Move caret to first position on line.
    %End

    void HomeExtend();
    %Docstring
        HomeExtend()
        
        Move caret to first position on line extending selection to new caret
        position.
    %End

    void LineEnd();
    %Docstring
        LineEnd()
        
        Move caret to last position on line.
    %End

    void LineEndExtend();
    %Docstring
        LineEndExtend()
        
        Move caret to last position on line extending selection to new caret
        position.
    %End

    void DocumentStart();
    %Docstring
        DocumentStart()
        
        Move caret to first position in document.
    %End

    void DocumentStartExtend();
    %Docstring
        DocumentStartExtend()
        
        Move caret to first position in document extending selection to new
        caret position.
    %End

    void DocumentEnd();
    %Docstring
        DocumentEnd()
        
        Move caret to last position in document.
    %End

    void DocumentEndExtend();
    %Docstring
        DocumentEndExtend()
        
        Move caret to last position in document extending selection to new
        caret position.
    %End

    void PageUp();
    %Docstring
        PageUp()
        
        Move caret one page up.
    %End

    void PageUpExtend();
    %Docstring
        PageUpExtend()
        
        Move caret one page up extending selection to new caret position.
    %End

    void PageDown();
    %Docstring
        PageDown()
        
        Move caret one page down.
    %End

    void PageDownExtend();
    %Docstring
        PageDownExtend()
        
        Move caret one page down extending selection to new caret position.
    %End

    void EditToggleOvertype();
    %Docstring
        EditToggleOvertype()
        
        Switch from insert to overtype mode or the reverse.
    %End

    void Cancel();
    %Docstring
        Cancel()
        
        Cancel any modes such as call tip or auto-completion list display.
    %End

    void DeleteBack();
    %Docstring
        DeleteBack()
        
        Delete the selection or if no selection, the character before the
        caret.
    %End

    void Tab();
    %Docstring
        Tab()
        
        If selection is empty or all on one line replace the selection with a
        tab character.
    %End

    void BackTab();
    %Docstring
        BackTab()
        
        Dedent the selected lines.
    %End

    void NewLine();
    %Docstring
        NewLine()
        
        Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
    %End

    void FormFeed();
    %Docstring
        FormFeed()
        
        Insert a Form Feed character.
    %End

    void VCHome();
    %Docstring
        VCHome()
        
        Move caret to before first visible character on line.
    %End

    void VCHomeExtend();
    %Docstring
        VCHomeExtend()
        
        Like VCHome but extending selection to new caret position.
    %End

    void DelWordLeft();
    %Docstring
        DelWordLeft()
        
        Delete the word to the left of the caret.
    %End

    void DelWordRight();
    %Docstring
        DelWordRight()
        
        Delete the word to the right of the caret.
    %End

    void DelWordRightEnd();
    %Docstring
        DelWordRightEnd()
        
        Delete the word to the right of the caret, but not the trailing non-
        word characters.
    %End

    void LineCut();
    %Docstring
        LineCut()
        
        Cut the line containing the caret.
    %End

    void LineDelete();
    %Docstring
        LineDelete()
        
        Delete the line containing the caret.
    %End

    void LineTranspose();
    %Docstring
        LineTranspose()
        
        Switch the current line with the previous.
    %End

    void LineDuplicate();
    %Docstring
        LineDuplicate()
        
        Duplicate the current line.
    %End

    void LowerCase();
    %Docstring
        LowerCase()
        
        Transform the selection to lower case.
    %End

    void UpperCase();
    %Docstring
        UpperCase()
        
        Transform the selection to upper case.
    %End

    void LineScrollDown();
    %Docstring
        LineScrollDown()
        
        Scroll the document down, keeping the caret visible.
    %End

    void LineScrollUp();
    %Docstring
        LineScrollUp()
        
        Scroll the document up, keeping the caret visible.
    %End

    void DeleteBackNotLine();
    %Docstring
        DeleteBackNotLine()
        
        Delete the selection or if no selection, the character before the
        caret.
    %End

    void HomeDisplay();
    %Docstring
        HomeDisplay()
        
        Move caret to first position on display line.
    %End

    void HomeDisplayExtend();
    %Docstring
        HomeDisplayExtend()
        
        Move caret to first position on display line extending selection to
        new caret position.
    %End

    void LineEndDisplay();
    %Docstring
        LineEndDisplay()
        
        Move caret to last position on display line.
    %End

    void LineEndDisplayExtend();
    %Docstring
        LineEndDisplayExtend()
        
        Move caret to last position on display line extending selection to new
        caret position.
    %End

    void HomeWrap();
    %Docstring
        HomeWrap()
        
        Like Home but when word-wrap is enabled goes first to start of display
        line HomeDisplay, then to start of document line Home.
    %End

    void HomeWrapExtend();
    %Docstring
        HomeWrapExtend()
        
        Like HomeExtend but when word-wrap is enabled extends first to start
        of display line HomeDisplayExtend, then to start of document line
        HomeExtend.
    %End

    void LineEndWrap();
    %Docstring
        LineEndWrap()
        
        Like LineEnd but when word-wrap is enabled goes first to end of
        display line LineEndDisplay, then to start of document line LineEnd.
    %End

    void LineEndWrapExtend();
    %Docstring
        LineEndWrapExtend()
        
        Like LineEndExtend but when word-wrap is enabled extends first to end
        of display line LineEndDisplayExtend, then to start of document line
        LineEndExtend.
    %End

    void VCHomeWrap();
    %Docstring
        VCHomeWrap()
        
        Like VCHome but when word-wrap is enabled goes first to start of
        display line VCHomeDisplay, then behaves like VCHome.
    %End

    void VCHomeWrapExtend();
    %Docstring
        VCHomeWrapExtend()
        
        Like VCHomeExtend but when word-wrap is enabled extends first to start
        of display line VCHomeDisplayExtend, then behaves like VCHomeExtend.
    %End

    void LineCopy();
    %Docstring
        LineCopy()
        
        Copy the line containing the caret.
    %End

    void WordPartLeft();
    %Docstring
        WordPartLeft()
        
        Move to the previous change in capitalisation.
    %End

    void WordPartLeftExtend();
    %Docstring
        WordPartLeftExtend()
        
        Move to the previous change in capitalisation extending selection to
        new caret position.
    %End

    void WordPartRight();
    %Docstring
        WordPartRight()
        
        Move to the change next in capitalisation.
    %End

    void WordPartRightExtend();
    %Docstring
        WordPartRightExtend()
        
        Move to the next change in capitalisation extending selection to new
        caret position.
    %End

    void DelLineLeft();
    %Docstring
        DelLineLeft()
        
        Delete back from the current position to the start of the line.
    %End

    void DelLineRight();
    %Docstring
        DelLineRight()
        
        Delete forwards from the current position to the end of the line.
    %End

    void ParaDown();
    %Docstring
        ParaDown()
        
        Move caret down one paragraph (delimited by empty lines).
    %End

    void ParaDownExtend();
    %Docstring
        ParaDownExtend()
        
        Extend selection down one paragraph (delimited by empty lines).
    %End

    void ParaUp();
    %Docstring
        ParaUp()
        
        Move caret up one paragraph (delimited by empty lines).
    %End

    void ParaUpExtend();
    %Docstring
        ParaUpExtend()
        
        Extend selection up one paragraph (delimited by empty lines).
    %End

    void LineDownRectExtend();
    %Docstring
        LineDownRectExtend()
        
        Move caret down one line, extending rectangular selection to new caret
        position.
    %End

    void LineUpRectExtend();
    %Docstring
        LineUpRectExtend()
        
        Move caret up one line, extending rectangular selection to new caret
        position.
    %End

    void CharLeftRectExtend();
    %Docstring
        CharLeftRectExtend()
        
        Move caret left one character, extending rectangular selection to new
        caret position.
    %End

    void CharRightRectExtend();
    %Docstring
        CharRightRectExtend()
        
        Move caret right one character, extending rectangular selection to new
        caret position.
    %End

    void HomeRectExtend();
    %Docstring
        HomeRectExtend()
        
        Move caret to first position on line, extending rectangular selection
        to new caret position.
    %End

    void VCHomeRectExtend();
    %Docstring
        VCHomeRectExtend()
        
        Move caret to before first visible character on line.
    %End

    void LineEndRectExtend();
    %Docstring
        LineEndRectExtend()
        
        Move caret to last position on line, extending rectangular selection
        to new caret position.
    %End

    void PageUpRectExtend();
    %Docstring
        PageUpRectExtend()
        
        Move caret one page up, extending rectangular selection to new caret
        position.
    %End

    void PageDownRectExtend();
    %Docstring
        PageDownRectExtend()
        
        Move caret one page down, extending rectangular selection to new caret
        position.
    %End

    void StutteredPageUp();
    %Docstring
        StutteredPageUp()
        
        Move caret to top of page, or one page up if already at top of page.
    %End

    void StutteredPageUpExtend();
    %Docstring
        StutteredPageUpExtend()
        
        Move caret to top of page, or one page up if already at top of page,
        extending selection to new caret position.
    %End

    void StutteredPageDown();
    %Docstring
        StutteredPageDown()
        
        Move caret to bottom of page, or one page down if already at bottom of
        page.
    %End

    void StutteredPageDownExtend();
    %Docstring
        StutteredPageDownExtend()
        
        Move caret to bottom of page, or one page down if already at bottom of
        page, extending selection to new caret position.
    %End

    void WordLeftEnd();
    %Docstring
        WordLeftEnd()
        
        Move caret left one word, position cursor at end of word.
    %End

    void WordLeftEndExtend();
    %Docstring
        WordLeftEndExtend()
        
        Move caret left one word, position cursor at end of word, extending
        selection to new caret position.
    %End

    void WordRightEnd();
    %Docstring
        WordRightEnd()
        
        Move caret right one word, position cursor at end of word.
    %End

    void WordRightEndExtend();
    %Docstring
        WordRightEndExtend()
        
        Move caret right one word, position cursor at end of word, extending
        selection to new caret position.
    %End

    void SelectionDuplicate();
    %Docstring
        SelectionDuplicate()
        
        Duplicate the selection.
    %End

    void VerticalCentreCaret();
    %Docstring
        VerticalCentreCaret()
        
        Centre current line in window.
    %End

    void ScrollToStart();
    %Docstring
        ScrollToStart()
        
        Scroll to start of document.
    %End

    void ScrollToEnd();
    %Docstring
        ScrollToEnd()
        
        Scroll to end of document.
    %End

    void VCHomeDisplay();
    %Docstring
        VCHomeDisplay()
        
        Move caret to before first visible character on display line.
    %End

    void VCHomeDisplayExtend();
    %Docstring
        VCHomeDisplayExtend()
        
        Like VCHomeDisplay but extending selection to new caret position.
    %End

    void CmdKeyAssign(
        int key,
        int modifiers,
        int cmd
    );
    %Docstring
        CmdKeyAssign(key, modifiers, cmd)
        
        When key+modifier combination keyDefinition is pressed perform
        sciCommand.
    %End

    void CmdKeyClear(
        int key,
        int modifiers
    );
    %Docstring
        CmdKeyClear(key, modifiers)
        
        When key+modifier combination keyDefinition is pressed do nothing.
    %End

    void CmdKeyClearAll();
    %Docstring
        CmdKeyClearAll()
        
        Drop all key mappings.
    %End

    void UsePopUp(
        int popUpMode
    );
    %Docstring
        UsePopUp(popUpMode)
        
        Set whether a pop up menu is displayed automatically when the user
        presses the wrong mouse button on certain areas.
    %End

    void StartRecord();
    %Docstring
        StartRecord()
        
        Start notifying the container of all key presses and commands.
    %End

    void StopRecord();
    %Docstring
        StopRecord()
        
        Stop notifying the container of all key presses and commands.
    %End

    void SetPrintMagnification(
        int magnification
    );
    %Docstring
        SetPrintMagnification(magnification)
        
        Sets the print magnification added to the point size of each style for
        printing.
    %End

    int GetPrintMagnification() const;
    %Docstring
        GetPrintMagnification() -> int
        
        Returns the print magnification.
    %End

    void SetPrintColourMode(
        int mode
    );
    %Docstring
        SetPrintColourMode(mode)
        
        Modify colours when printing for clearer printed text.
    %End

    int GetPrintColourMode() const;
    %Docstring
        GetPrintColourMode() -> int
        
        Returns the print colour mode.
    %End

    int FormatRange(
        bool doDraw,
        int startPos,
        int endPos,
        wxDC * draw,
        wxDC * target,
        wxRect renderRect,
        wxRect pageRect
    );
    %Docstring
        FormatRange(doDraw, startPos, endPos, draw, target, renderRect, pageRect) -> int
        
        On Windows, will draw the document into a display context such as a
        printer.
    %End

    void SetPrintWrapMode(
        int wrapMode
    );
    %Docstring
        SetPrintWrapMode(wrapMode)
        
        Set printing to line wrapped (wxSTC_WRAP_WORD) or not line wrapped
        (wxSTC_WRAP_NONE).
    %End

    int GetPrintWrapMode() const;
    %Docstring
        GetPrintWrapMode() -> int
        
        Is printing line wrapped?
    %End

    void * GetDirectFunction() const;
    %Docstring
        GetDirectFunction() -> void
        
        Retrieve a pointer to a function that processes messages for this
        Scintilla.
    %End

    void * GetDirectPointer() const;
    %Docstring
        GetDirectPointer() -> void
        
        Retrieve a pointer value to use as the first argument when calling the
        function returned by GetDirectFunction.
    %End

    PyObject* GetCharacterPointer();
    %Docstring
        GetCharacterPointer() -> PyObject
        
        Compact the document buffer and return a read-only memoryview
        object of the characters in the document.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxStyledTextCtrl_GetCharacterPointer(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxStyledTextCtrl_GetCharacterPointer(wxStyledTextCtrl* self)
    {
        
                    const char* ptr = self->GetCharacterPointer();
                    Py_ssize_t len = self->GetLength();
                    PyObject* rv;
                    wxPyBLOCK_THREADS( rv = wxPyMakeBuffer((void*)ptr, len, true) );
                    return rv;
    }
    %End

    PyObject* GetRangePointer(int position,  int rangeLength);
    %Docstring
        GetRangePointer(position, rangeLength) -> PyObject
        
        Return a read-only pointer to a range of characters in the
        document. May move the gap so that the range is contiguous,
        but will only move up to rangeLength bytes.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxStyledTextCtrl_GetRangePointer(sipCpp, position, rangeLength);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxStyledTextCtrl_GetRangePointer(wxStyledTextCtrl* self, int position, int rangeLength)
    {
        
                    const char* ptr = self->GetRangePointer(position, rangeLength);
                    Py_ssize_t len = rangeLength;
                    PyObject* rv;
                    wxPyBLOCK_THREADS( rv = wxPyMakeBuffer((void*)ptr, len, true) );
                    return rv;
    }
    %End

    int GetGapPosition() const;
    %Docstring
        GetGapPosition() -> int
        
        Return a position which, to avoid performance costs, should not be
        within the range of a call to GetRangePointer.
    %End

    void * GetDocPointer();
    %Docstring
        GetDocPointer() -> void
        
        Retrieve a pointer to the document object.
    %End

    void SetDocPointer(
        void * docPointer
    );
    %Docstring
        SetDocPointer(docPointer)
        
        Change the document object used.
    %End

    void * CreateDocument();
    %Docstring
        CreateDocument() -> void
        
        Create a new document object.
    %End

    void AddRefDocument(
        void * docPointer
    );
    %Docstring
        AddRefDocument(docPointer)
        
        Extend life of document.
    %End

    void ReleaseDocument(
        void * docPointer
    );
    %Docstring
        ReleaseDocument(docPointer)
        
        Release a reference to the document, deleting document if it fades to
        black.
    %End

    void * CreateLoader(
        int bytes
    ) const;
    %Docstring
        CreateLoader(bytes) -> void
        
        Create an ILoader*.
    %End

    int VisibleFromDocLine(
        int docLine
    );
    %Docstring
        VisibleFromDocLine(docLine) -> int
        
        Find the display line of a document line taking hidden lines into
        account.
    %End

    int DocLineFromVisible(
        int displayLine
    );
    %Docstring
        DocLineFromVisible(displayLine) -> int
        
        Find the document line of a display line taking hidden lines into
        account.
    %End

    void SetFoldLevel(
        int line,
        int level
    );
    %Docstring
        SetFoldLevel(line, level)
        
        Set the fold level of a line.
    %End

    int GetFoldLevel(
        int line
    ) const;
    %Docstring
        GetFoldLevel(line) -> int
        
        Retrieve the fold level of a line.
    %End

    int GetLastChild(
        int line,
        int level
    ) const;
    %Docstring
        GetLastChild(line, level) -> int
        
        Find the last child line of a header line.
    %End

    int GetFoldParent(
        int line
    ) const;
    %Docstring
        GetFoldParent(line) -> int
        
        Find the parent line of a child line.
    %End

    void ShowLines(
        int lineStart,
        int lineEnd
    );
    %Docstring
        ShowLines(lineStart, lineEnd)
        
        Make a range of lines visible.
    %End

    void HideLines(
        int lineStart,
        int lineEnd
    );
    %Docstring
        HideLines(lineStart, lineEnd)
        
        Make a range of lines invisible.
    %End

    bool GetLineVisible(
        int line
    ) const;
    %Docstring
        GetLineVisible(line) -> bool
        
        Is a line visible?
    %End

    bool GetAllLinesVisible() const;
    %Docstring
        GetAllLinesVisible() -> bool
        
        Are all lines visible?
    %End

    void SetFoldExpanded(
        int line,
        bool expanded
    );
    %Docstring
        SetFoldExpanded(line, expanded)
        
        Show the children of a header line.
    %End

    bool GetFoldExpanded(
        int line
    ) const;
    %Docstring
        GetFoldExpanded(line) -> bool
        
        Is a header line expanded?
    %End

    void ToggleFold(
        int line
    );
    %Docstring
        ToggleFold(line)
        
        Switch a header line between expanded and contracted.
    %End

    void ToggleFoldShowText(
        int line,
        const wxString & text
    );
    %Docstring
        ToggleFoldShowText(line, text)
        
        Switch a header line between expanded and contracted and show some
        text after the line.
    %End

    void FoldDisplayTextSetStyle(
        int style
    );
    %Docstring
        FoldDisplayTextSetStyle(style)
        
        Set the style of fold display text.
    %End

    void FoldLine(
        int line,
        int action
    );
    %Docstring
        FoldLine(line, action)
        
        Expand or contract a fold header.
    %End

    void FoldChildren(
        int line,
        int action
    );
    %Docstring
        FoldChildren(line, action)
        
        Expand or contract a fold header and its children.
    %End

    void ExpandChildren(
        int line,
        int level
    );
    %Docstring
        ExpandChildren(line, level)
        
        Expand a fold header and all children.
    %End

    void FoldAll(
        int action
    );
    %Docstring
        FoldAll(action)
        
        Expand or contract all fold headers.
    %End

    void EnsureVisible(
        int line
    );
    %Docstring
        EnsureVisible(line)
        
        Ensure a particular line is visible by expanding any header line
        hiding it.
    %End

    void SetAutomaticFold(
        int automaticFold
    );
    %Docstring
        SetAutomaticFold(automaticFold)
        
        Set automatic folding behaviours.
    %End

    int GetAutomaticFold() const;
    %Docstring
        GetAutomaticFold() -> int
        
        Get automatic folding behaviours.
    %End

    void SetFoldFlags(
        int flags
    );
    %Docstring
        SetFoldFlags(flags)
        
        Set some style options for folding.
    %End

    void EnsureVisibleEnforcePolicy(
        int line
    );
    %Docstring
        EnsureVisibleEnforcePolicy(line)
        
        Ensure a particular line is visible by expanding any header line
        hiding it.
    %End

    int ContractedFoldNext(
        int lineStart
    );
    %Docstring
        ContractedFoldNext(lineStart) -> int
        
        Find the next line at or after lineStart that is a contracted fold
        header line.
    %End

    int WrapCount(
        int docLine
    );
    %Docstring
        WrapCount(docLine) -> int
        
        The number of display lines needed to wrap a document line.
    %End

    void SetWrapMode(
        int wrapMode
    );
    %Docstring
        SetWrapMode(wrapMode)
        
        Sets whether text is word wrapped.
    %End

    int GetWrapMode() const;
    %Docstring
        GetWrapMode() -> int
        
        Retrieve whether text is word wrapped.
    %End

    void SetWrapVisualFlags(
        int wrapVisualFlags
    );
    %Docstring
        SetWrapVisualFlags(wrapVisualFlags)
        
        Set the display mode of visual flags for wrapped lines.
    %End

    int GetWrapVisualFlags() const;
    %Docstring
        GetWrapVisualFlags() -> int
        
        Retrieve the display mode of visual flags for wrapped lines.
    %End

    void SetWrapVisualFlagsLocation(
        int wrapVisualFlagsLocation
    );
    %Docstring
        SetWrapVisualFlagsLocation(wrapVisualFlagsLocation)
        
        Set the location of visual flags for wrapped lines.
    %End

    int GetWrapVisualFlagsLocation() const;
    %Docstring
        GetWrapVisualFlagsLocation() -> int
        
        Retrieve the location of visual flags for wrapped lines.
    %End

    void SetWrapStartIndent(
        int indent
    );
    %Docstring
        SetWrapStartIndent(indent)
        
        Set the start indent for wrapped lines.
    %End

    int GetWrapStartIndent() const;
    %Docstring
        GetWrapStartIndent() -> int
        
        Retrieve the start indent for wrapped lines.
    %End

    void SetWrapIndentMode(
        int wrapIndentMode
    );
    %Docstring
        SetWrapIndentMode(wrapIndentMode)
        
        Sets how wrapped sublines are placed.
    %End

    int GetWrapIndentMode() const;
    %Docstring
        GetWrapIndentMode() -> int
        
        Retrieve how wrapped sublines are placed.
    %End

    int GetLayoutCache() const;
    %Docstring
        GetLayoutCache() -> int
        
        Retrieve the degree of caching of layout information.
    %End

    void LinesJoin();
    %Docstring
        LinesJoin()
        
        Join the lines in the target.
    %End

    void LinesSplit(
        int pixelWidth
    );
    %Docstring
        LinesSplit(pixelWidth)
        
        Split the lines in the target into lines that are less wide than
        pixelWidth where possible.
    %End

    void SetPositionCacheSize(
        int size
    );
    %Docstring
        SetPositionCacheSize(size)
        
        Set number of entries in position cache.
    %End

    int GetPositionCacheSize() const;
    %Docstring
        GetPositionCacheSize() -> int
        
        How many entries are allocated to the position cache?
    %End

    void ZoomIn();
    %Docstring
        ZoomIn()
        
        Magnify the displayed text by increasing the sizes by 1 point.
    %End

    void ZoomOut();
    %Docstring
        ZoomOut()
        
        Make the displayed text smaller by decreasing the sizes by 1 point.
    %End

    void SetZoom(
        int zoomInPoints
    );
    %Docstring
        SetZoom(zoomInPoints)
        
        Set the zoom level.
    %End

    int GetZoom() const;
    %Docstring
        GetZoom() -> int
        
        Retrieve the zoom level.
    %End

    int GetEdgeColumn() const;
    %Docstring
        GetEdgeColumn() -> int
        
        Retrieve the column number which text should be kept within.
    %End

    void SetEdgeColumn(
        int column
    );
    %Docstring
        SetEdgeColumn(column)
        
        Set the column number of the edge.
    %End

    int GetEdgeMode() const;
    %Docstring
        GetEdgeMode() -> int
        
        Retrieve the edge highlight mode.
    %End

    void SetEdgeMode(
        int edgeMode
    );
    %Docstring
        SetEdgeMode(edgeMode)
        
        The edge may be displayed by a line
        (wxSTC_EDGE_LINE/wxSTC_EDGE_MULTILINE) or by highlighting text that
        goes beyond it (wxSTC_EDGE_BACKGROUND) or not displayed at all
        (wxSTC_EDGE_NONE).
    %End

    wxColour GetEdgeColour() const;
    %Docstring
        GetEdgeColour() -> Colour
        
        Retrieve the colour used in edge indication.
    %End

    void SetEdgeColour(
        const wxColour & edgeColour
    );
    %Docstring
        SetEdgeColour(edgeColour)
        
        Change the colour used in edge indication.
    %End

    void MultiEdgeAddLine(
        int column,
        const wxColour & edgeColour
    );
    %Docstring
        MultiEdgeAddLine(column, edgeColour)
        
        Add a new vertical edge to the view.
    %End

    void MultiEdgeClearAll();
    %Docstring
        MultiEdgeClearAll()
        
        Clear all vertical edges.
    %End

    int ChangeLexerState(
        int start,
        int end
    );
    %Docstring
        ChangeLexerState(start, end) -> int
        
        Indicate that the internal state of a lexer has changed over a range
        and therefore there may be a need to redraw.
    %End

    void SetLexer(
        int lexer
    );
    %Docstring
        SetLexer(lexer)
        
        Set the lexing language of the document.
    %End

    int GetLexer() const;
    %Docstring
        GetLexer() -> int
        
        Retrieve the lexing language of the document.
    %End

    void Colourise(
        int start,
        int end
    );
    %Docstring
        Colourise(start, end)
        
        Colourise a segment of the document using the current lexing language.
    %End

    void SetProperty(
        const wxString & key,
        const wxString & value
    );
    %Docstring
        SetProperty(key, value)
        
        Set up a value that may be used by a lexer for some optional feature.
    %End

    void SetKeyWords(
        int keyWordSet,
        const wxString & keyWords
    );
    %Docstring
        SetKeyWords(keyWordSet, keyWords)
        
        Set up the key words used by the lexer.
    %End

    void SetLexerLanguage(
        const wxString & language
    );
    %Docstring
        SetLexerLanguage(language)
        
        Set the lexing language of the document based on string name.
    %End

    void LoadLexerLibrary(
        const wxString & path
    );
    %Docstring
        LoadLexerLibrary(path)
        
        Load a lexer library (dll / so).
    %End

    wxString GetProperty(
        const wxString & key
    );
    %Docstring
        GetProperty(key) -> String
        
        Retrieve a "property" value previously set with SetProperty.
    %End

    wxString GetPropertyExpanded(
        const wxString & key
    );
    %Docstring
        GetPropertyExpanded(key) -> String
        
        Retrieve a "property" value previously set with SetProperty, with
        "$()" variable replacement on returned buffer.
    %End

    int GetPropertyInt(
        const wxString & key,
        int defaultValue = 0
    ) const;
    %Docstring
        GetPropertyInt(key, defaultValue=0) -> int
        
        Retrieve a "property" value previously set with SetProperty,
        interpreted as an int AFTER any "$()" variable replacement.
    %End

    wxString GetLexerLanguage() const;
    %Docstring
        GetLexerLanguage() -> String
        
        Retrieve the lexing language of the document.
    %End

    void * PrivateLexerCall(
        int operation,
        void * pointer
    );
    %Docstring
        PrivateLexerCall(operation, pointer) -> void
        
        For private communication between an application and a known lexer.
    %End

    wxString PropertyNames() const;
    %Docstring
        PropertyNames() -> String
        
        Retrieve a '\n' separated list of properties understood by the current
        lexer.
    %End

    int PropertyType(
        const wxString & name
    );
    %Docstring
        PropertyType(name) -> int
        
        Retrieve the type of a property.
    %End

    wxString DescribeProperty(
        const wxString & name
    ) const;
    %Docstring
        DescribeProperty(name) -> String
        
        Describe a property.
    %End

    wxString DescribeKeyWordSets() const;
    %Docstring
        DescribeKeyWordSets() -> String
        
        Retrieve a '\n' separated list of descriptions of the keyword sets
        understood by the current lexer.
    %End

    int AllocateSubStyles(
        int styleBase,
        int numberStyles
    );
    %Docstring
        AllocateSubStyles(styleBase, numberStyles) -> int
        
        Allocate a set of sub styles for a particular base style, returning
        start of range.
    %End

    int GetSubStylesStart(
        int styleBase
    ) const;
    %Docstring
        GetSubStylesStart(styleBase) -> int
        
        The starting style number for the sub styles associated with a base
        style.
    %End

    int GetSubStylesLength(
        int styleBase
    ) const;
    %Docstring
        GetSubStylesLength(styleBase) -> int
        
        The number of sub styles associated with a base style.
    %End

    int GetStyleFromSubStyle(
        int subStyle
    ) const;
    %Docstring
        GetStyleFromSubStyle(subStyle) -> int
        
        For a sub style, return the base style, else return the argument.
    %End

    int GetPrimaryStyleFromStyle(
        int style
    ) const;
    %Docstring
        GetPrimaryStyleFromStyle(style) -> int
        
        For a secondary style, return the primary style, else return the
        argument.
    %End

    void FreeSubStyles();
    %Docstring
        FreeSubStyles()
        
        Free allocated sub styles.
    %End

    void SetIdentifiers(
        int style,
        const wxString & identifiers
    );
    %Docstring
        SetIdentifiers(style, identifiers)
        
        Set the identifiers that are shown in a particular style.
    %End

    int DistanceToSecondaryStyles() const;
    %Docstring
        DistanceToSecondaryStyles() -> int
        
        Where styles are duplicated by a feature such as active/inactive code
        return the distance between the two types.
    %End

    wxString GetSubStyleBases() const;
    %Docstring
        GetSubStyleBases() -> String
        
        Get the set of base styles that can be extended with sub styles.
    %End

    void SetMouseDwellTime(
        int periodMilliseconds
    );
    %Docstring
        SetMouseDwellTime(periodMilliseconds)
        
        Sets the time the mouse must sit still to generate a mouse dwell
        event.
    %End

    int GetMouseDwellTime() const;
    %Docstring
        GetMouseDwellTime() -> int
        
        Retrieve the time the mouse must sit still to generate a mouse dwell
        event.
    %End

    void SetModEventMask(
        int eventMask
    );
    %Docstring
        SetModEventMask(eventMask)
        
        Set which document modification events are sent to the container.
    %End

    int GetModEventMask() const;
    %Docstring
        GetModEventMask() -> int
        
        Get which document modification events are sent to the container.
    %End

    void SetIdentifier(
        int identifier
    );
    %Docstring
        SetIdentifier(identifier)
        
        Set the identifier reported as idFrom in notification messages.
    %End

    int GetIdentifier() const;
    %Docstring
        GetIdentifier() -> int
        
        Get the identifier.
    %End

    void SetStyleBits(
        int bits
    )   /Deprecated/;
    %Docstring
        SetStyleBits(bits)
        
        Divide each styling byte into lexical class bits (default: 5) and
        indicator bits (default: 3).
    %End

    int GetStyleBits() const   /Deprecated/;
    %Docstring
        GetStyleBits() -> int
        
        Retrieve number of bits in style bytes used to hold the lexical state.
    %End

    int GetStyleBitsNeeded() const   /Deprecated/;
    %Docstring
        GetStyleBitsNeeded() -> int
        
        Retrieve the number of bits the current lexer needs for styling.
    %End

    int GetCurrentLine();
    %Docstring
        GetCurrentLine() -> int
        
        Returns the line number of the line with the caret.
    %End

    void StyleSetSpec(
        int styleNum,
        const wxString & spec
    );
    %Docstring
        StyleSetSpec(styleNum, spec)
        
        Extract style settings from a spec-string which is composed of one or
        more of the following comma separated elements:
    %End

    wxFont StyleGetFont(
        int style
    );
    %Docstring
        StyleGetFont(style) -> Font
        
        Get the font of a style.
    %End

    void StyleSetFont(
        int styleNum,
        wxFont & font
    );
    %Docstring
        StyleSetFont(styleNum, font)
        
        Set style size, face, bold, italic, and underline attributes from a
        wxFont's attributes.
    %End

    void StyleSetFontAttr(
        int styleNum,
        int size,
        const wxString & faceName,
        bool bold,
        bool italic,
        bool underline,
        wxFontEncoding encoding = wxFONTENCODING_DEFAULT
    );
    %Docstring
        StyleSetFontAttr(styleNum, size, faceName, bold, italic, underline, encoding=FONTENCODING_DEFAULT)
        
        Set all font style attributes at once.
    %End

    void StyleSetFontEncoding(
        int style,
        wxFontEncoding encoding
    );
    %Docstring
        StyleSetFontEncoding(style, encoding)
        
        Set the font encoding to be used by a style.
    %End

    void CmdKeyExecute(
        int cmd
    );
    %Docstring
        CmdKeyExecute(cmd)
        
        Perform one of the operations defined by the wxSTC_CMD_* constants.
    %End

    void SetMargins(
        int left,
        int right
    );
    %Docstring
        SetMargins(left, right)
        
        Set the left and right margin in the edit area, measured in pixels.
    %End

    void ScrollToLine(
        int line
    );
    %Docstring
        ScrollToLine(line)
        
        Scroll enough to make the given line visible.
    %End

    void ScrollToColumn(
        int column
    );
    %Docstring
        ScrollToColumn(column)
        
        Scroll enough to make the given column visible.
    %End

    wxIntPtr SendMsg(
        int msg,
        wxUIntPtr wp = 0,
        wxIntPtr lp = 0
    ) const;
    %Docstring
        SendMsg(msg, wp=0, lp=0) -> IntPtr
        
        Scintilla API call.
    %End

    void SetVScrollBar(
        wxScrollBar * bar
    );
    %Docstring
        SetVScrollBar(bar)
        
        Set the vertical scrollbar to use instead of the one that's built-in.
    %End

    void SetHScrollBar(
        wxScrollBar * bar
    );
    %Docstring
        SetHScrollBar(bar)
        
        Set the horizontal scrollbar to use instead of the one that's built-
        in.
    %End

    bool GetLastKeydownProcessed();
    %Docstring
        GetLastKeydownProcessed() -> bool
        
        Can be used to prevent the EVT_CHAR handler from adding the char.
    %End

    void SetLastKeydownProcessed(
        bool val
    );
    %Docstring
        SetLastKeydownProcessed(val)
        
        Returns the line number of the line with the caret.
    %End

    bool SaveFile(
        const wxString & filename
    );
    %Docstring
        SaveFile(filename) -> bool
        
        Write the contents of the editor to filename.
    %End

    bool LoadFile(
        const wxString & filename
    );
    %Docstring
        LoadFile(filename) -> bool
        
        Load the contents of filename into the editor.
    %End

    wxDragResult DoDragEnter(
        wxCoord x,
        wxCoord y,
        wxDragResult defaultRes
    );
    %Docstring
        DoDragEnter(x, y, defaultRes) -> DragResult
        
        Allow for simulating a DnD DragEnter.
    %End

    wxDragResult DoDragOver(
        wxCoord x,
        wxCoord y,
        wxDragResult defaultRes
    );
    %Docstring
        DoDragOver(x, y, defaultRes) -> DragResult
        
        Allow for simulating a DnD DragOver.
    %End

    void DoDragLeave();
    %Docstring
        DoDragLeave()
        
        Allow for simulating a DnD DragLeave.
    %End

    bool DoDropText(
        long x,
        long y,
        const wxString & data
    );
    %Docstring
        DoDropText(x, y, data) -> bool
        
        Allow for simulating a DnD DropText.
    %End

    void SetUseAntiAliasing(
        bool useAA
    );
    %Docstring
        SetUseAntiAliasing(useAA)
        
        Specify whether anti-aliased fonts should be used.
    %End

    bool GetUseAntiAliasing();
    %Docstring
        GetUseAntiAliasing() -> bool
        
        Returns the current UseAntiAliasing setting.
    %End

    void AnnotationClearLine(
        int line
    );
    %Docstring
        AnnotationClearLine(line)
        
        Clear annotations from the given line.
    %End

    void MarkerDefineBitmap(
        int markerNumber,
        const wxBitmap & bmp
    );
    %Docstring
        MarkerDefineBitmap(markerNumber, bmp)
        
        Define a marker with a wxBitmap.
    %End

    void AddTextRaw(
        const char * text,
        int length = -1
    );
    %Docstring
        AddTextRaw(text, length=-1)
        
        Add text to the document at current position.
    %End

    void InsertTextRaw(
        int pos,
        const char * text
    );
    %Docstring
        InsertTextRaw(pos, text)
        
        Insert string at a position.
    %End

    wxCharBuffer GetCurLineRaw(
        int * linePos   /Out/ = NULL
    );
    %Docstring
        GetCurLineRaw() -> (CharBuffer, linePos)
        
        Retrieve the text of the line containing the caret.
    %End

    wxCharBuffer GetLineRaw(
        int line
    );
    %Docstring
        GetLineRaw(line) -> CharBuffer
        
        Retrieve the contents of a line.
    %End

    wxCharBuffer GetSelectedTextRaw();
    %Docstring
        GetSelectedTextRaw() -> CharBuffer
        
        Retrieve the selected text.
    %End

    wxCharBuffer GetTargetTextRaw();
    %Docstring
        GetTargetTextRaw() -> CharBuffer
        
        Retrieve the target text.
    %End

    wxCharBuffer GetTextRangeRaw(
        int startPos,
        int endPos
    );
    %Docstring
        GetTextRangeRaw(startPos, endPos) -> CharBuffer
        
        Retrieve a range of text.
    %End

    void SetTextRaw(
        const char * text
    );
    %Docstring
        SetTextRaw(text)
        
        Replace the contents of the document with the argument text.
    %End

    wxCharBuffer GetTextRaw();
    %Docstring
        GetTextRaw() -> CharBuffer
        
        Retrieve all the text in the document.
    %End

    void AppendTextRaw(
        const char * text,
        int length = -1
    );
    %Docstring
        AppendTextRaw(text, length=-1)
        
        Append a string to the end of the document without changing the
        selection.
    %End

    void ReplaceSelectionRaw(
        const char * text
    );
    %Docstring
        ReplaceSelectionRaw(text)
        
        Replace the current selection with text.
    %End

    int ReplaceTargetRaw(
        const char * text,
        int length = -1
    );
    %Docstring
        ReplaceTargetRaw(text, length=-1) -> int
        
        Replace the current target with text.
    %End

    int ReplaceTargetRERaw(
        const char * text,
        int length = -1
    );
    %Docstring
        ReplaceTargetRERaw(text, length=-1) -> int
        
        Replace the current target with text using regular expressions.
    %End

    virtual
    void WriteText(
        const wxString & text
    );
    %Docstring
        WriteText(text)
        
        Writes the text into the text control at the current insertion
        position.
    %End

    virtual
    void Remove(
        long from_,
        long to_
    );
    %Docstring
        Remove(from_, to_)
        
        Removes the text starting at the first given position up to (but not
        including) the character at the last position.
    %End

    virtual
    void Replace(
        long from_,
        long to_,
        const wxString & value
    );
    %Docstring
        Replace(from_, to_, value)
        
        Replaces the text starting at the first position up to (but not
        including) the character at the last position with the given text.
    %End

    virtual
    void SetInsertionPoint(
        long pos
    );
    %Docstring
        SetInsertionPoint(pos)
        
        Sets the insertion point at the given position.
    %End

    virtual
    long GetInsertionPoint() const;
    %Docstring
        GetInsertionPoint() -> long
        
        Returns the insertion point, or cursor, position.
    %End

    virtual
    long GetLastPosition() const;
    %Docstring
        GetLastPosition() -> long
        
        Returns the zero based index of the last position in the text control,
        which is equal to the number of characters in the control.
    %End

    virtual
    void SetSelection(
        long from_,
        long to_
    );
    %Docstring
        SetSelection(from_, to_)
        
        Selects the text starting at the first position up to (but not
        including) the character at the last position.
    %End

    virtual
    void SelectNone();
    %Docstring
        SelectNone()
        
        Deselects selected text in the control.
    %End

    virtual
    void GetSelection(
        long * from_   /Out/,
        long * to_   /Out/
    ) const;
    %Docstring
        GetSelection() -> (from_, to_)
        
        Gets the current selection span.
    %End

    virtual
    bool IsEditable() const;
    %Docstring
        IsEditable() -> bool
        
        Returns true if the controls contents may be edited by user (note that
        it always can be changed by the program).
    %End

    virtual
    void SetEditable(
        bool editable
    );
    %Docstring
        SetEditable(editable)
        
        Makes the text item editable or read-only, overriding the
        wxTE_READONLY flag.
    %End

    virtual
    int GetLineLength(
        long lineNo
    ) const;
    %Docstring
        GetLineLength(lineNo) -> int
        
        Gets the length of the specified line, not including any trailing
        newline character(s).
    %End

    virtual
    wxString GetLineText(
        long lineNo
    ) const;
    %Docstring
        GetLineText(lineNo) -> String
        
        Returns the contents of a given line in the text control, not
        including any trailing newline character(s).
    %End

    virtual
    int GetNumberOfLines() const;
    %Docstring
        GetNumberOfLines() -> int
        
        Returns the number of lines in the text control buffer.
    %End

    virtual
    bool IsModified() const;
    %Docstring
        IsModified() -> bool
        
        Returns true if the text has been modified by user.
    %End

    virtual
    void MarkDirty();
    %Docstring
        MarkDirty()
        
        Mark text as modified (dirty).
    %End

    virtual
    void DiscardEdits();
    %Docstring
        DiscardEdits()
        
        Resets the internal modified flag as if the current changes had been
        saved.
    %End

    virtual
    bool SetStyle(
        long start,
        long end,
        const wxTextAttr & style
    );
    %Docstring
        SetStyle(start, end, style) -> bool
        
        This method is inherited from wxTextAreaBase but is not implemented in
        wxStyledTextCtrl.
    %End

    virtual
    bool GetStyle(
        long position,
        wxTextAttr & style
    );
    %Docstring
        GetStyle(position, style) -> bool
        
        This method is inherited from wxTextAreaBase but is not implemented in
        wxStyledTextCtrl.
    %End

    virtual
    bool SetDefaultStyle(
        const wxTextAttr & style
    );
    %Docstring
        SetDefaultStyle(style) -> bool
        
        This method is inherited from wxTextAreaBase but is not implemented in
        wxStyledTextCtrl.
    %End

    virtual
    long XYToPosition(
        long x,
        long y
    ) const;
    %Docstring
        XYToPosition(x, y) -> long
        
        Converts the given zero based column and line number to a position.
    %End

    virtual
    bool PositionToXY(
        long pos,
        long * x   /Out/,
        long * y   /Out/
    ) const;
    %Docstring
        PositionToXY(pos) -> (bool, x, y)
        
        Converts given position to a zero-based column, line number pair.
    %End

    virtual
    void ShowPosition(
        long pos
    );
    %Docstring
        ShowPosition(pos)
        
        Makes the line containing the given position visible.
    %End

    virtual
    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        long * pos   /Out/
    ) const   /PyName=HitTestPos/;
    %Docstring
        HitTestPos(pt) -> (TextCtrlHitTestResult, pos)
        
        Finds the position of the character at the specified point.
    %End

    virtual
    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        wxTextCoord * col   /Out/,
        wxTextCoord * row   /Out/
    ) const;
    %Docstring
        HitTest(pt) -> (TextCtrlHitTestResult, col, row)
        
        Finds the row and column of the character at the specified point.
    %End

    static
    wxVersionInfo GetLibraryVersionInfo();
    %Docstring
        GetLibraryVersionInfo() -> VersionInfo
        
        Returns the version of the Scintilla library used by this control.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool AutoComplete(
        const wxArrayString & choices
    );
    %Docstring
        AutoComplete(choices) -> bool
        AutoComplete(completer) -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using the given choices.
    %End

    bool AutoComplete(
        wxTextCompleter * completer   /Transfer/
    );

    bool AutoCompleteFileNames();
    %Docstring
        AutoCompleteFileNames() -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using all valid file system paths.
    %End

    bool AutoCompleteDirectories();
    %Docstring
        AutoCompleteDirectories() -> bool
        
        Call this function to enable auto-completion of the text using the
        file system directories.
    %End

    virtual
    bool CanCopy() const;
    %Docstring
        CanCopy() -> bool
        
        Returns true if the selection can be copied to the clipboard.
    %End

    virtual
    bool CanCut() const;
    %Docstring
        CanCut() -> bool
        
        Returns true if the selection can be cut to the clipboard.
    %End

    void ChangeValue(
        const wxString & value
    );
    %Docstring
        ChangeValue(value)
        
        Sets the new text control value.
    %End

    void ForceUpper();
    %Docstring
        ForceUpper()
        
        Convert all text entered into the control to upper case.
    %End

    wxString GetRange(
        long from_,
        long to_
    ) const;
    %Docstring
        GetRange(from_, to_) -> String
        
        Returns the string containing the text starting in the positions from
        and up to to in the control.
    %End

    wxString GetStringSelection() const;
    %Docstring
        GetStringSelection() -> String
        
        Gets the text currently selected in the control.
    %End

    wxString GetValue() const;
    %Docstring
        GetValue() -> String
        
        Gets the contents of the control.
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Returns true if the control is currently empty.
    %End

    void SetInsertionPointEnd();
    %Docstring
        SetInsertionPointEnd()
        
        Sets the insertion point at the end of the text control.
    %End

    void SetMaxLength(
        unsigned long len
    );
    %Docstring
        SetMaxLength(len)
        
        This function sets the maximum number of characters the user can enter
        into the control.
    %End

    bool SetHint(
        const wxString & hint
    );
    %Docstring
        SetHint(hint) -> bool
        
        Sets a hint shown in an empty unfocused text control.
    %End

    wxString GetHint() const;
    %Docstring
        GetHint() -> String
        
        Returns the current hint string.
    %End

    wxPoint GetMargins() const;
    %Docstring
        GetMargins() -> Point
        
        Returns the margins used by the control.
    %End

    void SetValue(
        const wxString & value
    );
    %Docstring
        SetValue(value)
        
        Sets the new text control value.
    %End

    const wxTextAttr & GetDefaultStyle() const;
    %Docstring
        GetDefaultStyle() -> TextAttr
        
        Returns the style currently used for the new text.
    %End

    wxPoint PositionToCoords(
        long pos
    ) const;
    %Docstring
        PositionToCoords(pos) -> Point
        
        Converts given text position to client coordinates in pixels.
    %End

    void SetModified(
        bool modified
    );
    %Docstring
        SetModified(modified)
        
        Marks the control as being modified by the user or not.
    %End

    void write(const wxString* text);
    %Docstring
        write(text)
        
        Append text to the textctrl, for file-like compatibility.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStyledTextCtrl_write(sipCpp, text);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStyledTextCtrl_write(wxStyledTextCtrl* self, const wxString* text)
    {
        self->AppendText(*text);
    }
    %End

    void flush();
    %Docstring
        flush()
        
        NOP, for file-like compatibility.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxStyledTextCtrl_flush(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxStyledTextCtrl_flush(wxStyledTextCtrl* self)
    {
        
    }
    %End

    public:


    %Property(name=AdditionalCaretForeground, get=GetAdditionalCaretForeground, set=SetAdditionalCaretForeground)
    %Property(name=AdditionalCaretsBlink, get=GetAdditionalCaretsBlink, set=SetAdditionalCaretsBlink)
    %Property(name=AdditionalCaretsVisible, get=GetAdditionalCaretsVisible, set=SetAdditionalCaretsVisible)
    %Property(name=AdditionalSelAlpha, get=GetAdditionalSelAlpha, set=SetAdditionalSelAlpha)
    %Property(name=AdditionalSelectionTyping, get=GetAdditionalSelectionTyping, set=SetAdditionalSelectionTyping)
    %Property(name=AllLinesVisible, get=GetAllLinesVisible)
    %Property(name=Anchor, get=GetAnchor, set=SetAnchor)
    %Property(name=AutomaticFold, get=GetAutomaticFold, set=SetAutomaticFold)
    %Property(name=BackSpaceUnIndents, get=GetBackSpaceUnIndents, set=SetBackSpaceUnIndents)
    %Property(name=BufferedDraw, get=GetBufferedDraw, set=SetBufferedDraw)
    %Property(name=CaretForeground, get=GetCaretForeground, set=SetCaretForeground)
    %Property(name=CaretLineBackAlpha, get=GetCaretLineBackAlpha, set=SetCaretLineBackAlpha)
    %Property(name=CaretLineBackground, get=GetCaretLineBackground, set=SetCaretLineBackground)
    %Property(name=CaretLineVisible, get=GetCaretLineVisible, set=SetCaretLineVisible)
    %Property(name=CaretLineVisibleAlways, get=GetCaretLineVisibleAlways, set=SetCaretLineVisibleAlways)
    %Property(name=CaretPeriod, get=GetCaretPeriod, set=SetCaretPeriod)
    %Property(name=CaretSticky, get=GetCaretSticky, set=SetCaretSticky)
    %Property(name=CaretStyle, get=GetCaretStyle, set=SetCaretStyle)
    %Property(name=CaretWidth, get=GetCaretWidth, set=SetCaretWidth)
    %Property(name=CharacterPointer, get=GetCharacterPointer)
    %Property(name=CodePage, get=GetCodePage, set=SetCodePage)
    %Property(name=ControlCharSymbol, get=GetControlCharSymbol, set=SetControlCharSymbol)
    %Property(name=CurLine, get=GetCurLine)
    %Property(name=CurLineRaw, get=GetCurLineRaw)
    %Property(name=CurrentLine, get=GetCurrentLine)
    %Property(name=CurrentPos, get=GetCurrentPos, set=SetCurrentPos)
    %Property(name=DefaultStyle, get=GetDefaultStyle, set=SetDefaultStyle)
    %Property(name=DirectFunction, get=GetDirectFunction)
    %Property(name=DirectPointer, get=GetDirectPointer)
    %Property(name=DocPointer, get=GetDocPointer, set=SetDocPointer)
    %Property(name=EOLMode, get=GetEOLMode, set=SetEOLMode)
    %Property(name=EdgeColour, get=GetEdgeColour, set=SetEdgeColour)
    %Property(name=EdgeColumn, get=GetEdgeColumn, set=SetEdgeColumn)
    %Property(name=EdgeMode, get=GetEdgeMode, set=SetEdgeMode)
    %Property(name=EndAtLastLine, get=GetEndAtLastLine, set=SetEndAtLastLine)
    %Property(name=EndStyled, get=GetEndStyled)
    %Property(name=ExtraAscent, get=GetExtraAscent, set=SetExtraAscent)
    %Property(name=ExtraDescent, get=GetExtraDescent, set=SetExtraDescent)
    %Property(name=FirstVisibleLine, get=GetFirstVisibleLine, set=SetFirstVisibleLine)
    %Property(name=FontQuality, get=GetFontQuality, set=SetFontQuality)
    %Property(name=GapPosition, get=GetGapPosition)
    %Property(name=HighlightGuide, get=GetHighlightGuide, set=SetHighlightGuide)
    %Property(name=Hint, get=GetHint, set=SetHint)
    %Property(name=HotspotActiveBackground, get=GetHotspotActiveBackground)
    %Property(name=HotspotActiveForeground, get=GetHotspotActiveForeground)
    %Property(name=HotspotActiveUnderline, get=GetHotspotActiveUnderline, set=SetHotspotActiveUnderline)
    %Property(name=HotspotSingleLine, get=GetHotspotSingleLine, set=SetHotspotSingleLine)
    %Property(name=IMEInteraction, get=GetIMEInteraction, set=SetIMEInteraction)
    %Property(name=Identifier, get=GetIdentifier, set=SetIdentifier)
    %Property(name=IdleStyling, get=GetIdleStyling, set=SetIdleStyling)
    %Property(name=Indent, get=GetIndent, set=SetIndent)
    %Property(name=IndentationGuides, get=GetIndentationGuides, set=SetIndentationGuides)
    %Property(name=IndicatorCurrent, get=GetIndicatorCurrent, set=SetIndicatorCurrent)
    %Property(name=IndicatorValue, get=GetIndicatorValue, set=SetIndicatorValue)
    %Property(name=InsertionPoint, get=GetInsertionPoint, set=SetInsertionPoint)
    %Property(name=LastKeydownProcessed, get=GetLastKeydownProcessed, set=SetLastKeydownProcessed)
    %Property(name=LastPosition, get=GetLastPosition)
    %Property(name=LayoutCache, get=GetLayoutCache, set=SetLayoutCache)
    %Property(name=Length, get=GetLength)
    %Property(name=Lexer, get=GetLexer, set=SetLexer)
    %Property(name=LexerLanguage, get=GetLexerLanguage, set=SetLexerLanguage)
    %Property(name=LineCount, get=GetLineCount)
    %Property(name=LineEndTypesActive, get=GetLineEndTypesActive)
    %Property(name=LineEndTypesAllowed, get=GetLineEndTypesAllowed, set=SetLineEndTypesAllowed)
    %Property(name=LineEndTypesSupported, get=GetLineEndTypesSupported)
    %Property(name=MainSelection, get=GetMainSelection, set=SetMainSelection)
    %Property(name=MarginCount, get=GetMarginCount, set=SetMarginCount)
    %Property(name=MarginLeft, get=GetMarginLeft, set=SetMarginLeft)
    %Property(name=MarginOptions, get=GetMarginOptions, set=SetMarginOptions)
    %Property(name=MarginRight, get=GetMarginRight, set=SetMarginRight)
    %Property(name=Margins, get=GetMargins)
    %Property(name=MaxLineState, get=GetMaxLineState)
    %Property(name=ModEventMask, get=GetModEventMask, set=SetModEventMask)
    %Property(name=Modify, get=GetModify)
    %Property(name=MouseDownCaptures, get=GetMouseDownCaptures, set=SetMouseDownCaptures)
    %Property(name=MouseDwellTime, get=GetMouseDwellTime, set=SetMouseDwellTime)
    %Property(name=MouseSelectionRectangularSwitch, get=GetMouseSelectionRectangularSwitch, set=SetMouseSelectionRectangularSwitch)
    %Property(name=MouseWheelCaptures, get=GetMouseWheelCaptures, set=SetMouseWheelCaptures)
    %Property(name=MultiPaste, get=GetMultiPaste, set=SetMultiPaste)
    %Property(name=MultipleSelection, get=GetMultipleSelection, set=SetMultipleSelection)
    %Property(name=NumberOfLines, get=GetNumberOfLines)
    %Property(name=Overtype, get=GetOvertype, set=SetOvertype)
    %Property(name=PasteConvertEndings, get=GetPasteConvertEndings, set=SetPasteConvertEndings)
    %Property(name=PhasesDraw, get=GetPhasesDraw, set=SetPhasesDraw)
    %Property(name=PositionCacheSize, get=GetPositionCacheSize, set=SetPositionCacheSize)
    %Property(name=PrintColourMode, get=GetPrintColourMode, set=SetPrintColourMode)
    %Property(name=PrintMagnification, get=GetPrintMagnification, set=SetPrintMagnification)
    %Property(name=PrintWrapMode, get=GetPrintWrapMode, set=SetPrintWrapMode)
    %Property(name=PunctuationChars, get=GetPunctuationChars, set=SetPunctuationChars)
    %Property(name=RangePointer, get=GetRangePointer)
    %Property(name=ReadOnly, get=GetReadOnly, set=SetReadOnly)
    %Property(name=RectangularSelectionAnchor, get=GetRectangularSelectionAnchor, set=SetRectangularSelectionAnchor)
    %Property(name=RectangularSelectionAnchorVirtualSpace, get=GetRectangularSelectionAnchorVirtualSpace, set=SetRectangularSelectionAnchorVirtualSpace)
    %Property(name=RectangularSelectionCaret, get=GetRectangularSelectionCaret, set=SetRectangularSelectionCaret)
    %Property(name=RectangularSelectionCaretVirtualSpace, get=GetRectangularSelectionCaretVirtualSpace, set=SetRectangularSelectionCaretVirtualSpace)
    %Property(name=RectangularSelectionModifier, get=GetRectangularSelectionModifier, set=SetRectangularSelectionModifier)
    %Property(name=STCCursor, get=GetSTCCursor, set=SetSTCCursor)
    %Property(name=STCFocus, get=GetSTCFocus, set=SetSTCFocus)
    %Property(name=ScrollWidth, get=GetScrollWidth, set=SetScrollWidth)
    %Property(name=ScrollWidthTracking, get=GetScrollWidthTracking, set=SetScrollWidthTracking)
    %Property(name=SearchFlags, get=GetSearchFlags, set=SetSearchFlags)
    %Property(name=SelAlpha, get=GetSelAlpha, set=SetSelAlpha)
    %Property(name=SelEOLFilled, get=GetSelEOLFilled, set=SetSelEOLFilled)
    %Property(name=SelectedText, get=GetSelectedText)
    %Property(name=SelectedTextRaw, get=GetSelectedTextRaw)
    %Property(name=SelectionEmpty, get=GetSelectionEmpty)
    %Property(name=SelectionEnd, get=GetSelectionEnd, set=SetSelectionEnd)
    %Property(name=SelectionMode, get=GetSelectionMode, set=SetSelectionMode)
    %Property(name=SelectionStart, get=GetSelectionStart, set=SetSelectionStart)
    %Property(name=Selections, get=GetSelections)
    %Property(name=Status, get=GetStatus, set=SetStatus)
    %Property(name=StringSelection, get=GetStringSelection)
    %Property(name=StyleBits, get=GetStyleBits, set=SetStyleBits)
    %Property(name=StyleBitsNeeded, get=GetStyleBitsNeeded)
    %Property(name=SubStyleBases, get=GetSubStyleBases)
    %Property(name=TabDrawMode, get=GetTabDrawMode, set=SetTabDrawMode)
    %Property(name=TabIndents, get=GetTabIndents, set=SetTabIndents)
    %Property(name=TabWidth, get=GetTabWidth, set=SetTabWidth)
    %Property(name=TargetEnd, get=GetTargetEnd, set=SetTargetEnd)
    %Property(name=TargetStart, get=GetTargetStart, set=SetTargetStart)
    %Property(name=TargetText, get=GetTargetText)
    %Property(name=TargetTextRaw, get=GetTargetTextRaw)
    %Property(name=Technology, get=GetTechnology, set=SetTechnology)
    %Property(name=Text, get=GetText, set=SetText)
    %Property(name=TextLength, get=GetTextLength)
    %Property(name=TextRaw, get=GetTextRaw, set=SetTextRaw)
    %Property(name=TwoPhaseDraw, get=GetTwoPhaseDraw, set=SetTwoPhaseDraw)
    %Property(name=UndoCollection, get=GetUndoCollection, set=SetUndoCollection)
    %Property(name=UseAntiAliasing, get=GetUseAntiAliasing, set=SetUseAntiAliasing)
    %Property(name=UseHorizontalScrollBar, get=GetUseHorizontalScrollBar, set=SetUseHorizontalScrollBar)
    %Property(name=UseTabs, get=GetUseTabs, set=SetUseTabs)
    %Property(name=UseVerticalScrollBar, get=GetUseVerticalScrollBar, set=SetUseVerticalScrollBar)
    %Property(name=Value, get=GetValue, set=SetValue)
    %Property(name=ViewEOL, get=GetViewEOL, set=SetViewEOL)
    %Property(name=ViewWhiteSpace, get=GetViewWhiteSpace, set=SetViewWhiteSpace)
    %Property(name=VirtualSpaceOptions, get=GetVirtualSpaceOptions, set=SetVirtualSpaceOptions)
    %Property(name=WhitespaceChars, get=GetWhitespaceChars, set=SetWhitespaceChars)
    %Property(name=WhitespaceSize, get=GetWhitespaceSize, set=SetWhitespaceSize)
    %Property(name=WordChars, get=GetWordChars, set=SetWordChars)
    %Property(name=WrapIndentMode, get=GetWrapIndentMode, set=SetWrapIndentMode)
    %Property(name=WrapMode, get=GetWrapMode, set=SetWrapMode)
    %Property(name=WrapStartIndent, get=GetWrapStartIndent, set=SetWrapStartIndent)
    %Property(name=WrapVisualFlags, get=GetWrapVisualFlags, set=SetWrapVisualFlags)
    %Property(name=WrapVisualFlagsLocation, get=GetWrapVisualFlagsLocation, set=SetWrapVisualFlagsLocation)
    %Property(name=XOffset, get=GetXOffset, set=SetXOffset)
    %Property(name=Zoom, get=GetZoom, set=SetZoom)
};  // end of class wxStyledTextCtrl


class wxStyledTextEvent : wxCommandEvent
{
    %Docstring
        StyledTextEvent(commandType=0, id=0)
        StyledTextEvent(event)
        
        The type of events sent from wxStyledTextCtrl.
    %End
    %TypeHeaderCode
        #include <wx/stc/stc.h>
    %End

public:
    wxStyledTextEvent(
        wxEventType commandType = 0,
        int id = 0
    );

    wxStyledTextEvent(
        const wxStyledTextEvent & event
    );

    ~wxStyledTextEvent();

    bool GetAlt() const;
    %Docstring
        GetAlt() -> bool
        
        Returns true if the Alt key is pressed.
    %End

    int GetAnnotationsLinesAdded() const;
    %Docstring
        GetAnnotationsLinesAdded() -> int
        
        Returns the number of lines that have been added to or removed from an
        annotation.
    %End

    bool GetControl() const;
    %Docstring
        GetControl() -> bool
        
        Returns true if the Control key is pressed.
    %End

    int GetDragFlags();
    %Docstring
        GetDragFlags() -> int
        
        Returns flags for the drag operation associated with this event.
    %End

    wxDragResult GetDragResult();
    %Docstring
        GetDragResult() -> DragResult
        
        Returns drag result for this event.
    %End

    wxString GetDragText()   /Deprecated/;
    %Docstring
        GetDragText() -> String
    %End

    int GetFoldLevelNow() const;
    %Docstring
        GetFoldLevelNow() -> int
        
        Returns the current fold level for the line.
    %End

    int GetFoldLevelPrev() const;
    %Docstring
        GetFoldLevelPrev() -> int
        
        Returns previous fold level for the line.
    %End

    int GetKey() const;
    %Docstring
        GetKey() -> int
        
        Returns the key code of the key that generated this event.
    %End

    int GetLength() const;
    %Docstring
        GetLength() -> int
        
        Returns the length (number of characters) of this event.
    %End

    int GetLine() const;
    %Docstring
        GetLine() -> int
        
        Returns zero-based line number for this event.
    %End

    int GetLinesAdded() const;
    %Docstring
        GetLinesAdded() -> int
        
        Returns the number of lines added or deleted with this event.
    %End

    int GetListCompletionMethod() const;
    %Docstring
        GetListCompletionMethod() -> int
        
        Returns a value describing the action that closed the list.
    %End

    int GetListType() const;
    %Docstring
        GetListType() -> int
        
        Returns the list type for this event.
    %End

    int GetLParam() const;
    %Docstring
        GetLParam() -> int
        
        Returns the value of the LParam field for this event.
    %End

    int GetMargin() const;
    %Docstring
        GetMargin() -> int
        
        Returns the zero-based index of the margin that generated this event.
    %End

    int GetMessage() const;
    %Docstring
        GetMessage() -> int
        
        Returns a message number while a macro is being recorded.
    %End

    int GetModificationType() const;
    %Docstring
        GetModificationType() -> int
        
        Returns the modification type for this event.
    %End

    int GetModifiers() const;
    %Docstring
        GetModifiers() -> int
        
        Returns the modifiers of the key press or mouse click for this event.
    %End

    int GetPosition() const;
    %Docstring
        GetPosition() -> int
        
        Returns the zero-based text position associated this event.
    %End

    bool GetShift() const;
    %Docstring
        GetShift() -> bool
        
        Returns true if the Shift key is pressed.
    %End

    wxString GetText() const   /Deprecated/;
    %Docstring
        GetText() -> String
    %End

    int GetToken() const;
    %Docstring
        GetToken() -> int
        
        Returns the token value for this event.
    %End

    int GetUpdated() const;
    %Docstring
        GetUpdated() -> int
        
        Returns the value of the updated field for this event.
    %End

    int GetWParam() const;
    %Docstring
        GetWParam() -> int
        
        Returns value of the WParam field for this event.
    %End

    int GetX() const;
    %Docstring
        GetX() -> int
        
        Returns the X coordinate of the mouse for this event.
    %End

    int GetY() const;
    %Docstring
        GetY() -> int
        
        Returns the Y coordinate of the mouse for this event.
    %End

    void SetAnnotationLinesAdded(
        int val
    );
    %Docstring
        SetAnnotationLinesAdded(val)
        
        Sets the annotation lines added value for this event.
    %End

    void SetDragFlags(
        int flags
    );
    %Docstring
        SetDragFlags(flags)
        
        Sets the drag flags for this event.
    %End

    void SetDragResult(
        wxDragResult val
    );
    %Docstring
        SetDragResult(val)
        
        Sets the drag result for this event.
    %End

    void SetDragText(
        const wxString & val
    )   /Deprecated/;
    %Docstring
        SetDragText(val)
        
        Sets the drag text for this event.
    %End

    void SetFoldLevelNow(
        int val
    );
    %Docstring
        SetFoldLevelNow(val)
        
        Sets the current fold level for this event.
    %End

    void SetFoldLevelPrev(
        int val
    );
    %Docstring
        SetFoldLevelPrev(val)
        
        Sets the previous fold level for this event.
    %End

    void SetKey(
        int k
    );
    %Docstring
        SetKey(k)
        
        Sets the key code for this event.
    %End

    void SetLength(
        int len
    );
    %Docstring
        SetLength(len)
        
        Sets the length value for this event.
    %End

    void SetLine(
        int val
    );
    %Docstring
        SetLine(val)
        
        Sets line number for this event.
    %End

    void SetLinesAdded(
        int num
    );
    %Docstring
        SetLinesAdded(num)
        
        Sets the number of lines added for this event.
    %End

    void SetListCompletionMethod(
        int val
    );
    %Docstring
        SetListCompletionMethod(val)
        
        Sets the list completion method for this event.
    %End

    void SetListType(
        int val
    );
    %Docstring
        SetListType(val)
        
        Sets the list type for this event.
    %End

    void SetLParam(
        int val
    );
    %Docstring
        SetLParam(val)
        
        Sets value of the LParam field for this event.
    %End

    void SetMargin(
        int val
    );
    %Docstring
        SetMargin(val)
        
        Sets margin number for this event.
    %End

    void SetMessage(
        int val
    );
    %Docstring
        SetMessage(val)
        
        Sets message number for this event.
    %End

    void SetModificationType(
        int t
    );
    %Docstring
        SetModificationType(t)
        
        Sets the modification type for this event.
    %End

    void SetModifiers(
        int m
    );
    %Docstring
        SetModifiers(m)
        
        Sets the value of the modifiers field for this event.
    %End

    void SetPosition(
        int pos
    );
    %Docstring
        SetPosition(pos)
        
        Sets file position for this event.
    %End

    void SetText(
        const wxString & t
    )   /Deprecated/;
    %Docstring
        SetText(t)
        
        Sets the text for this event.
    %End

    void SetToken(
        int val
    );
    %Docstring
        SetToken(val)
        
        Sets the token for this event.
    %End

    void SetUpdated(
        int val
    );
    %Docstring
        SetUpdated(val)
        
        Sets the value of the updated field for this event.
    %End

    void SetWParam(
        int val
    );
    %Docstring
        SetWParam(val)
        
        Sets the value of the WParam field for this event.
    %End

    void SetX(
        int val
    );
    %Docstring
        SetX(val)
        
        Sets the X value for this event.
    %End

    void SetY(
        int val
    );
    %Docstring
        SetY(val)
        
        Sets the Y value for this event.
    %End

    public:
    virtual wxEvent* Clone() const /Factory/;


    private:
        wxStyledTextEvent& operator=(const wxStyledTextEvent&);


    public:


    %Property(name=Alt, get=GetAlt)
    %Property(name=AnnotationsLinesAdded, get=GetAnnotationsLinesAdded)
    %Property(name=Control, get=GetControl)
    %Property(name=DragFlags, get=GetDragFlags, set=SetDragFlags)
    %Property(name=DragResult, get=GetDragResult, set=SetDragResult)
    %Property(name=DragText, get=GetDragText, set=SetDragText)
    %Property(name=FoldLevelNow, get=GetFoldLevelNow, set=SetFoldLevelNow)
    %Property(name=FoldLevelPrev, get=GetFoldLevelPrev, set=SetFoldLevelPrev)
    %Property(name=Key, get=GetKey, set=SetKey)
    %Property(name=LParam, get=GetLParam, set=SetLParam)
    %Property(name=Length, get=GetLength, set=SetLength)
    %Property(name=Line, get=GetLine, set=SetLine)
    %Property(name=LinesAdded, get=GetLinesAdded, set=SetLinesAdded)
    %Property(name=ListCompletionMethod, get=GetListCompletionMethod, set=SetListCompletionMethod)
    %Property(name=ListType, get=GetListType, set=SetListType)
    %Property(name=Margin, get=GetMargin, set=SetMargin)
    %Property(name=Message, get=GetMessage, set=SetMessage)
    %Property(name=ModificationType, get=GetModificationType, set=SetModificationType)
    %Property(name=Modifiers, get=GetModifiers, set=SetModifiers)
    %Property(name=Position, get=GetPosition, set=SetPosition)
    %Property(name=Shift, get=GetShift)
    %Property(name=Text, get=GetText, set=SetText)
    %Property(name=Token, get=GetToken, set=SetToken)
    %Property(name=Updated, get=GetUpdated, set=SetUpdated)
    %Property(name=WParam, get=GetWParam, set=SetWParam)
    %Property(name=X, get=GetX, set=SetX)
    %Property(name=Y, get=GetY, set=SetY)
};  // end of class wxStyledTextEvent


%Extract(id=pycode_stc, order=10)
import wx
ID_ANY = wx.ID_ANY  # Needed for some parameter defaults in this module

%End

%Extract(id=pycode_stc)
EVT_STC_CHANGE = wx.PyEventBinder( wxEVT_STC_CHANGE, 1 )
EVT_STC_STYLENEEDED = wx.PyEventBinder( wxEVT_STC_STYLENEEDED, 1 )
EVT_STC_CHARADDED = wx.PyEventBinder( wxEVT_STC_CHARADDED, 1 )
EVT_STC_SAVEPOINTREACHED = wx.PyEventBinder( wxEVT_STC_SAVEPOINTREACHED, 1 )
EVT_STC_SAVEPOINTLEFT = wx.PyEventBinder( wxEVT_STC_SAVEPOINTLEFT, 1 )
EVT_STC_ROMODIFYATTEMPT = wx.PyEventBinder( wxEVT_STC_ROMODIFYATTEMPT, 1 )
EVT_STC_KEY = wx.PyEventBinder( wxEVT_STC_KEY, 1 )
EVT_STC_DOUBLECLICK = wx.PyEventBinder( wxEVT_STC_DOUBLECLICK, 1 )
EVT_STC_UPDATEUI = wx.PyEventBinder( wxEVT_STC_UPDATEUI, 1 )
EVT_STC_MODIFIED = wx.PyEventBinder( wxEVT_STC_MODIFIED, 1 )
EVT_STC_MACRORECORD = wx.PyEventBinder( wxEVT_STC_MACRORECORD, 1 )
EVT_STC_MARGINCLICK = wx.PyEventBinder( wxEVT_STC_MARGINCLICK, 1 )
EVT_STC_NEEDSHOWN = wx.PyEventBinder( wxEVT_STC_NEEDSHOWN, 1 )
EVT_STC_PAINTED = wx.PyEventBinder( wxEVT_STC_PAINTED, 1 )
EVT_STC_USERLISTSELECTION = wx.PyEventBinder( wxEVT_STC_USERLISTSELECTION, 1 )
EVT_STC_URIDROPPED = wx.PyEventBinder( wxEVT_STC_URIDROPPED, 1 )
EVT_STC_DWELLSTART = wx.PyEventBinder( wxEVT_STC_DWELLSTART, 1 )
EVT_STC_DWELLEND = wx.PyEventBinder( wxEVT_STC_DWELLEND, 1 )
EVT_STC_START_DRAG = wx.PyEventBinder( wxEVT_STC_START_DRAG, 1 )
EVT_STC_DRAG_OVER = wx.PyEventBinder( wxEVT_STC_DRAG_OVER, 1 )
EVT_STC_DO_DROP = wx.PyEventBinder( wxEVT_STC_DO_DROP, 1 )
EVT_STC_ZOOM = wx.PyEventBinder( wxEVT_STC_ZOOM, 1 )
EVT_STC_HOTSPOT_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_CLICK, 1 )
EVT_STC_HOTSPOT_DCLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_DCLICK, 1 )
EVT_STC_HOTSPOT_RELEASE_CLICK = wx.PyEventBinder( wxEVT_STC_HOTSPOT_RELEASE_CLICK, 1 )
EVT_STC_CALLTIP_CLICK = wx.PyEventBinder( wxEVT_STC_CALLTIP_CLICK, 1 )
EVT_STC_AUTOCOMP_SELECTION = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_SELECTION, 1 )
EVT_STC_INDICATOR_CLICK = wx.PyEventBinder( wxEVT_STC_INDICATOR_CLICK, 1 )
EVT_STC_INDICATOR_RELEASE = wx.PyEventBinder( wxEVT_STC_INDICATOR_RELEASE, 1 )
EVT_STC_AUTOCOMP_CANCELLED = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_CANCELLED, 1 )
EVT_STC_AUTOCOMP_CHAR_DELETED = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_CHAR_DELETED, 1 )
EVT_STC_CLIPBOARD_COPY = wx.PyEventBinder( wxEVT_STC_CLIPBOARD_COPY, 1)
EVT_STC_CLIPBOARD_PASTE = wx.PyEventBinder( wxEVT_STC_CLIPBOARD_PASTE, 1)
EVT_STC_AUTOCOMP_COMPLETED = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_COMPLETED, 1)
EVT_STC_MARGIN_RIGHT_CLICK = wx.PyEventBinder( wxEVT_STC_MARGIN_RIGHT_CLICK, 1)
EVT_STC_AUTOCOMP_SELECTION_CHANGE = wx.PyEventBinder( wxEVT_STC_AUTOCOMP_SELECTION_CHANGE, 1)

%End

%Extract(id=pycode_stc)
# compatibility aliases
STC_SCMOD_NORM = STC_KEYMOD_NORM
STC_SCMOD_SHIFT = STC_KEYMOD_SHIFT
STC_SCMOD_CTRL = STC_KEYMOD_CTRL
STC_SCMOD_ALT = STC_KEYMOD_ALT
STC_SCMOD_SUPER = STC_KEYMOD_SUPER
STC_SCMOD_META = STC_KEYMOD_META

%End


//---------------------------------------------------------------------------

