/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.7.9
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/image.h>
        #include <wx/dc.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextctrl.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/xml/xml.h>
        #include <wx/richtext/richtextxml.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextParagraphLayoutBox : public  ::wxRichTextParagraphLayoutBox
{
public:
    sipwxRichTextParagraphLayoutBox( ::wxRichTextObject*);
    sipwxRichTextParagraphLayoutBox(const  ::wxRichTextParagraphLayoutBox&);
    virtual ~sipwxRichTextParagraphLayoutBox();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool UpdateFloatingObjects(const  ::wxRect&, ::wxRichTextObject*) SIP_OVERRIDE;
    void InvalidateHierarchy(const  ::wxRichTextRange&) SIP_OVERRIDE;
    void DoInvalidate(const  ::wxRichTextRange&) SIP_OVERRIDE;
    const  ::wxRichTextAttr& GetBasicStyle() const SIP_OVERRIDE;
    void SetBasicStyle(const  ::wxRichTextAttr&) SIP_OVERRIDE;
    const  ::wxRichTextAttr& GetDefaultStyle() const SIP_OVERRIDE;
    bool SetDefaultStyle(const  ::wxRichTextAttr&) SIP_OVERRIDE;
     ::wxString GetText() const SIP_OVERRIDE;
    void UpdateRanges() SIP_OVERRIDE;
    bool ApplyStyleSheet( ::wxRichTextStyleSheet*) SIP_OVERRIDE;
    bool CopyFragment(const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&) SIP_OVERRIDE;
    bool InsertFragment(long, ::wxRichTextParagraphLayoutBox&) SIP_OVERRIDE;
    void PrepareContent( ::wxRichTextParagraphLayoutBox&) SIP_OVERRIDE;
    bool HasParagraphAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const SIP_OVERRIDE;
    bool HasCharacterAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const SIP_OVERRIDE;
    bool SetObjectPropertiesWithUndo( ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*) SIP_OVERRIDE;
    bool SetProperties(const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int) SIP_OVERRIDE;
    bool FindNextParagraphNumber( ::wxRichTextParagraph*, ::wxRichTextAttr&) const SIP_OVERRIDE;
    bool DoNumberList(const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int) SIP_OVERRIDE;
    bool ClearListStyle(const  ::wxRichTextRange&,int) SIP_OVERRIDE;
    bool GetStyleForRange(const  ::wxRichTextRange&, ::wxRichTextAttr&) SIP_OVERRIDE;
    bool DoGetStyle(long, ::wxRichTextAttr&,bool) SIP_OVERRIDE;
    bool GetUncombinedStyle(long, ::wxRichTextAttr&) SIP_OVERRIDE;
    bool GetStyle(long, ::wxRichTextAttr&) SIP_OVERRIDE;
    void SetStyle( ::wxRichTextObject*,const  ::wxRichTextAttr&,int) SIP_OVERRIDE;
    bool SetStyle(const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int) SIP_OVERRIDE;
    bool PositionToXY(long,long*,long*) const SIP_OVERRIDE;
    long XYToPosition(long,long) const SIP_OVERRIDE;
     ::wxString GetParagraphText(long) const SIP_OVERRIDE;
    int GetLineCount() const SIP_OVERRIDE;
    int GetParagraphCount() const SIP_OVERRIDE;
    int GetParagraphLength(long) const SIP_OVERRIDE;
     ::wxRichTextParagraph* GetParagraphForLine( ::wxRichTextLine*) const SIP_OVERRIDE;
     ::wxRichTextParagraph* GetParagraphAtLine(long) const SIP_OVERRIDE;
     ::wxRichTextObject* GetLeafObjectAtPosition(long) const SIP_OVERRIDE;
     ::wxRichTextLine* GetLineForVisibleLineNumber(long) const SIP_OVERRIDE;
    long GetVisibleLineNumber(long,bool,bool) const SIP_OVERRIDE;
     ::wxSize GetLineSizeAtPosition(long,bool) const SIP_OVERRIDE;
     ::wxRichTextParagraph* GetParagraphAtPosition(long,bool) const SIP_OVERRIDE;
     ::wxRichTextLine* GetLineAtYPosition(int) const SIP_OVERRIDE;
     ::wxRichTextLine* GetLineAtPosition(long,bool) const SIP_OVERRIDE;
     ::wxRichTextRange AddParagraphs(const  ::wxString&, ::wxRichTextAttr*) SIP_OVERRIDE;
     ::wxRichTextRange AddImage(const  ::wxImage&, ::wxRichTextAttr*) SIP_OVERRIDE;
     ::wxRichTextRange AddParagraph(const  ::wxString&, ::wxRichTextAttr*) SIP_OVERRIDE;
    void Reset() SIP_OVERRIDE;
    void Clear() SIP_OVERRIDE;
     ::wxRichTextStyleSheet* GetStyleSheet() const SIP_OVERRIDE;
    bool PromoteList(int,const  ::wxRichTextRange&,const  ::wxString&,int,int) SIP_OVERRIDE;
    bool PromoteList(int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int) SIP_OVERRIDE;
    bool NumberList(const  ::wxRichTextRange&,const  ::wxString&,int,int,int) SIP_OVERRIDE;
    bool NumberList(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int) SIP_OVERRIDE;
    bool SetListStyle(const  ::wxRichTextRange&,const  ::wxString&,int,int,int) SIP_OVERRIDE;
    bool SetListStyle(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int) SIP_OVERRIDE;
    void Move(const  ::wxPoint&) SIP_OVERRIDE;
     ::wxRichTextObject* Clone() const SIP_OVERRIDE;
    void Show(bool) SIP_OVERRIDE;
    bool IsTopLevel() const SIP_OVERRIDE;
    bool AdjustAttributes( ::wxRichTextAttr&, ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool LayoutToBestSize( ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
     ::wxRect GetAvailableContentArea( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&) const SIP_OVERRIDE;
    int GetBottomMargin() const SIP_OVERRIDE;
    int GetTopMargin() const SIP_OVERRIDE;
    int GetRightMargin() const SIP_OVERRIDE;
    int GetLeftMargin() const SIP_OVERRIDE;
    void SetMargins(int,int,int,int) SIP_OVERRIDE;
    void SetMargins(int) SIP_OVERRIDE;
     ::wxRichTextParagraphLayoutBox* GetParentContainer() const SIP_OVERRIDE;
     ::wxRichTextParagraphLayoutBox* GetContainer() const SIP_OVERRIDE;
    void SetParent( ::wxRichTextObject*) SIP_OVERRIDE;
     ::wxRichTextObject* GetParent() const SIP_OVERRIDE;
    bool IsAtomic() const SIP_OVERRIDE;
    bool IsComposite() const SIP_OVERRIDE;
     ::wxRect GetRect() const SIP_OVERRIDE;
     ::wxPoint GetAbsolutePosition() const SIP_OVERRIDE;
    void SetPosition(const  ::wxPoint&) SIP_OVERRIDE;
     ::wxPoint GetPosition() const SIP_OVERRIDE;
     ::wxTextAttrSize GetNaturalSize() const SIP_OVERRIDE;
    void SetMinSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetMinSize() const SIP_OVERRIDE;
    void SetMaxSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetMaxSize() const SIP_OVERRIDE;
    void SetCachedSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetCachedSize() const SIP_OVERRIDE;
     ::wxRichTextSelection GetSelection(long,long) const SIP_OVERRIDE;
    bool HandlesChildSelections() const SIP_OVERRIDE;
    void Invalidate(const  ::wxRichTextRange&) SIP_OVERRIDE;
     ::wxString GetXMLNodeName() const SIP_OVERRIDE;
    bool UsesParagraphAttributes() const SIP_OVERRIDE;
    bool ImportFromXML( ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*) SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
     ::wxString GetPropertiesMenuLabel() const SIP_OVERRIDE;
    bool EditProperties( ::wxWindow*, ::wxRichTextBuffer*) SIP_OVERRIDE;
    bool CanEditProperties() const SIP_OVERRIDE;
     ::wxRichTextObject* Split( ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool CanSplit( ::wxRichTextDrawingContext&) const SIP_OVERRIDE;
    bool Merge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool CanMerge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) const SIP_OVERRIDE;
     ::wxString GetTextForRange(const  ::wxRichTextRange&) const SIP_OVERRIDE;
    int GetFloatDirection() const SIP_OVERRIDE;
    bool IsFloating() const SIP_OVERRIDE;
    bool IsFloatable() const SIP_OVERRIDE;
    bool IsEmpty() const SIP_OVERRIDE;
    bool DeleteRange(const  ::wxRichTextRange&) SIP_OVERRIDE;
    void CalculateRange(long,long&) SIP_OVERRIDE;
     ::wxRichTextObject* DoSplit(long) SIP_OVERRIDE;
    bool GetRangeSize(const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*) const SIP_OVERRIDE;
     ::wxSize GetBestSize() const SIP_OVERRIDE;
    bool FindPosition( ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool) SIP_OVERRIDE;
    int HitTest( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int) SIP_OVERRIDE;
    bool Layout( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
    bool Draw( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int) SIP_OVERRIDE;
     ::wxRichTextObject* GetChildAtPosition(long) const SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextParagraphLayoutBox(const sipwxRichTextParagraphLayoutBox &);
    sipwxRichTextParagraphLayoutBox &operator = (const sipwxRichTextParagraphLayoutBox &);

    char sipPyMethods[112];
};

sipwxRichTextParagraphLayoutBox::sipwxRichTextParagraphLayoutBox( ::wxRichTextObject*parent):  ::wxRichTextParagraphLayoutBox(parent), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextParagraphLayoutBox::sipwxRichTextParagraphLayoutBox(const  ::wxRichTextParagraphLayoutBox& obj):  ::wxRichTextParagraphLayoutBox(obj), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextParagraphLayoutBox::~sipwxRichTextParagraphLayoutBox()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxRichTextParagraphLayoutBox::UpdateFloatingObjects(const  ::wxRect& availableRect, ::wxRichTextObject*untilObj)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_UpdateFloatingObjects);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::UpdateFloatingObjects(availableRect,untilObj);

    extern bool sipVH__richtext_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&, ::wxRichTextObject*);

    return sipVH__richtext_73(sipGILState, 0, sipPySelf, sipMeth, availableRect, untilObj);
}

void sipwxRichTextParagraphLayoutBox::InvalidateHierarchy(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_InvalidateHierarchy);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::InvalidateHierarchy(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

void sipwxRichTextParagraphLayoutBox::DoInvalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_DoInvalidate);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::DoInvalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

const  ::wxRichTextAttr& sipwxRichTextParagraphLayoutBox::GetBasicStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBasicStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetBasicStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetBasicStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_SetBasicStyle);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetBasicStyle(style);
        return;
    }

    extern void sipVH__richtext_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    sipVH__richtext_72(sipGILState, 0, sipPySelf, sipMeth, style);
}

const  ::wxRichTextAttr& sipwxRichTextParagraphLayoutBox::GetDefaultStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetDefaultStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::SetDefaultStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_SetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::SetDefaultStyle(style);

    extern bool sipVH__richtext_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    return sipVH__richtext_70(sipGILState, 0, sipPySelf, sipMeth, style);
}

 ::wxString sipwxRichTextParagraphLayoutBox::GetText() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[7]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetText);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetText();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::UpdateRanges()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_UpdateRanges);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::UpdateRanges();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::ApplyStyleSheet( ::wxRichTextStyleSheet*styleSheet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_ApplyStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::ApplyStyleSheet(styleSheet);

    extern bool sipVH__richtext_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextStyleSheet*);

    return sipVH__richtext_69(sipGILState, 0, sipPySelf, sipMeth, styleSheet);
}

bool sipwxRichTextParagraphLayoutBox::CopyFragment(const  ::wxRichTextRange& range, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_CopyFragment);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::CopyFragment(range,fragment);

    extern bool sipVH__richtext_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_68(sipGILState, 0, sipPySelf, sipMeth, range, fragment);
}

bool sipwxRichTextParagraphLayoutBox::InsertFragment(long position, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_InsertFragment);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::InsertFragment(position,fragment);

    extern bool sipVH__richtext_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_67(sipGILState, 0, sipPySelf, sipMeth, position, fragment);
}

void sipwxRichTextParagraphLayoutBox::PrepareContent( ::wxRichTextParagraphLayoutBox& container)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_PrepareContent);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::PrepareContent(container);
        return;
    }

    extern void sipVH__richtext_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraphLayoutBox&);

    sipVH__richtext_66(sipGILState, 0, sipPySelf, sipMeth, container);
}

bool sipwxRichTextParagraphLayoutBox::HasParagraphAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_HasParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::HasParagraphAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextParagraphLayoutBox::HasCharacterAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_HasCharacterAttributes);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::HasCharacterAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextParagraphLayoutBox::SetObjectPropertiesWithUndo( ::wxRichTextObject& obj,const  ::wxRichTextProperties& properties, ::wxRichTextObject*objToSet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_SetObjectPropertiesWithUndo);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::SetObjectPropertiesWithUndo(obj,properties,objToSet);

    extern bool sipVH__richtext_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*);

    return sipVH__richtext_64(sipGILState, 0, sipPySelf, sipMeth, obj, properties, objToSet);
}

bool sipwxRichTextParagraphLayoutBox::SetProperties(const  ::wxRichTextRange& range,const  ::wxRichTextProperties& properties,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_SetProperties);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::SetProperties(range,properties,flags);

    extern bool sipVH__richtext_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int);

    return sipVH__richtext_63(sipGILState, 0, sipPySelf, sipMeth, range, properties, flags);
}

bool sipwxRichTextParagraphLayoutBox::FindNextParagraphNumber( ::wxRichTextParagraph*previousParagraph, ::wxRichTextAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_FindNextParagraphNumber);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::FindNextParagraphNumber(previousParagraph,attr);

    extern bool sipVH__richtext_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraph*, ::wxRichTextAttr&);

    return sipVH__richtext_62(sipGILState, 0, sipPySelf, sipMeth, previousParagraph, attr);
}

bool sipwxRichTextParagraphLayoutBox::DoNumberList(const  ::wxRichTextRange& range,const  ::wxRichTextRange& promotionRange,int promoteBy, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_DoNumberList);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::DoNumberList(range,promotionRange,promoteBy,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_61(sipGILState, 0, sipPySelf, sipMeth, range, promotionRange, promoteBy, styleDef, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextParagraphLayoutBox::ClearListStyle(const  ::wxRichTextRange& range,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_ClearListStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::ClearListStyle(range,flags);

    extern bool sipVH__richtext_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,int);

    return sipVH__richtext_60(sipGILState, 0, sipPySelf, sipMeth, range, flags);
}

bool sipwxRichTextParagraphLayoutBox::GetStyleForRange(const  ::wxRichTextRange& range, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_GetStyleForRange);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetStyleForRange(range,style);

    extern bool sipVH__richtext_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextAttr&);

    return sipVH__richtext_59(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextParagraphLayoutBox::DoGetStyle(long position, ::wxRichTextAttr& style,bool combineStyles)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_DoGetStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::DoGetStyle(position,style,combineStyles);

    extern bool sipVH__richtext_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&,bool);

    return sipVH__richtext_58(sipGILState, 0, sipPySelf, sipMeth, position, style, combineStyles);
}

bool sipwxRichTextParagraphLayoutBox::GetUncombinedStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_GetUncombinedStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetUncombinedStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

bool sipwxRichTextParagraphLayoutBox::GetStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_GetStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

void sipwxRichTextParagraphLayoutBox::SetStyle( ::wxRichTextObject*obj,const  ::wxRichTextAttr& textAttr,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_SetStyle);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetStyle(obj,textAttr,flags);
        return;
    }

    extern void sipVH__richtext_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*,const  ::wxRichTextAttr&,int);

    sipVH__richtext_56(sipGILState, 0, sipPySelf, sipMeth, obj, textAttr, flags);
}

bool sipwxRichTextParagraphLayoutBox::SetStyle(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_SetStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::SetStyle(range,style,flags);

    extern bool sipVH__richtext_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int);

    return sipVH__richtext_55(sipGILState, 0, sipPySelf, sipMeth, range, style, flags);
}

bool sipwxRichTextParagraphLayoutBox::PositionToXY(long pos,long*x,long*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_PositionToXY);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::PositionToXY(pos,x,y);

    extern bool sipVH__richtext_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long*,long*);

    return sipVH__richtext_54(sipGILState, 0, sipPySelf, sipMeth, pos, x, y);
}

long sipwxRichTextParagraphLayoutBox::XYToPosition(long x,long y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[27]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_XYToPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::XYToPosition(x,y);

    extern long sipVH__richtext_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_53(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

 ::wxString sipwxRichTextParagraphLayoutBox::GetParagraphText(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[28]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphText);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParagraphText(paragraphNumber);

    extern  ::wxString sipVH__richtext_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_52(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

int sipwxRichTextParagraphLayoutBox::GetLineCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[29]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineCount);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLineCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraphLayoutBox::GetParagraphCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[30]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphCount);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParagraphCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraphLayoutBox::GetParagraphLength(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[31]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphLength);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParagraphLength(paragraphNumber);

    extern int sipVH__richtext_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_51(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

 ::wxRichTextParagraph* sipwxRichTextParagraphLayoutBox::GetParagraphForLine( ::wxRichTextLine*line) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphForLine);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParagraphForLine(line);

    extern  ::wxRichTextParagraph* sipVH__richtext_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextLine*);

    return sipVH__richtext_50(sipGILState, 0, sipPySelf, sipMeth, line);
}

 ::wxRichTextParagraph* sipwxRichTextParagraphLayoutBox::GetParagraphAtLine(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphAtLine);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParagraphAtLine(paragraphNumber);

    extern  ::wxRichTextParagraph* sipVH__richtext_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_49(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

 ::wxRichTextObject* sipwxRichTextParagraphLayoutBox::GetLeafObjectAtPosition(long position) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLeafObjectAtPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLeafObjectAtPosition(position);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, position);
}

 ::wxRichTextLine* sipwxRichTextParagraphLayoutBox::GetLineForVisibleLineNumber(long lineNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[35]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineForVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLineForVisibleLineNumber(lineNumber);

    extern  ::wxRichTextLine* sipVH__richtext_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_48(sipGILState, 0, sipPySelf, sipMeth, lineNumber);
}

long sipwxRichTextParagraphLayoutBox::GetVisibleLineNumber(long pos,bool caretPosition,bool startOfLine) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetVisibleLineNumber(pos,caretPosition,startOfLine);

    extern long sipVH__richtext_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool,bool);

    return sipVH__richtext_47(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition, startOfLine);
}

 ::wxSize sipwxRichTextParagraphLayoutBox::GetLineSizeAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[37]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineSizeAtPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLineSizeAtPosition(pos,caretPosition);

    extern  ::wxSize sipVH__richtext_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_46(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextParagraph* sipwxRichTextParagraphLayoutBox::GetParagraphAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphAtPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParagraphAtPosition(pos,caretPosition);

    extern  ::wxRichTextParagraph* sipVH__richtext_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_45(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextLine* sipwxRichTextParagraphLayoutBox::GetLineAtYPosition(int y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[39]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineAtYPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLineAtYPosition(y);

    extern  ::wxRichTextLine* sipVH__richtext_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__richtext_44(sipGILState, 0, sipPySelf, sipMeth, y);
}

 ::wxRichTextLine* sipwxRichTextParagraphLayoutBox::GetLineAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[40]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineAtPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLineAtPosition(pos,caretPosition);

    extern  ::wxRichTextLine* sipVH__richtext_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_43(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextRange sipwxRichTextParagraphLayoutBox::AddParagraphs(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_AddParagraphs);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::AddParagraphs(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

 ::wxRichTextRange sipwxRichTextParagraphLayoutBox::AddImage(const  ::wxImage& image, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_AddImage);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::AddImage(image,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxImage&, ::wxRichTextAttr*);

    return sipVH__richtext_42(sipGILState, 0, sipPySelf, sipMeth, image, paraStyle);
}

 ::wxRichTextRange sipwxRichTextParagraphLayoutBox::AddParagraph(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_AddParagraph);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::AddParagraph(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

void sipwxRichTextParagraphLayoutBox::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_Reset);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::Reset();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[45], &sipPySelf, SIP_NULLPTR, sipName_Clear);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::Clear();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextStyleSheet* sipwxRichTextParagraphLayoutBox::GetStyleSheet() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetStyleSheet();

    extern  ::wxRichTextStyleSheet* sipVH__richtext_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_39(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::PromoteList(int promoteBy,const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::PromoteList(promoteBy,range,defName,flags,specifiedLevel);

    extern bool sipVH__richtext_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&,const  ::wxString&,int,int);

    return sipVH__richtext_38(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, defName, flags, specifiedLevel);
}

bool sipwxRichTextParagraphLayoutBox::PromoteList(int promoteBy,const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::PromoteList(promoteBy,range,def,flags,specifiedLevel);

    extern bool sipVH__richtext_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int);

    return sipVH__richtext_37(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, def, flags, specifiedLevel);
}

bool sipwxRichTextParagraphLayoutBox::NumberList(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::NumberList(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextParagraphLayoutBox::NumberList(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::NumberList(range,def,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, def, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextParagraphLayoutBox::SetListStyle(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::SetListStyle(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextParagraphLayoutBox::SetListStyle(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[52], &sipPySelf, SIP_NULLPTR, sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::SetListStyle(range,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, styleDef, flags, startFrom, specifiedLevel);
}

void sipwxRichTextParagraphLayoutBox::Move(const  ::wxPoint& pt)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_Move);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::Move(pt);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pt);
}

 ::wxRichTextObject* sipwxRichTextParagraphLayoutBox::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[54]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_Clone);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::Clone();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::Show(bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[55], &sipPySelf, SIP_NULLPTR, sipName_Show);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::Show(show);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, show);
}

bool sipwxRichTextParagraphLayoutBox::IsTopLevel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[56]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::IsTopLevel();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::AdjustAttributes( ::wxRichTextAttr& attr, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[57], &sipPySelf, SIP_NULLPTR, sipName_AdjustAttributes);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::AdjustAttributes(attr,context);

    extern bool sipVH__richtext_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAttr&, ::wxRichTextDrawingContext&);

    return sipVH__richtext_32(sipGILState, 0, sipPySelf, sipMeth, attr, context);
}

bool sipwxRichTextParagraphLayoutBox::LayoutToBestSize( ::wxDC& dc, ::wxRichTextDrawingContext& context, ::wxRichTextBuffer*buffer,const  ::wxRichTextAttr& parentAttr,const  ::wxRichTextAttr& attr,const  ::wxRect& availableParentSpace,const  ::wxRect& availableContainerSpace,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[58], &sipPySelf, SIP_NULLPTR, sipName_LayoutToBestSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::LayoutToBestSize(dc,context,buffer,parentAttr,attr,availableParentSpace,availableContainerSpace,style);

    extern bool sipVH__richtext_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_31(sipGILState, 0, sipPySelf, sipMeth, dc, context, buffer, parentAttr, attr, availableParentSpace, availableContainerSpace, style);
}

 ::wxRect sipwxRichTextParagraphLayoutBox::GetAvailableContentArea( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& outerRect) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[59]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetAvailableContentArea);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetAvailableContentArea(dc,context,outerRect);

    extern  ::wxRect sipVH__richtext_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&);

    return sipVH__richtext_30(sipGILState, 0, sipPySelf, sipMeth, dc, context, outerRect);
}

int sipwxRichTextParagraphLayoutBox::GetBottomMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[60]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBottomMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetBottomMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraphLayoutBox::GetTopMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[61]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetTopMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetTopMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraphLayoutBox::GetRightMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[62]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetRightMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetRightMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextParagraphLayoutBox::GetLeftMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[63]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLeftMargin);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetLeftMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetMargins(int leftMargin,int rightMargin,int topMargin,int bottomMargin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[64], &sipPySelf, SIP_NULLPTR, sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetMargins(leftMargin,rightMargin,topMargin,bottomMargin);
        return;
    }

    extern void sipVH__richtext_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__richtext_29(sipGILState, 0, sipPySelf, sipMeth, leftMargin, rightMargin, topMargin, bottomMargin);
}

void sipwxRichTextParagraphLayoutBox::SetMargins(int margin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[65], &sipPySelf, SIP_NULLPTR, sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetMargins(margin);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, margin);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextParagraphLayoutBox::GetParentContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[66]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParentContainer);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParentContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextParagraphLayoutBox::GetContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[67]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetContainer);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetParent( ::wxRichTextObject*parent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[68], &sipPySelf, SIP_NULLPTR, sipName_SetParent);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetParent(parent);
        return;
    }

    extern void sipVH__richtext_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    sipVH__richtext_26(sipGILState, 0, sipPySelf, sipMeth, parent);
}

 ::wxRichTextObject* sipwxRichTextParagraphLayoutBox::GetParent() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[69]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParent);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetParent();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::IsAtomic() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[70]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsAtomic);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::IsAtomic();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::IsComposite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[71]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsComposite);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::IsComposite();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextParagraphLayoutBox::GetRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[72]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetRect);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetRect();

    extern  ::wxRect sipVH__richtext_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_24(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxRichTextParagraphLayoutBox::GetAbsolutePosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[73]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetAbsolutePosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetAbsolutePosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetPosition(const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[74], &sipPySelf, SIP_NULLPTR, sipName_SetPosition);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetPosition(pos);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxPoint sipwxRichTextParagraphLayoutBox::GetPosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[75]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetPosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxTextAttrSize sipwxRichTextParagraphLayoutBox::GetNaturalSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[76]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetNaturalSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetNaturalSize();

    extern  ::wxTextAttrSize sipVH__richtext_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_21(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetMinSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[77], &sipPySelf, SIP_NULLPTR, sipName_SetMinSize);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetMinSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextParagraphLayoutBox::GetMinSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[78]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetMinSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetMinSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetMaxSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[79], &sipPySelf, SIP_NULLPTR, sipName_SetMaxSize);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetMaxSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextParagraphLayoutBox::GetMaxSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[80]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetMaxSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetMaxSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::SetCachedSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[81], &sipPySelf, SIP_NULLPTR, sipName_SetCachedSize);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::SetCachedSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextParagraphLayoutBox::GetCachedSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[82]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetCachedSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetCachedSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextSelection sipwxRichTextParagraphLayoutBox::GetSelection(long start,long end) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[83]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetSelection);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetSelection(start,end);

    extern  ::wxRichTextSelection sipVH__richtext_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_19(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

bool sipwxRichTextParagraphLayoutBox::HandlesChildSelections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[84]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_HandlesChildSelections);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::HandlesChildSelections();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextParagraphLayoutBox::Invalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[85], &sipPySelf, SIP_NULLPTR, sipName_Invalidate);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::Invalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

 ::wxString sipwxRichTextParagraphLayoutBox::GetXMLNodeName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[86]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetXMLNodeName);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetXMLNodeName();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::UsesParagraphAttributes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[87]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_UsesParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::UsesParagraphAttributes();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::ImportFromXML( ::wxRichTextBuffer*buffer, ::wxXmlNode*node, ::wxRichTextXMLHandler*handler,bool*recurse)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[88], &sipPySelf, SIP_NULLPTR, sipName_ImportFromXML);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::ImportFromXML(buffer,node,handler,recurse);

    extern bool sipVH__richtext_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);

    return sipVH__richtext_17(sipGILState, 0, sipPySelf, sipMeth, buffer, node, handler, recurse);
}

bool sipwxRichTextParagraphLayoutBox::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[89]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::AcceptsFocus();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextParagraphLayoutBox::GetPropertiesMenuLabel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[90]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetPropertiesMenuLabel);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetPropertiesMenuLabel();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::EditProperties( ::wxWindow*parent, ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[91], &sipPySelf, SIP_NULLPTR, sipName_EditProperties);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::EditProperties(parent,buffer);

    extern bool sipVH__richtext_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRichTextBuffer*);

    return sipVH__richtext_15(sipGILState, 0, sipPySelf, sipMeth, parent, buffer);
}

bool sipwxRichTextParagraphLayoutBox::CanEditProperties() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[92]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanEditProperties);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::CanEditProperties();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextObject* sipwxRichTextParagraphLayoutBox::Split( ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[93], &sipPySelf, SIP_NULLPTR, sipName_Split);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::Split(context);

    extern  ::wxRichTextObject* sipVH__richtext_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_14(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextParagraphLayoutBox::CanSplit( ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[94]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanSplit);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::CanSplit(context);

    extern bool sipVH__richtext_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_13(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextParagraphLayoutBox::Merge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[95], &sipPySelf, SIP_NULLPTR, sipName_Merge);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::Merge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextParagraphLayoutBox::CanMerge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[96]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanMerge);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::CanMerge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

 ::wxString sipwxRichTextParagraphLayoutBox::GetTextForRange(const  ::wxRichTextRange& range) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[97]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetTextForRange);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetTextForRange(range);

    extern  ::wxString sipVH__richtext_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_11(sipGILState, 0, sipPySelf, sipMeth, range);
}

int sipwxRichTextParagraphLayoutBox::GetFloatDirection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[98]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetFloatDirection);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetFloatDirection();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::IsFloating() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[99]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsFloating);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::IsFloating();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::IsFloatable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[100]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsFloatable);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::IsFloatable();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::IsEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[101]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsEmpty);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::IsEmpty();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::DeleteRange(const  ::wxRichTextRange& range)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[102], &sipPySelf, SIP_NULLPTR, sipName_DeleteRange);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::DeleteRange(range);

    extern bool sipVH__richtext_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_8(sipGILState, 0, sipPySelf, sipMeth, range);
}

void sipwxRichTextParagraphLayoutBox::CalculateRange(long start,long& end)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[103], &sipPySelf, SIP_NULLPTR, sipName_CalculateRange);

    if (!sipMeth)
    {
         ::wxRichTextParagraphLayoutBox::CalculateRange(start,end);
        return;
    }

    extern void sipVH__richtext_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long&);

    sipVH__richtext_7(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

 ::wxRichTextObject* sipwxRichTextParagraphLayoutBox::DoSplit(long pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[104], &sipPySelf, SIP_NULLPTR, sipName_DoSplit);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::DoSplit(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

bool sipwxRichTextParagraphLayoutBox::GetRangeSize(const  ::wxRichTextRange& range, ::wxSize& size,int& descent, ::wxDC& dc, ::wxRichTextDrawingContext& context,int flags,const  ::wxPoint& position,const  ::wxSize& parentSize, ::wxArrayInt*partialExtents) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[105]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetRangeSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetRangeSize(range,size,descent,dc,context,flags,position,parentSize,partialExtents);

    extern bool sipVH__richtext_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*);

    return sipVH__richtext_5(sipGILState, 0, sipPySelf, sipMeth, range, size, descent, dc, context, flags, position, parentSize, partialExtents);
}

 ::wxSize sipwxRichTextParagraphLayoutBox::GetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[106]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBestSize);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetBestSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextParagraphLayoutBox::FindPosition( ::wxDC& dc, ::wxRichTextDrawingContext& context,long index, ::wxPoint& pt,int*height,bool forceLineStart)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[107], &sipPySelf, SIP_NULLPTR, sipName_FindPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::FindPosition(dc,context,index,pt,height,forceLineStart);

    extern bool sipVH__richtext_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);

    return sipVH__richtext_3(sipGILState, 0, sipPySelf, sipMeth, dc, context, index, pt, height, forceLineStart);
}

int sipwxRichTextParagraphLayoutBox::HitTest( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxPoint& pt,long& textPosition, ::wxRichTextObject**obj, ::wxRichTextObject**contextObj,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[108], &sipPySelf, SIP_NULLPTR, sipName_HitTest);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::HitTest(dc,context,pt,textPosition,obj,contextObj,flags);

    extern int sipVH__richtext_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);

    return sipVH__richtext_2(sipGILState, 0, sipPySelf, sipMeth, dc, context, pt, textPosition, obj, contextObj, flags);
}

bool sipwxRichTextParagraphLayoutBox::Layout( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& rect,const  ::wxRect& parentRect,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[109], &sipPySelf, SIP_NULLPTR, sipName_Layout);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::Layout(dc,context,rect,parentRect,style);

    extern bool sipVH__richtext_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_1(sipGILState, 0, sipPySelf, sipMeth, dc, context, rect, parentRect, style);
}

bool sipwxRichTextParagraphLayoutBox::Draw( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRichTextRange& range,const  ::wxRichTextSelection& selection,const  ::wxRect& rect,int descent,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[110], &sipPySelf, SIP_NULLPTR, sipName_Draw);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::Draw(dc,context,range,selection,rect,descent,style);

    extern bool sipVH__richtext_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);

    return sipVH__richtext_0(sipGILState, 0, sipPySelf, sipMeth, dc, context, range, selection, rect, descent, style);
}

 ::wxRichTextObject* sipwxRichTextParagraphLayoutBox::GetChildAtPosition(long pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[111]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetChildAtPosition);

    if (!sipMeth)
        return  ::wxRichTextParagraphLayoutBox::GetChildAtPosition(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetListStyle, "SetListStyle(range, styleDef, flags=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom=1, specifiedLevel=-1) -> bool\n"
"SetListStyle(range, defName, flags=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom=1, specifiedLevel=-1) -> bool\n"
"\n"
"Sets the list attributes for the given range, passing flags to\n"
"determine how the attributes are set.\n"
"");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetListStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetListStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextListStyleDefinition* styleDef;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int startFrom = 1;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_styleDef,
            sipName_flags,
            sipName_startFrom,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8|iii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextListStyleDefinition, &styleDef, &flags, &startFrom, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetListStyle(*range,styleDef,flags,startFrom,specifiedLevel) : sipCpp->SetListStyle(*range,styleDef,flags,startFrom,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxString* defName;
        int defNameState = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int startFrom = 1;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_defName,
            sipName_flags,
            sipName_startFrom,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|iii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxString, &defName, &defNameState, &flags, &startFrom, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetListStyle(*range,*defName,flags,startFrom,specifiedLevel) : sipCpp->SetListStyle(*range,*defName,flags,startFrom,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxString *>(defName), sipType_wxString, defNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetListStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_NumberList, "NumberList(range, def=None, flags=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom=1, specifiedLevel=-1) -> bool\n"
"NumberList(range, defName, flags=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom=1, specifiedLevel=-1) -> bool\n"
"\n"
"Numbers the paragraphs in the given range.\n"
"");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_NumberList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_NumberList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextListStyleDefinition* def = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int startFrom = 1;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_def,
            sipName_flags,
            sipName_startFrom,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J8iii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextListStyleDefinition, &def, &flags, &startFrom, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::NumberList(*range,def,flags,startFrom,specifiedLevel) : sipCpp->NumberList(*range,def,flags,startFrom,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxString* defName;
        int defNameState = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int startFrom = 1;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_defName,
            sipName_flags,
            sipName_startFrom,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1|iii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxString, &defName, &defNameState, &flags, &startFrom, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::NumberList(*range,*defName,flags,startFrom,specifiedLevel) : sipCpp->NumberList(*range,*defName,flags,startFrom,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxString *>(defName), sipType_wxString, defNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_NumberList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_PromoteList, "PromoteList(promoteBy, range, def=None, flags=RICHTEXT_SETSTYLE_WITH_UNDO, specifiedLevel=-1) -> bool\n"
"PromoteList(promoteBy, range, defName, flags=RICHTEXT_SETSTYLE_WITH_UNDO, specifiedLevel=-1) -> bool\n"
"\n"
"Promotes the list items within the given range.\n"
"");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_PromoteList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_PromoteList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int promoteBy;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextListStyleDefinition* def = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_promoteBy,
            sipName_range,
            sipName_def,
            sipName_flags,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1|J8ii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &promoteBy, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextListStyleDefinition, &def, &flags, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::PromoteList(promoteBy,*range,def,flags,specifiedLevel) : sipCpp->PromoteList(promoteBy,*range,def,flags,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        int promoteBy;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxString* defName;
        int defNameState = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_promoteBy,
            sipName_range,
            sipName_defName,
            sipName_flags,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1J1|ii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &promoteBy, sipType_wxRichTextRange, &range, &rangeState, sipType_wxString, &defName, &defNameState, &flags, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::PromoteList(promoteBy,*range,*defName,flags,specifiedLevel) : sipCpp->PromoteList(promoteBy,*range,*defName,flags,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxString *>(defName), sipType_wxString, defNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_PromoteList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_HitTest, "HitTest(dc, context, pt, flags=0) -> (int, textPosition, obj, contextObj)\n"
"\n"
"Hit-testing: returns a flag indicating hit test details, plus\n"
"information about position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxPoint* pt;
        int ptState = 0;
        long textPosition;
         ::wxRichTextObject* obj;
         ::wxRichTextObject* contextObj;
        int flags = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_pt,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxPoint, &pt, &ptState, &flags))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags) : sipCpp->HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ilDD)",sipRes,textPosition,obj,sipType_wxRichTextObject,SIP_NULLPTR,contextObj,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_HitTest, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Draw, "Draw(dc, context, range, selection, rect, descent, style) -> bool\n"
"\n"
"Draw the item, within the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J9J1ii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::Draw(*dc,*context,*range,*selection,*rect,descent,style) : sipCpp->Draw(*dc,*context,*range,*selection,*rect,descent,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect), sipType_wxRect, rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Draw, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Layout, "Layout(dc, context, rect, parentRect, style) -> bool\n"
"\n"
"Lay the item out at the specified position with the given size\n"
"constraint.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J1i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::Layout(*dc,*context,*rect,*parentRect,style) : sipCpp->Layout(*dc,*context,*rect,*parentRect,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect), sipType_wxRect, rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect), sipType_wxRect, parentRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Layout, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetRangeSize, "GetRangeSize(range, size, descent, dc, context, flags, position=wx.Point(0,0), parentSize=wx.DefaultSize, partialExtents=None) -> bool\n"
"\n"
"Returns the object size for the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetRangeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetRangeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxSize* size;
        int sizeState = 0;
        int descent;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int flags;
        const  ::wxPoint& positiondef = wxPoint(0,0);
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& parentSizedef = wxDefaultSize;
        const  ::wxSize* parentSize = &parentSizedef;
        int parentSizeState = 0;
         ::wxArrayInt* partialExtents = 0;
        int partialExtentsState = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_size,
            sipName_dc,
            sipName_context,
            sipName_flags,
            sipName_position,
            sipName_parentSize,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J9J9i|J1J1J0", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxSize, &size, &sizeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &flags, sipType_wxPoint, &position, &positionState, sipType_wxSize, &parentSize, &parentSizeState, sipType_wxArrayInt, &partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents) : sipCpp->GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(size, sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(position), sipType_wxPoint, positionState);
            sipReleaseType(const_cast< ::wxSize *>(parentSize), sipType_wxSize, parentSizeState);
            sipReleaseType(partialExtents, sipType_wxArrayInt, partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bi)",sipRes,descent);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetRangeSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_DeleteRange, "DeleteRange(range) -> bool\n"
"\n"
"Deletes the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_DeleteRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_DeleteRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::DeleteRange(*range) : sipCpp->DeleteRange(*range));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_DeleteRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetTextForRange, "GetTextForRange(range) -> String\n"
"\n"
"Returns any text in this object for the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetTextForRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetTextForRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetTextForRange(*range) : sipCpp->GetTextForRange(*range)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetTextForRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_ImportFromXML, "ImportFromXML(buffer, node, handler, recurse) -> bool\n"
"\n"
"Imports this object from XML.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_ImportFromXML(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_ImportFromXML(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer* buffer;
         ::wxXmlNode* node;
         ::wxRichTextXMLHandler* handler;
        bool recurse;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_node,
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, sipType_wxXmlNode, &node, sipType_wxRichTextXMLHandler, &handler))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::ImportFromXML(buffer,node,handler,&recurse) : sipCpp->ImportFromXML(buffer,node,handler,&recurse));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bb)",sipRes,recurse);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_ImportFromXML, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetXMLNodeName, "GetXMLNodeName() -> String\n"
"\n"
"Returns the XML node name of this object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetXMLNodeName(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetXMLNodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetXMLNodeName() : sipCpp->GetXMLNodeName()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetXMLNodeName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_AcceptsFocus, "AcceptsFocus() -> bool\n"
"\n"
"Returns true if objects of this class can accept the focus, i.e. a\n"
"call to SetFocusObject is possible.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_AcceptsFocus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetRichTextCtrl, "SetRichTextCtrl(ctrl)\n"
"\n"
"Associates a control with the buffer, for operations that for example\n"
"require refreshing the window.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetRichTextCtrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetRichTextCtrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextCtrl* ctrl;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ctrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextCtrl, &ctrl))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRichTextCtrl(ctrl);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetRichTextCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetRichTextCtrl, "GetRichTextCtrl() -> RichTextCtrl\n"
"\n"
"Returns the associated control.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetRichTextCtrl(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetRichTextCtrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxRichTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRichTextCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetRichTextCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetPartialParagraph, "SetPartialParagraph(partialPara)\n"
"\n"
"Sets a flag indicating whether the last paragraph is partial or\n"
"complete.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetPartialParagraph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetPartialParagraph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool partialPara;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_partialPara,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &partialPara))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetPartialParagraph(partialPara);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetPartialParagraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetPartialParagraph, "GetPartialParagraph() -> bool\n"
"\n"
"Returns a flag indicating whether the last paragraph is partial or\n"
"complete.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetPartialParagraph(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetPartialParagraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPartialParagraph();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetPartialParagraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetStyleSheet, "GetStyleSheet() -> RichTextStyleSheet\n"
"\n"
"Returns the style sheet associated with the overall buffer.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxRichTextStyleSheet*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetStyleSheet() : sipCpp->GetStyleSheet());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextStyleSheet,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_IsTopLevel, "IsTopLevel() -> bool\n"
"\n"
"Returns true if this object is top-level, i.e. contains its own\n"
"paragraphs, such as a text box.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_IsTopLevel(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_IsTopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::IsTopLevel() : sipCpp->IsTopLevel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_IsTopLevel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo, "InsertParagraphsWithUndo(buffer, pos, paragraphs, ctrl, flags=0) -> bool\n"
"\n"
"Submits a command to insert paragraphs.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
        const  ::wxRichTextParagraphLayoutBox* paragraphs;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_paragraphs,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8lJ9J8|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, sipType_wxRichTextParagraphLayoutBox, &paragraphs, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertParagraphsWithUndo(buffer,pos,*paragraphs,ctrl,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertParagraphsWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertTextWithUndo, "InsertTextWithUndo(buffer, pos, text, ctrl, flags=0) -> bool\n"
"\n"
"Submits a command to insert the given text.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertTextWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertTextWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_text,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8lJ1J8|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, sipType_wxString, &text, &textState, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertTextWithUndo(buffer,pos,*text,ctrl,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertTextWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo, "InsertNewlineWithUndo(buffer, pos, ctrl, flags=0) -> bool\n"
"\n"
"Submits a command to insert the given text.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8lJ8|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertNewlineWithUndo(buffer,pos,ctrl,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertNewlineWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertImageWithUndo, "InsertImageWithUndo(buffer, pos, imageBlock, ctrl, flags, textAttr) -> bool\n"
"\n"
"Submits a command to insert the given image.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertImageWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertImageWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
        const  ::wxRichTextImageBlock* imageBlock;
         ::wxRichTextCtrl* ctrl;
        int flags;
        const  ::wxRichTextAttr* textAttr;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_imageBlock,
            sipName_ctrl,
            sipName_flags,
            sipName_textAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8lJ9J8iJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, sipType_wxRichTextImageBlock, &imageBlock, sipType_wxRichTextCtrl, &ctrl, &flags, sipType_wxRichTextAttr, &textAttr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertImageWithUndo(buffer,pos,*imageBlock,ctrl,flags,*textAttr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertImageWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertFieldWithUndo, "InsertFieldWithUndo(buffer, pos, fieldType, properties, ctrl, flags, textAttr) -> RichTextField\n"
"\n"
"Submits a command to insert the given field.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertFieldWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertFieldWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
        const  ::wxString* fieldType;
        int fieldTypeState = 0;
        const  ::wxRichTextProperties* properties;
         ::wxRichTextCtrl* ctrl;
        int flags;
        const  ::wxRichTextAttr* textAttr;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_fieldType,
            sipName_properties,
            sipName_ctrl,
            sipName_flags,
            sipName_textAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8lJ1J9J8iJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, sipType_wxString, &fieldType, &fieldTypeState, sipType_wxRichTextProperties, &properties, sipType_wxRichTextCtrl, &ctrl, &flags, sipType_wxRichTextAttr, &textAttr))
        {
             ::wxRichTextField*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertFieldWithUndo(buffer,pos,*fieldType,*properties,ctrl,flags,*textAttr);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(fieldType), sipType_wxString, fieldTypeState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextField,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertFieldWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph, "GetStyleForNewParagraph(buffer, pos, caretPosition=False, lookUpNewParaStyle=False) -> RichTextAttr\n"
"\n"
"Returns the style that is appropriate for a new paragraph at this\n"
"position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
        bool caretPosition = 0;
        bool lookUpNewParaStyle = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_caretPosition,
            sipName_lookUpNewParaStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8l|bb", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, &caretPosition, &lookUpNewParaStyle))
        {
             ::wxRichTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextAttr(sipCpp->GetStyleForNewParagraph(buffer,pos,caretPosition,lookUpNewParaStyle));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetStyleForNewParagraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertObjectWithUndo, "InsertObjectWithUndo(buffer, pos, object, ctrl, flags=0) -> RichTextObject\n"
"\n"
"Inserts an object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertObjectWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertObjectWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer* buffer;
        long pos;
         ::wxRichTextObject* object;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_pos,
            sipName_object,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8lJ8J8|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextBuffer, &buffer, &pos, sipType_wxRichTextObject, &object, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertObjectWithUndo(buffer,pos,object,ctrl,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertObjectWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo, "DeleteRangeWithUndo(range, ctrl, buffer) -> bool\n"
"\n"
"Submits a command to delete this range.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextCtrl* ctrl;
         ::wxRichTextBuffer* buffer;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_ctrl,
            sipName_buffer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextCtrl, &ctrl, sipType_wxRichTextBuffer, &buffer))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteRangeWithUndo(*range,ctrl,buffer);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_DeleteRangeWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_DrawFloats, "DrawFloats(dc, context, range, selection, rect, descent, style)\n"
"\n"
"Draws the floating objects in this buffer.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_DrawFloats(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_DrawFloats(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J9J1ii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawFloats(*dc,*context,*range,*selection,*rect,descent,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect), sipType_wxRect, rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_DrawFloats, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph, "MoveAnchoredObjectToParagraph(from_, to_, obj)\n"
"\n"
"Moves an anchored object to another paragraph.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraph* from_;
         ::wxRichTextParagraph* to_;
         ::wxRichTextObject* obj;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_from_,
            sipName_to_,
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextParagraph, &from_, sipType_wxRichTextParagraph, &to_, sipType_wxRichTextObject, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->MoveAnchoredObjectToParagraph(from_,to_,obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_MoveAnchoredObjectToParagraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Init, "Init()\n"
"\n"
"Initializes the object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Init(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Init(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Init();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Init, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Clear, "Clear()\n"
"\n"
"Clears all the children.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::Clear() : sipCpp->Clear());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Reset, "Reset()\n"
"\n"
"Clears and initializes with one blank paragraph.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Reset(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::Reset() : sipCpp->Reset());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Reset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_AddParagraph, "AddParagraph(text, paraStyle=None) -> RichTextRange\n"
"\n"
"Convenience function to add a paragraph of text.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_AddParagraph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_AddParagraph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextAttr* paraStyle = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_paraStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxString, &text, &textState, sipType_wxRichTextAttr, &paraStyle))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextRange((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::AddParagraph(*text,paraStyle) : sipCpp->AddParagraph(*text,paraStyle)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_AddParagraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_AddImage, "AddImage(image, paraStyle=None) -> RichTextRange\n"
"\n"
"Convenience function to add an image.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_AddImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_AddImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxImage* image;
         ::wxRichTextAttr* paraStyle = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_image,
            sipName_paraStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxImage, &image, sipType_wxRichTextAttr, &paraStyle))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextRange((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::AddImage(*image,paraStyle) : sipCpp->AddImage(*image,paraStyle)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_AddImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_AddParagraphs, "AddParagraphs(text, paraStyle=None) -> RichTextRange\n"
"\n"
"Adds multiple paragraphs, based on newlines.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_AddParagraphs(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_AddParagraphs(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextAttr* paraStyle = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_paraStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxString, &text, &textState, sipType_wxRichTextAttr, &paraStyle))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextRange((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::AddParagraphs(*text,paraStyle) : sipCpp->AddParagraphs(*text,paraStyle)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_AddParagraphs, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetLineAtPosition, "GetLineAtPosition(pos, caretPosition=False) -> RichTextLine\n"
"\n"
"Returns the line at the given position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineAtPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineAtPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        bool caretPosition = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_caretPosition,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|b", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &pos, &caretPosition))
        {
             ::wxRichTextLine*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetLineAtPosition(pos,caretPosition) : sipCpp->GetLineAtPosition(pos,caretPosition));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextLine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetLineAtPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetLineAtYPosition, "GetLineAtYPosition(y) -> RichTextLine\n"
"\n"
"Returns the line at the given y pixel position, or the last line.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineAtYPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineAtYPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int y;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &y))
        {
             ::wxRichTextLine*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetLineAtYPosition(y) : sipCpp->GetLineAtYPosition(y));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextLine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetLineAtYPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetParagraphAtPosition, "GetParagraphAtPosition(pos, caretPosition=False) -> RichTextParagraph\n"
"\n"
"Returns the paragraph at the given character or caret position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphAtPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphAtPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        bool caretPosition = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_caretPosition,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|b", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &pos, &caretPosition))
        {
             ::wxRichTextParagraph*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetParagraphAtPosition(pos,caretPosition) : sipCpp->GetParagraphAtPosition(pos,caretPosition));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextParagraph,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetParagraphAtPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition, "GetLineSizeAtPosition(pos, caretPosition=False) -> wx.Size\n"
"\n"
"Returns the line size at the given position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        bool caretPosition = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_caretPosition,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|b", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &pos, &caretPosition))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetLineSizeAtPosition(pos,caretPosition) : sipCpp->GetLineSizeAtPosition(pos,caretPosition)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetLineSizeAtPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetVisibleLineNumber, "GetVisibleLineNumber(pos, caretPosition=False, startOfLine=False) -> long\n"
"\n"
"Given a position, returns the number of the visible line (potentially\n"
"many to a paragraph), starting from zero at the start of the buffer.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetVisibleLineNumber(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetVisibleLineNumber(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        bool caretPosition = 0;
        bool startOfLine = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_caretPosition,
            sipName_startOfLine,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|bb", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &pos, &caretPosition, &startOfLine))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetVisibleLineNumber(pos,caretPosition,startOfLine) : sipCpp->GetVisibleLineNumber(pos,caretPosition,startOfLine));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetVisibleLineNumber, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber, "GetLineForVisibleLineNumber(lineNumber) -> RichTextLine\n"
"\n"
"Given a line number, returns the corresponding wxRichTextLine object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long lineNumber;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_lineNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &lineNumber))
        {
             ::wxRichTextLine*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetLineForVisibleLineNumber(lineNumber) : sipCpp->GetLineForVisibleLineNumber(lineNumber));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextLine,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetLineForVisibleLineNumber, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition, "GetLeafObjectAtPosition(position) -> RichTextObject\n"
"\n"
"Returns the leaf object in a paragraph at this position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long position;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &position))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetLeafObjectAtPosition(position) : sipCpp->GetLeafObjectAtPosition(position));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetLeafObjectAtPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetParagraphAtLine, "GetParagraphAtLine(paragraphNumber) -> RichTextParagraph\n"
"\n"
"Returns the paragraph by number.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphAtLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphAtLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long paragraphNumber;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paragraphNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &paragraphNumber))
        {
             ::wxRichTextParagraph*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetParagraphAtLine(paragraphNumber) : sipCpp->GetParagraphAtLine(paragraphNumber));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextParagraph,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetParagraphAtLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetParagraphForLine, "GetParagraphForLine(line) -> RichTextParagraph\n"
"\n"
"Returns the paragraph for a given line.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphForLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphForLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextLine* line;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_line,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextLine, &line))
        {
             ::wxRichTextParagraph*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetParagraphForLine(line) : sipCpp->GetParagraphForLine(line));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextParagraph,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetParagraphForLine, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetParagraphLength, "GetParagraphLength(paragraphNumber) -> int\n"
"\n"
"Returns the length of the paragraph.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphLength(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphLength(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long paragraphNumber;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paragraphNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &paragraphNumber))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetParagraphLength(paragraphNumber) : sipCpp->GetParagraphLength(paragraphNumber));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetParagraphLength, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetParagraphCount, "GetParagraphCount() -> int\n"
"\n"
"Returns the number of paragraphs.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphCount(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetParagraphCount() : sipCpp->GetParagraphCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetParagraphCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetLineCount, "GetLineCount() -> int\n"
"\n"
"Returns the number of visible lines.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineCount(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetLineCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetLineCount() : sipCpp->GetLineCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetLineCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetParagraphText, "GetParagraphText(paragraphNumber) -> String\n"
"\n"
"Returns the text of the paragraph.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetParagraphText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long paragraphNumber;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paragraphNumber,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &paragraphNumber))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetParagraphText(paragraphNumber) : sipCpp->GetParagraphText(paragraphNumber)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetParagraphText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_XYToPosition, "XYToPosition(x, y) -> long\n"
"\n"
"Converts zero-based line column and paragraph number to a position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_XYToPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_XYToPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long x;
        long y;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &x, &y))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::XYToPosition(x,y) : sipCpp->XYToPosition(x,y));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_XYToPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_PositionToXY, "PositionToXY(pos, x, y) -> bool\n"
"\n"
"Converts a zero-based position to line column and paragraph number.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_PositionToXY(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_PositionToXY(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        long x;
        long y;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &pos))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::PositionToXY(pos,&x,&y) : sipCpp->PositionToXY(pos,&x,&y));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bll)",sipRes,x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_PositionToXY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetStyle, "SetStyle(range, style, flags=RICHTEXT_SETSTYLE_WITH_UNDO) -> bool\n"
"SetStyle(obj, textAttr, flags=RICHTEXT_SETSTYLE_WITH_UNDO)\n"
"\n"
"Sets the attributes for the given range.\n"
"");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextAttr* style;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_style,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextAttr, &style, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetStyle(*range,*style,flags) : sipCpp->SetStyle(*range,*style,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextAttr* textAttr;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_textAttr,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextObject, &obj, sipType_wxRichTextAttr, &textAttr, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetStyle(obj,*textAttr,flags) : sipCpp->SetStyle(obj,*textAttr,flags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetStyle, "GetStyle(position, style) -> bool\n"
"\n"
"Returns the combined text attributes for this position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long position;
         ::wxRichTextAttr* style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &position, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetStyle(position,*style) : sipCpp->GetStyle(position,*style));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetUncombinedStyle, "GetUncombinedStyle(position, style) -> bool\n"
"\n"
"Returns the content (uncombined) attributes for this position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetUncombinedStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetUncombinedStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long position;
         ::wxRichTextAttr* style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &position, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetUncombinedStyle(position,*style) : sipCpp->GetUncombinedStyle(position,*style));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetUncombinedStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_DoGetStyle, "DoGetStyle(position, style, combineStyles=True) -> bool\n"
"\n"
"Implementation helper for GetStyle.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_DoGetStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_DoGetStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long position;
         ::wxRichTextAttr* style;
        bool combineStyles = 1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
            sipName_style,
            sipName_combineStyles,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9|b", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &position, sipType_wxRichTextAttr, &style, &combineStyles))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::DoGetStyle(position,*style,combineStyles) : sipCpp->DoGetStyle(position,*style,combineStyles));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_DoGetStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetStyleForRange, "GetStyleForRange(range, style) -> bool\n"
"\n"
"This function gets a style representing the common, combined\n"
"attributes in the given range.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyleForRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetStyleForRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextAttr* style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetStyleForRange(*range,*style) : sipCpp->GetStyleForRange(*range,*style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetStyleForRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_CollectStyle, "CollectStyle(currentStyle, style, clashingAttr, absentAttr) -> bool\n"
"\n"
"Combines style with currentStyle for the purpose of summarising the\n"
"attributes of a range of content.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_CollectStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_CollectStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextAttr* currentStyle;
        const  ::wxRichTextAttr* style;
         ::wxRichTextAttr* clashingAttr;
         ::wxRichTextAttr* absentAttr;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_currentStyle,
            sipName_style,
            sipName_clashingAttr,
            sipName_absentAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J9J9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextAttr, &currentStyle, sipType_wxRichTextAttr, &style, sipType_wxRichTextAttr, &clashingAttr, sipType_wxRichTextAttr, &absentAttr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->CollectStyle(*currentStyle,*style,*clashingAttr,*absentAttr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_CollectStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_ClearListStyle, "ClearListStyle(range, flags=RICHTEXT_SETSTYLE_WITH_UNDO) -> bool\n"
"\n"
"Clears the list style from the given range, clearing list-related\n"
"attributes and applying any named paragraph style associated with each\n"
"paragraph.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_ClearListStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_ClearListStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::ClearListStyle(*range,flags) : sipCpp->ClearListStyle(*range,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_ClearListStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_DoNumberList, "DoNumberList(range, promotionRange, promoteBy, styleDef, flags=RICHTEXT_SETSTYLE_WITH_UNDO, startFrom=1, specifiedLevel=-1) -> bool\n"
"\n"
"Helper for NumberList and PromoteList, that does renumbering and\n"
"promotion simultaneously def can be NULL/empty to indicate that the\n"
"existing list style should be used.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_DoNumberList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_DoNumberList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextRange* promotionRange;
        int promotionRangeState = 0;
        int promoteBy;
         ::wxRichTextListStyleDefinition* styleDef;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
        int startFrom = 1;
        int specifiedLevel = -1;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_promotionRange,
            sipName_promoteBy,
            sipName_styleDef,
            sipName_flags,
            sipName_startFrom,
            sipName_specifiedLevel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1iJ8|iii", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextRange, &promotionRange, &promotionRangeState, &promoteBy, sipType_wxRichTextListStyleDefinition, &styleDef, &flags, &startFrom, &specifiedLevel))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::DoNumberList(*range,*promotionRange,promoteBy,styleDef,flags,startFrom,specifiedLevel) : sipCpp->DoNumberList(*range,*promotionRange,promoteBy,styleDef,flags,startFrom,specifiedLevel));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxRichTextRange *>(promotionRange), sipType_wxRichTextRange, promotionRangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_DoNumberList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_FindNextParagraphNumber, "FindNextParagraphNumber(previousParagraph, attr) -> bool\n"
"\n"
"Fills in the attributes for numbering a paragraph after\n"
"previousParagraph.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_FindNextParagraphNumber(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_FindNextParagraphNumber(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextParagraph* previousParagraph;
         ::wxRichTextAttr* attr;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_previousParagraph,
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextParagraph, &previousParagraph, sipType_wxRichTextAttr, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::FindNextParagraphNumber(previousParagraph,*attr) : sipCpp->FindNextParagraphNumber(previousParagraph,*attr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_FindNextParagraphNumber, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetProperties, "SetProperties(range, properties, flags=RICHTEXT_SETPROPERTIES_WITH_UNDO) -> bool\n"
"\n"
"Sets the properties for the given range, passing flags to determine\n"
"how the attributes are set.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetProperties(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetProperties(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextProperties* properties;
        int flags = wxRICHTEXT_SETPROPERTIES_WITH_UNDO;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_properties,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9|i", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextProperties, &properties, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetProperties(*range,*properties,flags) : sipCpp->SetProperties(*range,*properties,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetProperties, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo, "SetObjectPropertiesWithUndo(obj, properties, objToSet=None) -> bool\n"
"\n"
"Sets with undo the properties for the given object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextProperties* properties;
         ::wxRichTextObject* objToSet = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_properties,
            sipName_objToSet,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9|J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextObject, &obj, sipType_wxRichTextProperties, &properties, sipType_wxRichTextObject, &objToSet))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetObjectPropertiesWithUndo(*obj,*properties,objToSet) : sipCpp->SetObjectPropertiesWithUndo(*obj,*properties,objToSet));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetObjectPropertiesWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_HasCharacterAttributes, "HasCharacterAttributes(range, style) -> bool\n"
"\n"
"Test if this whole range has character attributes of the specified\n"
"kind.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_HasCharacterAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_HasCharacterAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextAttr* style;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::HasCharacterAttributes(*range,*style) : sipCpp->HasCharacterAttributes(*range,*style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_HasCharacterAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_HasParagraphAttributes, "HasParagraphAttributes(range, style) -> bool\n"
"\n"
"Test if this whole range has paragraph attributes of the specified\n"
"kind.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_HasParagraphAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_HasParagraphAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextAttr* style;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::HasParagraphAttributes(*range,*style) : sipCpp->HasParagraphAttributes(*range,*style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_HasParagraphAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Clone, "Clone() -> RichTextObject\n"
"\n"
"Clones the object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_PrepareContent, "PrepareContent(container)\n"
"\n"
"Prepares the content just before insertion (or after buffer reset).");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_PrepareContent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_PrepareContent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextParagraphLayoutBox* container;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_container,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextParagraphLayoutBox, &container))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::PrepareContent(*container) : sipCpp->PrepareContent(*container));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_PrepareContent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InsertFragment, "InsertFragment(position, fragment) -> bool\n"
"\n"
"Insert fragment into this box at the given position.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InsertFragment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InsertFragment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long position;
         ::wxRichTextParagraphLayoutBox* fragment;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
            sipName_fragment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &position, sipType_wxRichTextParagraphLayoutBox, &fragment))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::InsertFragment(position,*fragment) : sipCpp->InsertFragment(position,*fragment));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InsertFragment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_CopyFragment, "CopyFragment(range, fragment) -> bool\n"
"\n"
"Make a copy of the fragment corresponding to the given range, putting\n"
"it in fragment.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_CopyFragment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_CopyFragment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextParagraphLayoutBox* fragment;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_fragment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextParagraphLayoutBox, &fragment))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::CopyFragment(*range,*fragment) : sipCpp->CopyFragment(*range,*fragment));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_CopyFragment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_ApplyStyleSheet, "ApplyStyleSheet(styleSheet) -> bool\n"
"\n"
"Apply the style sheet to the buffer, for example if the styles have\n"
"changed.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_ApplyStyleSheet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_ApplyStyleSheet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextStyleSheet* styleSheet;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_styleSheet,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextStyleSheet, &styleSheet))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::ApplyStyleSheet(styleSheet) : sipCpp->ApplyStyleSheet(styleSheet));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_ApplyStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Copy, "Copy(obj)");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraphLayoutBox* obj;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextParagraphLayoutBox, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_UpdateRanges, "UpdateRanges()\n"
"\n"
"Calculate ranges.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_UpdateRanges(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_UpdateRanges(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::UpdateRanges() : sipCpp->UpdateRanges());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_UpdateRanges, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetText, "GetText() -> String\n"
"\n"
"Get all the text.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetText(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetText() : sipCpp->GetText()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetDefaultStyle, "SetDefaultStyle(style) -> bool\n"
"\n"
"Sets the default style, affecting the style currently being applied\n"
"(for example, setting the default style to bold will cause\n"
"subsequently inserted text to be bold).");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetDefaultStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetDefaultStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextAttr* style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetDefaultStyle(*style) : sipCpp->SetDefaultStyle(*style));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetDefaultStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetDefaultStyle, "GetDefaultStyle() -> RichTextAttr\n"
"\n"
"Returns the current default style, affecting the style currently being\n"
"applied (for example, setting the default style to bold will cause\n"
"subsequently inserted text to be bold).");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetDefaultStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetDefaultStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxRichTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextAttr((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetDefaultStyle() : sipCpp->GetDefaultStyle()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetDefaultStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_SetBasicStyle, "SetBasicStyle(style)\n"
"\n"
"Sets the basic (overall) style.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_SetBasicStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_SetBasicStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextAttr* style;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextAttr, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::SetBasicStyle(*style) : sipCpp->SetBasicStyle(*style));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_SetBasicStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetBasicStyle, "GetBasicStyle() -> RichTextAttr\n"
"\n"
"Returns the basic (overall) style.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetBasicStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetBasicStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxRichTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextAttr((sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::GetBasicStyle() : sipCpp->GetBasicStyle()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetBasicStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_Invalidate, "Invalidate(invalidRange=RICHTEXT_ALL)\n"
"\n"
"Invalidates the buffer.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_Invalidate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_Invalidate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange& invalidRangedef = wxRICHTEXT_ALL;
        const  ::wxRichTextRange* invalidRange = &invalidRangedef;
        int invalidRangeState = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_invalidRange,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &invalidRange, &invalidRangeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::Invalidate(*invalidRange) : sipCpp->Invalidate(*invalidRange));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(invalidRange), sipType_wxRichTextRange, invalidRangeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_Invalidate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_DoInvalidate, "DoInvalidate(invalidRange)\n"
"\n"
"Do the (in)validation for this object only.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_DoInvalidate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_DoInvalidate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* invalidRange;
        int invalidRangeState = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_invalidRange,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &invalidRange, &invalidRangeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::DoInvalidate(*invalidRange) : sipCpp->DoInvalidate(*invalidRange));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(invalidRange), sipType_wxRichTextRange, invalidRangeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_DoInvalidate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_InvalidateHierarchy, "InvalidateHierarchy(invalidRange=RICHTEXT_ALL)\n"
"\n"
"Do the (in)validation both up and down the hierarchy.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_InvalidateHierarchy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_InvalidateHierarchy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange& invalidRangedef = wxRICHTEXT_ALL;
        const  ::wxRichTextRange* invalidRange = &invalidRangedef;
        int invalidRangeState = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_invalidRange,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J1", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextRange, &invalidRange, &invalidRangeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::InvalidateHierarchy(*invalidRange) : sipCpp->InvalidateHierarchy(*invalidRange));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(invalidRange), sipType_wxRichTextRange, invalidRangeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_InvalidateHierarchy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_UpdateFloatingObjects, "UpdateFloatingObjects(availableRect, untilObj=None) -> bool\n"
"\n"
"Gather information about floating objects.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_UpdateFloatingObjects(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_UpdateFloatingObjects(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRect* availableRect;
        int availableRectState = 0;
         ::wxRichTextObject* untilObj = 0;
         ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_availableRect,
            sipName_untilObj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J8", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRect, &availableRect, &availableRectState, sipType_wxRichTextObject, &untilObj))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextParagraphLayoutBox::UpdateFloatingObjects(*availableRect,untilObj) : sipCpp->UpdateFloatingObjects(*availableRect,untilObj));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(availableRect), sipType_wxRect, availableRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_UpdateFloatingObjects, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetInvalidRange, "GetInvalidRange(wholeParagraphs=False) -> RichTextRange\n"
"\n"
"Get invalid range, rounding to entire paragraphs if argument is true.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetInvalidRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetInvalidRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool wholeParagraphs = 0;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_wholeParagraphs,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, &wholeParagraphs))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextRange(sipCpp->GetInvalidRange(wholeParagraphs));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetInvalidRange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_IsDirty, "IsDirty() -> bool\n"
"\n"
"Returns true if this object needs layout.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_IsDirty(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_IsDirty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsDirty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_IsDirty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetFloatCollector, "GetFloatCollector() -> RichTextFloatCollector\n"
"\n"
"Returns the wxRichTextFloatCollector of this object.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetFloatCollector(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetFloatCollector(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
             ::wxRichTextFloatCollector*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFloatCollector();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFloatCollector,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetFloatCollector, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetFloatingObjectCount, "GetFloatingObjectCount() -> int\n"
"\n"
"Returns the number of floating objects at this level.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetFloatingObjectCount(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetFloatingObjectCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFloatingObjectCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetFloatingObjectCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox_GetFloatingObjects, "GetFloatingObjects(objects) -> bool\n"
"\n"
"Returns a list of floating objects.");

extern "C" {static PyObject *meth_wxRichTextParagraphLayoutBox_GetFloatingObjects(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextParagraphLayoutBox_GetFloatingObjects(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextObjectList* objects;
        const  ::wxRichTextParagraphLayoutBox *sipCpp;

        static const char *sipKwdList[] = {
            sipName_objects,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextParagraphLayoutBox, &sipCpp, sipType_wxRichTextObjectList, &objects))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFloatingObjects(*objects);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextParagraphLayoutBox, sipName_GetFloatingObjects, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextParagraphLayoutBox(void *, const sipTypeDef *);}
static void *cast_wxRichTextParagraphLayoutBox(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextParagraphLayoutBox *sipCpp = reinterpret_cast< ::wxRichTextParagraphLayoutBox *>(sipCppV);

    if (targetType == sipType_wxRichTextParagraphLayoutBox)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxRichTextCompositeObject)->ctd_cast(static_cast< ::wxRichTextCompositeObject *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextParagraphLayoutBox(void *, int);}
static void release_wxRichTextParagraphLayoutBox(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextParagraphLayoutBox *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextParagraphLayoutBox *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRichTextParagraphLayoutBox(Py_ssize_t);}
static void *array_wxRichTextParagraphLayoutBox(Py_ssize_t sipNrElem)
{
    return new  ::wxRichTextParagraphLayoutBox[sipNrElem];
}


extern "C" {static void assign_wxRichTextParagraphLayoutBox(void *, Py_ssize_t, void *);}
static void assign_wxRichTextParagraphLayoutBox(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextParagraphLayoutBox *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextParagraphLayoutBox *>(sipSrc);
}


extern "C" {static void *copy_wxRichTextParagraphLayoutBox(const void *, Py_ssize_t);}
static void *copy_wxRichTextParagraphLayoutBox(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::wxRichTextParagraphLayoutBox(reinterpret_cast<const  ::wxRichTextParagraphLayoutBox *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextParagraphLayoutBox(sipSimpleWrapper *);}
static void dealloc_wxRichTextParagraphLayoutBox(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextParagraphLayoutBox *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextParagraphLayoutBox(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextParagraphLayoutBox(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextParagraphLayoutBox(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextParagraphLayoutBox *sipCpp = SIP_NULLPTR;

    {
         ::wxRichTextObject* parent = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_wxRichTextObject, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextParagraphLayoutBox(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextParagraphLayoutBox* obj;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextParagraphLayoutBox, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextParagraphLayoutBox(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextParagraphLayoutBox[] = {{12, 255, 1}};


static PyMethodDef methods_wxRichTextParagraphLayoutBox[] = {
    {sipName_AcceptsFocus, meth_wxRichTextParagraphLayoutBox_AcceptsFocus, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_AcceptsFocus},
    {sipName_AddImage, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_AddImage), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_AddImage},
    {sipName_AddParagraph, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_AddParagraph), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_AddParagraph},
    {sipName_AddParagraphs, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_AddParagraphs), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_AddParagraphs},
    {sipName_ApplyStyleSheet, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_ApplyStyleSheet), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_ApplyStyleSheet},
    {sipName_Clear, meth_wxRichTextParagraphLayoutBox_Clear, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_Clear},
    {sipName_ClearListStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_ClearListStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_ClearListStyle},
    {sipName_Clone, meth_wxRichTextParagraphLayoutBox_Clone, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_Clone},
    {sipName_CollectStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_CollectStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_CollectStyle},
    {sipName_Copy, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_Copy), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_Copy},
    {sipName_CopyFragment, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_CopyFragment), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_CopyFragment},
    {sipName_DeleteRange, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_DeleteRange), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_DeleteRange},
    {sipName_DeleteRangeWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_DeleteRangeWithUndo},
    {sipName_DoGetStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_DoGetStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_DoGetStyle},
    {sipName_DoInvalidate, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_DoInvalidate), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_DoInvalidate},
    {sipName_DoNumberList, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_DoNumberList), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_DoNumberList},
    {sipName_Draw, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_Draw), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_Draw},
    {sipName_DrawFloats, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_DrawFloats), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_DrawFloats},
    {sipName_FindNextParagraphNumber, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_FindNextParagraphNumber), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_FindNextParagraphNumber},
    {sipName_GetBasicStyle, meth_wxRichTextParagraphLayoutBox_GetBasicStyle, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetBasicStyle},
    {sipName_GetDefaultStyle, meth_wxRichTextParagraphLayoutBox_GetDefaultStyle, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetDefaultStyle},
    {sipName_GetFloatCollector, meth_wxRichTextParagraphLayoutBox_GetFloatCollector, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetFloatCollector},
    {sipName_GetFloatingObjectCount, meth_wxRichTextParagraphLayoutBox_GetFloatingObjectCount, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetFloatingObjectCount},
    {sipName_GetFloatingObjects, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetFloatingObjects), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetFloatingObjects},
    {sipName_GetInvalidRange, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetInvalidRange), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetInvalidRange},
    {sipName_GetLeafObjectAtPosition, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetLeafObjectAtPosition},
    {sipName_GetLineAtPosition, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetLineAtPosition), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetLineAtPosition},
    {sipName_GetLineAtYPosition, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetLineAtYPosition), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetLineAtYPosition},
    {sipName_GetLineCount, meth_wxRichTextParagraphLayoutBox_GetLineCount, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetLineCount},
    {sipName_GetLineForVisibleLineNumber, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetLineForVisibleLineNumber},
    {sipName_GetLineSizeAtPosition, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetLineSizeAtPosition},
    {sipName_GetParagraphAtLine, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetParagraphAtLine), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetParagraphAtLine},
    {sipName_GetParagraphAtPosition, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetParagraphAtPosition), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetParagraphAtPosition},
    {sipName_GetParagraphCount, meth_wxRichTextParagraphLayoutBox_GetParagraphCount, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetParagraphCount},
    {sipName_GetParagraphForLine, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetParagraphForLine), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetParagraphForLine},
    {sipName_GetParagraphLength, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetParagraphLength), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetParagraphLength},
    {sipName_GetParagraphText, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetParagraphText), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetParagraphText},
    {sipName_GetPartialParagraph, meth_wxRichTextParagraphLayoutBox_GetPartialParagraph, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetPartialParagraph},
    {sipName_GetRangeSize, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetRangeSize), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetRangeSize},
    {sipName_GetRichTextCtrl, meth_wxRichTextParagraphLayoutBox_GetRichTextCtrl, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetRichTextCtrl},
    {sipName_GetStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetStyle},
    {sipName_GetStyleForNewParagraph, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetStyleForNewParagraph},
    {sipName_GetStyleForRange, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetStyleForRange), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetStyleForRange},
    {sipName_GetStyleSheet, meth_wxRichTextParagraphLayoutBox_GetStyleSheet, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetStyleSheet},
    {sipName_GetText, meth_wxRichTextParagraphLayoutBox_GetText, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetText},
    {sipName_GetTextForRange, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetTextForRange), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetTextForRange},
    {sipName_GetUncombinedStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetUncombinedStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetUncombinedStyle},
    {sipName_GetVisibleLineNumber, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_GetVisibleLineNumber), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_GetVisibleLineNumber},
    {sipName_GetXMLNodeName, meth_wxRichTextParagraphLayoutBox_GetXMLNodeName, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_GetXMLNodeName},
    {sipName_HasCharacterAttributes, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_HasCharacterAttributes), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_HasCharacterAttributes},
    {sipName_HasParagraphAttributes, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_HasParagraphAttributes), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_HasParagraphAttributes},
    {sipName_HitTest, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_HitTest), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_HitTest},
    {sipName_ImportFromXML, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_ImportFromXML), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_ImportFromXML},
    {sipName_Init, meth_wxRichTextParagraphLayoutBox_Init, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_Init},
    {sipName_InsertFieldWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertFieldWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertFieldWithUndo},
    {sipName_InsertFragment, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertFragment), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertFragment},
    {sipName_InsertImageWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertImageWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertImageWithUndo},
    {sipName_InsertNewlineWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertNewlineWithUndo},
    {sipName_InsertObjectWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertObjectWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertObjectWithUndo},
    {sipName_InsertParagraphsWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertParagraphsWithUndo},
    {sipName_InsertTextWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InsertTextWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InsertTextWithUndo},
    {sipName_Invalidate, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_Invalidate), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_Invalidate},
    {sipName_InvalidateHierarchy, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_InvalidateHierarchy), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_InvalidateHierarchy},
    {sipName_IsDirty, meth_wxRichTextParagraphLayoutBox_IsDirty, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_IsDirty},
    {sipName_IsTopLevel, meth_wxRichTextParagraphLayoutBox_IsTopLevel, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_IsTopLevel},
    {sipName_Layout, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_Layout), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_Layout},
    {sipName_MoveAnchoredObjectToParagraph, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_MoveAnchoredObjectToParagraph},
    {sipName_NumberList, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_NumberList), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_NumberList},
    {sipName_PositionToXY, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_PositionToXY), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_PositionToXY},
    {sipName_PrepareContent, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_PrepareContent), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_PrepareContent},
    {sipName_PromoteList, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_PromoteList), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_PromoteList},
    {sipName_Reset, meth_wxRichTextParagraphLayoutBox_Reset, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_Reset},
    {sipName_SetBasicStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetBasicStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetBasicStyle},
    {sipName_SetDefaultStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetDefaultStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetDefaultStyle},
    {sipName_SetListStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetListStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetListStyle},
    {sipName_SetObjectPropertiesWithUndo, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetObjectPropertiesWithUndo},
    {sipName_SetPartialParagraph, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetPartialParagraph), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetPartialParagraph},
    {sipName_SetProperties, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetProperties), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetProperties},
    {sipName_SetRichTextCtrl, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetRichTextCtrl), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetRichTextCtrl},
    {sipName_SetStyle, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_SetStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_SetStyle},
    {sipName_UpdateFloatingObjects, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_UpdateFloatingObjects), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_UpdateFloatingObjects},
    {sipName_UpdateRanges, meth_wxRichTextParagraphLayoutBox_UpdateRanges, METH_VARARGS, doc_wxRichTextParagraphLayoutBox_UpdateRanges},
    {sipName_XYToPosition, SIP_MLMETH_CAST(meth_wxRichTextParagraphLayoutBox_XYToPosition), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextParagraphLayoutBox_XYToPosition}
};

sipVariableDef variables_wxRichTextParagraphLayoutBox[] = {
    {PropertyVariable, sipName_XMLNodeName, &methods_wxRichTextParagraphLayoutBox[48], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Text, &methods_wxRichTextParagraphLayoutBox[44], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_StyleSheet, &methods_wxRichTextParagraphLayoutBox[43], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_RichTextCtrl, &methods_wxRichTextParagraphLayoutBox[39], &methods_wxRichTextParagraphLayoutBox[78], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_PartialParagraph, &methods_wxRichTextParagraphLayoutBox[37], &methods_wxRichTextParagraphLayoutBox[76], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ParagraphCount, &methods_wxRichTextParagraphLayoutBox[33], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LineCount, &methods_wxRichTextParagraphLayoutBox[28], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_InvalidRange, &methods_wxRichTextParagraphLayoutBox[24], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FloatingObjectCount, &methods_wxRichTextParagraphLayoutBox[22], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FloatCollector, &methods_wxRichTextParagraphLayoutBox[21], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DefaultStyle, &methods_wxRichTextParagraphLayoutBox[20], &methods_wxRichTextParagraphLayoutBox[73], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BasicStyle, &methods_wxRichTextParagraphLayoutBox[19], &methods_wxRichTextParagraphLayoutBox[72], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextParagraphLayoutBox, "RichTextParagraphLayoutBox(parent=None)\n"
"RichTextParagraphLayoutBox(obj)\n"
"\n"
"This class knows how to lay out paragraphs.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextParagraphLayoutBox = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextParagraphLayoutBox,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextParagraphLayoutBox,
        {0, 0, 1},
        83, methods_wxRichTextParagraphLayoutBox,
        0, SIP_NULLPTR,
        12, variables_wxRichTextParagraphLayoutBox,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextParagraphLayoutBox,
    -1,
    -1,
    supers_wxRichTextParagraphLayoutBox,
    SIP_NULLPTR,
    init_type_wxRichTextParagraphLayoutBox,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxRichTextParagraphLayoutBox,
    assign_wxRichTextParagraphLayoutBox,
    array_wxRichTextParagraphLayoutBox,
    copy_wxRichTextParagraphLayoutBox,
    release_wxRichTextParagraphLayoutBox,
    cast_wxRichTextParagraphLayoutBox,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
