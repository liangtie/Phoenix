/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.7.9
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"
        #include <wx/listctrl.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/itemattr.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/listctrl.h>
        #include <wx/bmpbndl.h>
        #include <wx/imaglist.h>
        #include <wx/gdicmn.h>
        #include <wx/textctrl.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/region.h>
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        static int wxCALLBACK wxPyListCtrl_SortItems(wxIntPtr item1, wxIntPtr item2, wxIntPtr funcPtr)
        {
            int retval = 0;
            PyObject* func = (PyObject*)funcPtr;
            wxPyThreadBlocker blocker;
        
        #if SIZEOF_LONG >= SIZEOF_VOID_P
            PyObject* args = Py_BuildValue("(ll)", item1, item2);
        #else
            PyObject* args = Py_BuildValue("(LL)", item1, item2);
        #endif
        
            PyObject* result = PyObject_CallObject(func, args);
            Py_DECREF(args);
            if (result) {
                retval = wxPyInt_AsLong(result);
                Py_DECREF(result);
            }
            return retval;
        }
    wxListItem* _wxListCtrl_GetColumn(wxListCtrl* self, int col)
    {
        wxListItem item;
        item.SetMask( wxLIST_MASK_STATE |
                      wxLIST_MASK_TEXT  |
                      wxLIST_MASK_IMAGE |
                      wxLIST_MASK_DATA  |
                      wxLIST_SET_ITEM   |
                      wxLIST_MASK_WIDTH |
                      wxLIST_MASK_FORMAT
                      );
        if (self->GetColumn(col, item))
            return new wxListItem(item);
        else
            return NULL;
    }
    int _wxListCtrl_GetColumnIndexFromOrder(const wxListCtrl* self, int pos)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return self->GetColumnIndexFromOrder(pos);
        #else
            wxPyRaiseNotImplemented();
            return 0;
        #endif
    }
    int _wxListCtrl_GetColumnOrder(const wxListCtrl* self, int col)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return self->GetColumnOrder(col);
        #else
            wxPyRaiseNotImplemented();
            return 0;
        #endif
    }
    wxArrayInt* _wxListCtrl_GetColumnsOrder(const wxListCtrl* self)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return new wxArrayInt(self->GetColumnsOrder());
        #else
            wxPyRaiseNotImplemented();
            return new wxArrayInt();
        #endif
    }
    wxListItem* _wxListCtrl_GetItem(wxListCtrl* self, int itemIdx, int col)
    {
        wxListItem* info = new wxListItem;
        info->m_itemId = itemIdx;
        info->m_col = col;
        info->m_mask = 0xFFFF;
        info->m_stateMask = 0xFFFF;
        self->GetItem(*info);
        return info;
    }
    wxPoint* _wxListCtrl_GetItemPosition(wxListCtrl* self, long item)
    {
        wxPoint* pos = new wxPoint;
        self->GetItemPosition(item, *pos);
        return pos;
    }
    wxRect* _wxListCtrl_GetItemRect(wxListCtrl* self, long item, int code)
    {
        wxRect* rect = new wxRect;
        self->GetItemRect(item, *rect, code);
        return rect;
    }
    bool _wxListCtrl_SetColumnsOrder(wxListCtrl* self, const wxArrayInt *orders)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return self->SetColumnsOrder(*orders);
        #else
            wxPyRaiseNotImplemented();
            return false;
        #endif
    }
    bool _wxListCtrl_SortItems(wxListCtrl* self, PyObject* fnSortCallBack)
    {
        if (!PyCallable_Check(fnSortCallBack))
            return false;
        return self->SortItems((wxListCtrlCompare)wxPyListCtrl_SortItems,
                               (wxIntPtr)fnSortCallBack);
    }
    PyObject* _wxListCtrl_HitTestSubItem(wxListCtrl* self, const wxPoint* point)
    {
        long item, subitem;
        int flags;
        item = self->HitTest(*point, flags, &subitem);
        wxPyThreadBlocker blocker;
        PyObject* rv = PyTuple_New(3);
        PyTuple_SetItem(rv, 0, wxPyInt_FromLong(item));
        PyTuple_SetItem(rv, 1, wxPyInt_FromLong(flags));
        PyTuple_SetItem(rv, 2, wxPyInt_FromLong(subitem));
        return rv;
    }
    bool _wxListCtrl_HasColumnOrderSupport(wxListCtrl* self)
    {
        #ifdef wxHAS_LISTCTRL_COLUMN_ORDER
            return true;
        #else
            return false;
        #endif
    }
    wxWindow* _wxListCtrl_GetMainWindow(wxListCtrl* self)
    {
        #if defined(__WXMSW__) || defined(__WXMAC__)
            return self;
        #else
            return (wxWindow*)self->m_mainWin;
        #endif
    }


class sipwxListCtrl : public  ::wxListCtrl
{
public:
    sipwxListCtrl();
    sipwxListCtrl( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxValidator&,const  ::wxString&);
    virtual ~sipwxListCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
     ::wxItemAttr* sipProtectVirt_OnGetItemAttr(bool,long) const;
    int sipProtectVirt_OnGetItemColumnImage(bool,long,long) const;
    int sipProtectVirt_OnGetItemImage(bool,long) const;
     ::wxString sipProtectVirt_OnGetItemText(bool,long,long) const;
    bool sipProtectVirt_OnGetItemIsChecked(bool,long) const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool OnGetItemIsChecked(long) const SIP_OVERRIDE;
     ::wxString OnGetItemText(long,long) const SIP_OVERRIDE;
    int OnGetItemImage(long) const SIP_OVERRIDE;
    int OnGetItemColumnImage(long,long) const SIP_OVERRIDE;
     ::wxItemAttr* OnGetItemAttr(long) const SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxListCtrl(const sipwxListCtrl &);
    sipwxListCtrl &operator = (const sipwxListCtrl &);

    char sipPyMethods[44];
};

sipwxListCtrl::sipwxListCtrl():  ::wxListCtrl(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxListCtrl::sipwxListCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxValidator& validator,const  ::wxString& name):  ::wxListCtrl(parent,id,pos,size,style,validator,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxListCtrl::~sipwxListCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxListCtrl::OnGetItemIsChecked(long item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_OnGetItemIsChecked);

    if (!sipMeth)
        return  ::wxListCtrl::OnGetItemIsChecked(item);

    extern bool sipVH__core_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__core_115(sipGILState, 0, sipPySelf, sipMeth, item);
}

 ::wxString sipwxListCtrl::OnGetItemText(long item,long column) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[1]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_OnGetItemText);

    if (!sipMeth)
        return  ::wxListCtrl::OnGetItemText(item,column);

    extern  ::wxString sipVH__core_178(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__core_178(sipGILState, 0, sipPySelf, sipMeth, item, column);
}

int sipwxListCtrl::OnGetItemImage(long item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_OnGetItemImage);

    if (!sipMeth)
        return  ::wxListCtrl::OnGetItemImage(item);

    extern int sipVH__core_177(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__core_177(sipGILState, 0, sipPySelf, sipMeth, item);
}

int sipwxListCtrl::OnGetItemColumnImage(long item,long column) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[3]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_OnGetItemColumnImage);

    if (!sipMeth)
        return  ::wxListCtrl::OnGetItemColumnImage(item,column);

    extern int sipVH__core_176(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__core_176(sipGILState, 0, sipPySelf, sipMeth, item, column);
}

 ::wxItemAttr* sipwxListCtrl::OnGetItemAttr(long item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[4]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_OnGetItemAttr);

    if (!sipMeth)
        return  ::wxListCtrl::OnGetItemAttr(item);

    extern  ::wxItemAttr* sipVH__core_175(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__core_175(sipGILState, 0, sipPySelf, sipMeth, item);
}

 ::wxSize sipwxListCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxListCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_25(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxListCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[6]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxListCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__core_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_25(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxListCtrl::DoThaw();
        return;
    }

    extern void sipVH__core_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_57(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxListCtrl::DoFreeze();
        return;
    }

    extern void sipVH__core_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_57(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxListCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[9]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxListCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxListCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[10]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxListCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[11], &sipPySelf, SIP_NULLPTR, sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxListCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_135(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_135(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxListCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxListCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_134(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_134(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxListCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxListCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_133(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxListCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxListCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxListCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxListCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_131(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_131(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxListCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[16]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxListCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxListCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[17]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxListCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxListCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxListCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_130(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_130(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxListCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxListCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxListCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxListCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_129(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_129(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxListCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__core_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_57(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxListCtrl::InitDialog();
        return;
    }

    extern void sipVH__core_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_57(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxListCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__core_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_57(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_Destroy);

    if (!sipMeth)
        return  ::wxListCtrl::Destroy();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_Validate);

    if (!sipMeth)
        return  ::wxListCtrl::Validate();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[26], &sipPySelf, SIP_NULLPTR, sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxListCtrl::TransferDataToWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[27], &sipPySelf, SIP_NULLPTR, sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxListCtrl::TransferDataFromWindow();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxListCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxListCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxListCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_GetValidator);

    if (!sipMeth)
        return  ::wxListCtrl::GetValidator();

    extern  ::wxValidator* sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[30]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxListCtrl::ShouldInheritColours();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxListCtrl::HasTransparentBackground();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxListCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxListCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxListCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxListCtrl::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxListCtrl::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxListCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxListCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxListCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxListCtrl::AcceptsFocusRecursively();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[37]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxListCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxListCtrl::AcceptsFocus();

    extern bool sipVH__core_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_6(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxListCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_TryAfter);

    if (!sipMeth)
        return  ::wxListCtrl::TryAfter(event);

    extern bool sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxListCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_TryBefore);

    if (!sipMeth)
        return  ::wxListCtrl::TryBefore(event);

    extern bool sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxListCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxListCtrl::ProcessEvent(event);

    extern bool sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxListCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_AddChild);

    if (!sipMeth)
    {
         ::wxListCtrl::AddChild(child);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxListCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxListCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxListCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxListCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxListCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxListCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxListCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxListCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxListCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxListCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxListCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxListCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxListCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxListCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxListCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxListCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxListCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

void sipwxListCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxListCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxListCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxListCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxListCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoFreeze() : DoFreeze());
}

void sipwxListCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxListCtrl::DoThaw() : DoThaw());
}

bool sipwxListCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxListCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxListCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxListCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxListCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxListCtrl::TryAfter(event) : TryAfter(event));
}

 ::wxItemAttr* sipwxListCtrl::sipProtectVirt_OnGetItemAttr(bool sipSelfWasArg,long item) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::OnGetItemAttr(item) : OnGetItemAttr(item));
}

int sipwxListCtrl::sipProtectVirt_OnGetItemColumnImage(bool sipSelfWasArg,long item,long column) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::OnGetItemColumnImage(item,column) : OnGetItemColumnImage(item,column));
}

int sipwxListCtrl::sipProtectVirt_OnGetItemImage(bool sipSelfWasArg,long item) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::OnGetItemImage(item) : OnGetItemImage(item));
}

 ::wxString sipwxListCtrl::sipProtectVirt_OnGetItemText(bool sipSelfWasArg,long item,long column) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::OnGetItemText(item,column) : OnGetItemText(item,column));
}

bool sipwxListCtrl::sipProtectVirt_OnGetItemIsChecked(bool sipSelfWasArg,long item) const
{
    return (sipSelfWasArg ?  ::wxListCtrl::OnGetItemIsChecked(item) : OnGetItemIsChecked(item));
}


PyDoc_STRVAR(doc_wxListCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxListCtrl_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_AppendColumn, "AppendColumn(heading, format=LIST_FORMAT_LEFT, width=-1) -> long\n"
"\n"
"Adds a new column to the list control in report view mode.");

extern "C" {static PyObject *meth_wxListCtrl_AppendColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_AppendColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* heading;
        int headingState = 0;
         ::wxListColumnFormat format = wxLIST_FORMAT_LEFT;
        int width = -1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_heading,
            sipName_format,
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|Ei", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxString, &heading, &headingState, sipType_wxListColumnFormat, &format, &width))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendColumn(*heading,format,width);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(heading), sipType_wxString, headingState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_AppendColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_Arrange, "Arrange(flag=LIST_ALIGN_DEFAULT) -> bool\n"
"\n"
"Arranges the items in icon or small icon view.");

extern "C" {static PyObject *meth_wxListCtrl_Arrange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_Arrange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flag = wxLIST_ALIGN_DEFAULT;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &flag))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Arrange(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_Arrange, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_AssignImageList, "AssignImageList(imageList, which)\n"
"\n"
"Sets the image list associated with the control and takes ownership of\n"
"it.");

extern "C" {static PyObject *meth_wxListCtrl_AssignImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_AssignImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxImageList* imageList;
        int which;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imageList,
            sipName_which,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ:i", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxImageList, &imageList, &which))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AssignImageList(imageList,which);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_AssignImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_ClearAll, "ClearAll()\n"
"\n"
"Deletes all items and all columns.");

extern "C" {static PyObject *meth_wxListCtrl_ClearAll(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_ClearAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_ClearAll, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_Create, "Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LC_ICON, validator=DefaultValidator, name=ListCtrlNameStr) -> bool\n"
"\n"
"Creates the list control.");

extern "C" {static PyObject *meth_wxListCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxLC_ICON;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxListCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1lJ9J1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator, sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*validator,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DeleteAllColumns, "DeleteAllColumns() -> bool\n"
"\n"
"Delete all columns in the list control.");

extern "C" {static PyObject *meth_wxListCtrl_DeleteAllColumns(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DeleteAllColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteAllColumns();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DeleteAllColumns, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DeleteAllItems, "DeleteAllItems() -> bool\n"
"\n"
"Deletes all items in the list control.");

extern "C" {static PyObject *meth_wxListCtrl_DeleteAllItems(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DeleteAllItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteAllItems();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DeleteAllItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DeleteColumn, "DeleteColumn(col) -> bool\n"
"\n"
"Deletes a column.");

extern "C" {static PyObject *meth_wxListCtrl_DeleteColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DeleteColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteColumn(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DeleteColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DeleteItem, "DeleteItem(item) -> bool\n"
"\n"
"Deletes the specified item.");

extern "C" {static PyObject *meth_wxListCtrl_DeleteItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DeleteItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteItem(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DeleteItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EditLabel, "EditLabel(item) -> TextCtrl\n"
"\n"
"Starts editing the label of the given item.");

extern "C" {static PyObject *meth_wxListCtrl_EditLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EditLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EditLabel(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EditLabel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EnableAlternateRowColours, "EnableAlternateRowColours(enable=True)\n"
"\n"
"Enable alternating row background colours (also called zebra\n"
"striping).");

extern "C" {static PyObject *meth_wxListCtrl_EnableAlternateRowColours(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EnableAlternateRowColours(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableAlternateRowColours(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EnableAlternateRowColours, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EnableBellOnNoMatch, "EnableBellOnNoMatch(on=True)\n"
"\n"
"Enable or disable a beep if there is no match for the currently\n"
"entered text when searching for the item from keyboard.");

extern "C" {static PyObject *meth_wxListCtrl_EnableBellOnNoMatch(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EnableBellOnNoMatch(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool on = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_on,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &on))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableBellOnNoMatch(on);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EnableBellOnNoMatch, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EnsureVisible, "EnsureVisible(item) -> bool\n"
"\n"
"Ensures this item is visible.");

extern "C" {static PyObject *meth_wxListCtrl_EnsureVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EnsureVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnsureVisible(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EnsureVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_FindItem, "FindItem(start, str, partial=False) -> long\n"
"FindItem(start, data) -> long\n"
"FindItem(start, pt, direction) -> long\n"
"\n"
"Find an item whose label matches this string, starting from start or\n"
"the beginning if start is -1.\n"
"\n"
"");

extern "C" {static PyObject *meth_wxListCtrl_FindItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_FindItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long start;
        const  ::wxString* str;
        int strState = 0;
        bool partial = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
            sipName_str,
            sipName_partial,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &start, sipType_wxString, &str, &strState, &partial))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindItem(start,*str,partial);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(str), sipType_wxString, strState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    {
        long start;
         ::wxUIntPtr* data;
        int dataState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, &start, sipType_wxUIntPtr, &data, &dataState))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindItem(start,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data, sipType_wxUIntPtr, dataState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    {
        long start;
        const  ::wxPoint* pt;
        int ptState = 0;
        int direction;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
            sipName_pt,
            sipName_direction,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1i", &sipSelf, sipType_wxListCtrl, &sipCpp, &start, sipType_wxPoint, &pt, &ptState, &direction))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindItem(start,*pt,direction);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_FindItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetColumn, "GetColumn(col) -> ListItem\n"
"\n"
"Gets information about this column. See SetItem() for more\n"
"information.");

extern "C" {static PyObject *meth_wxListCtrl_GetColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &col))
        {
             ::wxListItem*sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumn(sipCpp, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxListItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetColumnCount, "GetColumnCount() -> int\n"
"\n"
"Returns the number of columns.");

extern "C" {static PyObject *meth_wxListCtrl_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetColumnIndexFromOrder, "GetColumnIndexFromOrder(pos) -> int\n"
"\n"
"Gets the column index from its position in visual order.");

extern "C" {static PyObject *meth_wxListCtrl_GetColumnIndexFromOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetColumnIndexFromOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pos;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &pos))
        {
            int sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumnIndexFromOrder(sipCpp, pos);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetColumnIndexFromOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetColumnOrder, "GetColumnOrder(col) -> int\n"
"\n"
"Gets the column visual order position.");

extern "C" {static PyObject *meth_wxListCtrl_GetColumnOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetColumnOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &col))
        {
            int sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumnOrder(sipCpp, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetColumnOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetColumnWidth, "GetColumnWidth(col) -> int\n"
"\n"
"Gets the column width (report view only).");

extern "C" {static PyObject *meth_wxListCtrl_GetColumnWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetColumnWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &col))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnWidth(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetColumnWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetColumnsOrder, "GetColumnsOrder() -> ArrayInt\n"
"\n"
"Returns the array containing the orders of all columns.");

extern "C" {static PyObject *meth_wxListCtrl_GetColumnsOrder(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetColumnsOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxArrayInt*sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetColumnsOrder(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayInt,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetColumnsOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetCountPerPage, "GetCountPerPage() -> int\n"
"\n"
"Gets the number of items that can fit vertically in the visible area\n"
"of the list control (list or report view) or the total number of items\n"
"in the list control (icon or small icon view).");

extern "C" {static PyObject *meth_wxListCtrl_GetCountPerPage(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetCountPerPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCountPerPage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetCountPerPage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetEditControl, "GetEditControl() -> TextCtrl\n"
"\n"
"Returns the edit control being currently used to edit a label.");

extern "C" {static PyObject *meth_wxListCtrl_GetEditControl(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetEditControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEditControl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetEditControl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetImageList, "GetImageList(which) -> ImageList\n"
"\n"
"Returns the specified image list.");

extern "C" {static PyObject *meth_wxListCtrl_GetImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int which;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_which,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &which))
        {
             ::wxImageList*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetImageList(which);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxImageList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItem, "GetItem(itemIdx, col=0) -> ListItem\n"
"\n"
"Gets information about the item. See SetItem() for more information.");

extern "C" {static PyObject *meth_wxListCtrl_GetItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int itemIdx;
        int col = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_itemIdx,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &itemIdx, &col))
        {
             ::wxListItem*sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetItem(sipCpp, itemIdx, col);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxListItem,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemBackgroundColour, "GetItemBackgroundColour(item) -> Colour\n"
"\n"
"Returns the colour for this item.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetItemBackgroundColour(item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemCount, "GetItemCount() -> int\n"
"\n"
"Returns the number of items in the list control.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemCount(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemData, "GetItemData(item) -> long\n"
"\n"
"Gets the application-defined data associated with this item.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemData(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemFont, "GetItemFont(item) -> Font\n"
"\n"
"Returns the item's font.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
             ::wxFont*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxFont(sipCpp->GetItemFont(item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemPosition, "GetItemPosition(item) -> Point\n"
"\n"
"Returns the position of the item, in icon or small icon view.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
             ::wxPoint*sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetItemPosition(sipCpp, item);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemRect, "GetItemRect(item, code=LIST_RECT_BOUNDS) -> Rect\n"
"\n"
"Returns the rectangle representing the item's size and position, in\n"
"physical coordinates.\n"
"code is one of wx.LIST_RECT_BOUNDS, wx.LIST_RECT_ICON,\n"
"wx.LIST_RECT_LABEL.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        int code = wxLIST_RECT_BOUNDS;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_code,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &code))
        {
             ::wxRect*sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetItemRect(sipCpp, item, code);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemSpacing, "GetItemSpacing() -> Size\n"
"\n"
"Retrieves the spacing between icons in pixels: horizontal spacing is\n"
"returned as x component of the wxSize object and the vertical spacing\n"
"as its y component.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemSpacing(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetItemSpacing());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemState, "GetItemState(item, stateMask) -> int\n"
"\n"
"Gets the item state.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        long stateMask;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_stateMask,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &stateMask))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemState(item,stateMask);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemState, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemText, "GetItemText(item, col=0) -> String\n"
"\n"
"Gets the item text for this item.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        int col = 0;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetItemText(item,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetItemTextColour, "GetItemTextColour(item) -> Colour\n"
"\n"
"Returns the colour for this item.");

extern "C" {static PyObject *meth_wxListCtrl_GetItemTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetItemTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetItemTextColour(item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetItemTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetNextItem, "GetNextItem(item, geometry=LIST_NEXT_ALL, state=LIST_STATE_DONTCARE) -> long\n"
"\n"
"Searches for an item with the given geometry or state, starting from\n"
"item but excluding the item itself.");

extern "C" {static PyObject *meth_wxListCtrl_GetNextItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetNextItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        int geometry = wxLIST_NEXT_ALL;
        int state = wxLIST_STATE_DONTCARE;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_geometry,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|ii", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &geometry, &state))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetNextItem(item,geometry,state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetNextItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetSelectedItemCount, "GetSelectedItemCount() -> int\n"
"\n"
"Returns the number of selected items in the list control.");

extern "C" {static PyObject *meth_wxListCtrl_GetSelectedItemCount(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetSelectedItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelectedItemCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetSelectedItemCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetSubItemRect, "GetSubItemRect(item, subItem, rect, code=LIST_RECT_BOUNDS) -> bool\n"
"\n"
"Returns the rectangle representing the size and position, in physical\n"
"coordinates, of the given subitem, i.e.");

extern "C" {static PyObject *meth_wxListCtrl_GetSubItemRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetSubItemRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        long subItem;
         ::wxRect* rect;
        int rectState = 0;
        int code = wxLIST_RECT_BOUNDS;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_subItem,
            sipName_rect,
            sipName_code,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BllJ1|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &subItem, sipType_wxRect, &rect, &rectState, &code))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSubItemRect(item,subItem,*rect,code);
            Py_END_ALLOW_THREADS
            sipReleaseType(rect, sipType_wxRect, rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetSubItemRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetTextColour, "GetTextColour() -> Colour\n"
"\n"
"Gets the text colour of the list control.");

extern "C" {static PyObject *meth_wxListCtrl_GetTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetTextColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetTopItem, "GetTopItem() -> long\n"
"\n"
"Gets the index of the topmost visible item when in list or report\n"
"view.");

extern "C" {static PyObject *meth_wxListCtrl_GetTopItem(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetTopItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTopItem();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetTopItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetViewRect, "GetViewRect() -> Rect\n"
"\n"
"Returns the rectangle taken by all items in the control.");

extern "C" {static PyObject *meth_wxListCtrl_GetViewRect(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetViewRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetViewRect());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetViewRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetAlternateRowColour, "SetAlternateRowColour(colour)\n"
"\n"
"Set the alternative row background colour to a specific colour.");

extern "C" {static PyObject *meth_wxListCtrl_SetAlternateRowColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetAlternateRowColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlternateRowColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour), sipType_wxColour, colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetAlternateRowColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetAlternateRowColour, "GetAlternateRowColour() -> Colour\n"
"\n"
"Get the alternative row background colour.");

extern "C" {static PyObject *meth_wxListCtrl_GetAlternateRowColour(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetAlternateRowColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetAlternateRowColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetAlternateRowColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_HitTest, "HitTest(point) -> (long, flags)\n"
"\n"
"Determines which item (if any) is at the specified point, giving\n"
"details in flags.");

extern "C" {static PyObject *meth_wxListCtrl_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* point;
        int pointState = 0;
        int flags;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxPoint, &point, &pointState))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HitTest(*point,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(point), sipType_wxPoint, pointState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(li)",sipRes,flags);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_HitTest, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_InReportView, "InReportView() -> bool\n"
"\n"
"Returns true if the control is currently using wxLC_REPORT style.");

extern "C" {static PyObject *meth_wxListCtrl_InReportView(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_InReportView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InReportView();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_InReportView, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_InsertColumn, "InsertColumn(col, info) -> long\n"
"InsertColumn(col, heading, format=LIST_FORMAT_LEFT, width=LIST_AUTOSIZE) -> long\n"
"\n"
"For report view mode (only), inserts a column.\n"
"");

extern "C" {static PyObject *meth_wxListCtrl_InsertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_InsertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long col;
        const  ::wxListItem* info;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, &col, sipType_wxListItem, &info))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertColumn(col,*info);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    {
        long col;
        const  ::wxString* heading;
        int headingState = 0;
        int format = wxLIST_FORMAT_LEFT;
        int width = wxLIST_AUTOSIZE;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_heading,
            sipName_format,
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1|ii", &sipSelf, sipType_wxListCtrl, &sipCpp, &col, sipType_wxString, &heading, &headingState, &format, &width))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertColumn(col,*heading,format,width);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(heading), sipType_wxString, headingState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_InsertColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_InsertItem, "InsertItem(info) -> long\n"
"InsertItem(index, label) -> long\n"
"InsertItem(index, imageIndex) -> long\n"
"InsertItem(index, label, imageIndex) -> long\n"
"\n"
"Inserts an item, returning the index of the new item if successful, -1\n"
"otherwise.\n"
"\n"
"\n"
"");

extern "C" {static PyObject *meth_wxListCtrl_InsertItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_InsertItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListItem* info;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxListItem, &info))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertItem(*info);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    {
        long index;
        const  ::wxString* label;
        int labelState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, &index, sipType_wxString, &label, &labelState))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertItem(index,*label);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label), sipType_wxString, labelState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    {
        long index;
        int imageIndex;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_imageIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bli", &sipSelf, sipType_wxListCtrl, &sipCpp, &index, &imageIndex))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertItem(index,imageIndex);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    {
        long index;
        const  ::wxString* label;
        int labelState = 0;
        int imageIndex;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_label,
            sipName_imageIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1i", &sipSelf, sipType_wxListCtrl, &sipCpp, &index, sipType_wxString, &label, &labelState, &imageIndex))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertItem(index,*label,imageIndex);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label), sipType_wxString, labelState);

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_InsertItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_IsEmpty, "IsEmpty() -> bool\n"
"\n"
"Returns true if the control doesn't currently contain any items.");

extern "C" {static PyObject *meth_wxListCtrl_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEmpty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_IsEmpty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_IsVirtual, "IsVirtual() -> bool\n"
"\n"
"Returns true if the control is currently in virtual report view.");

extern "C" {static PyObject *meth_wxListCtrl_IsVirtual(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_IsVirtual(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsVirtual();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_IsVirtual, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_RefreshItem, "RefreshItem(item)\n"
"\n"
"Redraws the given item.");

extern "C" {static PyObject *meth_wxListCtrl_RefreshItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_RefreshItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RefreshItem(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_RefreshItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_RefreshItems, "RefreshItems(itemFrom, itemTo)\n"
"\n"
"Redraws the items between itemFrom and itemTo.");

extern "C" {static PyObject *meth_wxListCtrl_RefreshItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_RefreshItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long itemFrom;
        long itemTo;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_itemFrom,
            sipName_itemTo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxListCtrl, &sipCpp, &itemFrom, &itemTo))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RefreshItems(itemFrom,itemTo);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_RefreshItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_ScrollList, "ScrollList(dx, dy) -> bool\n"
"\n"
"Scrolls the list control.");

extern "C" {static PyObject *meth_wxListCtrl_ScrollList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_ScrollList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int dx;
        int dy;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dx,
            sipName_dy,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxListCtrl, &sipCpp, &dx, &dy))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ScrollList(dx,dy);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_ScrollList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetBackgroundColour, "SetBackgroundColour(col) -> bool\n"
"\n"
"Sets the background colour.");

extern "C" {static PyObject *meth_wxListCtrl_SetBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxColour, &col, &colState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetColumn, "SetColumn(col, item) -> bool\n"
"\n"
"Sets information about this column.");

extern "C" {static PyObject *meth_wxListCtrl_SetColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
         ::wxListItem* item;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, &col, sipType_wxListItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetColumn(col,*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetColumn, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetColumnWidth, "SetColumnWidth(col, width) -> bool\n"
"\n"
"Sets the column width.");

extern "C" {static PyObject *meth_wxListCtrl_SetColumnWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetColumnWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
        int width;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxListCtrl, &sipCpp, &col, &width))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetColumnWidth(col,width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetColumnWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetColumnsOrder, "SetColumnsOrder(orders) -> bool\n"
"\n"
"Changes the order in which the columns are shown.");

extern "C" {static PyObject *meth_wxListCtrl_SetColumnsOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetColumnsOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxArrayInt* orders;
        int ordersState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orders,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxArrayInt, &orders, &ordersState))
        {
            bool sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_SetColumnsOrder(sipCpp, orders);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(const_cast< ::wxArrayInt *>(orders), sipType_wxArrayInt, ordersState);

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetColumnsOrder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetHeaderAttr, "SetHeaderAttr(attr) -> bool\n"
"\n"
"Change the font and the colours used for the list control header.");

extern "C" {static PyObject *meth_wxListCtrl_SetHeaderAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetHeaderAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxItemAttr* attr;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxItemAttr, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetHeaderAttr(*attr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetHeaderAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetImageList, "SetImageList(imageList, which)\n"
"\n"
"Sets the image list associated with the control.");

extern "C" {static PyObject *meth_wxListCtrl_SetImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxImageList* imageList;
        int which;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imageList,
            sipName_which,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8i", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxImageList, &imageList, &which))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetImageList(imageList,which);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetImageList, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetNormalImages, "SetNormalImages(images)\n"
"\n"
"Sets the images to use when showing large, normal icons in this\n"
"control.");

extern "C" {static PyObject *meth_wxListCtrl_SetNormalImages(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetNormalImages(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxVector< ::wxBitmapBundle>* images;
        int imagesState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_images,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxVector_0100wxBitmapBundle, &images, &imagesState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetNormalImages(*images);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<wxVector< ::wxBitmapBundle> *>(images), sipType_wxVector_0100wxBitmapBundle, imagesState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetNormalImages, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetSmallImages, "SetSmallImages(images)\n"
"\n"
"Sets the images to use when showing small icons in this control.");

extern "C" {static PyObject *meth_wxListCtrl_SetSmallImages(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetSmallImages(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const wxVector< ::wxBitmapBundle>* images;
        int imagesState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_images,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxVector_0100wxBitmapBundle, &images, &imagesState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSmallImages(*images);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<wxVector< ::wxBitmapBundle> *>(images), sipType_wxVector_0100wxBitmapBundle, imagesState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetSmallImages, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_IsVisible, "IsVisible(item) -> bool\n"
"\n"
"Check if the item is visible.");

extern "C" {static PyObject *meth_wxListCtrl_IsVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_IsVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsVisible(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_IsVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItem, "SetItem(info) -> bool\n"
"SetItem(index, column, label, imageId=-1) -> bool\n"
"\n"
"Sets the data of an item.\n"
"");

extern "C" {static PyObject *meth_wxListCtrl_SetItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListItem* info;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxListItem, &info))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItem(*info);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        long index;
        int column;
        const  ::wxString* label;
        int labelState = 0;
        int imageId = -1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
            sipName_column,
            sipName_label,
            sipName_imageId,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BliJ1|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &index, &column, sipType_wxString, &label, &labelState, &imageId))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItem(index,column,*label,imageId);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label), sipType_wxString, labelState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemBackgroundColour, "SetItemBackgroundColour(item, col)\n"
"\n"
"Sets the background colour for this item.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxColour* col;
        int colState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemBackgroundColour(item,*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemColumnImage, "SetItemColumnImage(item, column, image) -> bool\n"
"\n"
"Sets the image associated with the item.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemColumnImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemColumnImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        long column;
        int image;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_column,
            sipName_image,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Blli", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &column, &image))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItemColumnImage(item,column,image);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemColumnImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemCount, "SetItemCount(count)\n"
"\n"
"This method can only be used with virtual list controls.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long count;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_count,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &count))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemCount(count);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemData, "SetItemData(item, data) -> bool\n"
"\n"
"Associates application-defined data with this item.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        long data;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &data))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItemData(item,data);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemData, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemFont, "SetItemFont(item, font)\n"
"\n"
"Sets the item's font.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxFont* font;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemFont(item,*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemImage, "SetItemImage(item, image, selImage=-1) -> bool\n"
"\n"
"Sets the unselected and selected images associated with the item.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        int image;
        int selImage = -1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_image,
            sipName_selImage,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bli|i", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &image, &selImage))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItemImage(item,image,selImage);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemPosition, "SetItemPosition(item, pos) -> bool\n"
"\n"
"Sets the position of the item, in icon or small icon view.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxPoint* pos;
        int posState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, sipType_wxPoint, &pos, &posState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItemPosition(item,*pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemState, "SetItemState(item, state, stateMask) -> bool\n"
"\n"
"Sets the item state.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        long state;
        long stateMask;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_state,
            sipName_stateMask,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Blll", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &state, &stateMask))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetItemState(item,state,stateMask);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemState, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemText, "SetItemText(item, text)\n"
"\n"
"Sets the item text for this item.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxString* text;
        int textState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, sipType_wxString, &text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemText(item,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetItemTextColour, "SetItemTextColour(item, col)\n"
"\n"
"Sets the colour for this item.");

extern "C" {static PyObject *meth_wxListCtrl_SetItemTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetItemTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxColour* col;
        int colState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemTextColour(item,*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetItemTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetSingleStyle, "SetSingleStyle(style, add=True)\n"
"\n"
"Adds or removes a single window style.");

extern "C" {static PyObject *meth_wxListCtrl_SetSingleStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetSingleStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long style;
        bool add = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
            sipName_add,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &style, &add))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSingleStyle(style,add);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetSingleStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetTextColour, "SetTextColour(col)\n"
"\n"
"Sets the text colour of the list control.");

extern "C" {static PyObject *meth_wxListCtrl_SetTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetWindowStyleFlag, "SetWindowStyleFlag(style)\n"
"\n"
"Sets the whole window style, deleting all items.");

extern "C" {static PyObject *meth_wxListCtrl_SetWindowStyleFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetWindowStyleFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long style;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &style))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWindowStyleFlag(style);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetWindowStyleFlag, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SortItems, "SortItems(fnSortCallBack) -> bool\n"
"\n"
"Call this function to sort the items in the list control.");

extern "C" {static PyObject *meth_wxListCtrl_SortItems(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SortItems(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        PyObject * fnSortCallBack;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fnSortCallBack,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BP0", &sipSelf, sipType_wxListCtrl, &sipCpp, &fnSortCallBack))
        {
            bool sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_SortItems(sipCpp, fnSortCallBack);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SortItems, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_HasCheckBoxes, "HasCheckBoxes() -> bool\n"
"\n"
"Returns true if checkboxes are enabled for list items.");

extern "C" {static PyObject *meth_wxListCtrl_HasCheckBoxes(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_HasCheckBoxes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasCheckBoxes();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_HasCheckBoxes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EnableCheckBoxes, "EnableCheckBoxes(enable=True) -> bool\n"
"\n"
"Enable or disable checkboxes for list items.");

extern "C" {static PyObject *meth_wxListCtrl_EnableCheckBoxes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EnableCheckBoxes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &enable))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnableCheckBoxes(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EnableCheckBoxes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_IsItemChecked, "IsItemChecked(item) -> bool\n"
"\n"
"Return true if the checkbox for the given wxListItem is checked.");

extern "C" {static PyObject *meth_wxListCtrl_IsItemChecked(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_IsItemChecked(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsItemChecked(item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_IsItemChecked, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_CheckItem, "CheckItem(item, check=True)\n"
"\n"
"Check or uncheck a wxListItem in a control using checkboxes.");

extern "C" {static PyObject *meth_wxListCtrl_CheckItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_CheckItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long item;
        bool check = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_check,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &check))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CheckItem(item,check);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_CheckItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_ExtendRulesAndAlternateColour, "ExtendRulesAndAlternateColour(extend=True)\n"
"\n"
"Extend rules and alternate rows background to the entire client area.");

extern "C" {static PyObject *meth_wxListCtrl_ExtendRulesAndAlternateColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_ExtendRulesAndAlternateColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool extend = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_extend,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &extend))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ExtendRulesAndAlternateColour(extend);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_ExtendRulesAndAlternateColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_ShowSortIndicator, "ShowSortIndicator(col, ascending=True)\n"
"\n"
"Show the sort indicator of a specific column in a specific direction.");

extern "C" {static PyObject *meth_wxListCtrl_ShowSortIndicator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_ShowSortIndicator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
        bool ascending = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_ascending,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &col, &ascending))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowSortIndicator(col,ascending);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_ShowSortIndicator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_RemoveSortIndicator, "RemoveSortIndicator()\n"
"\n"
"Remove the sort indicator from the column being used as sort key.");

extern "C" {static PyObject *meth_wxListCtrl_RemoveSortIndicator(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_RemoveSortIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RemoveSortIndicator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_RemoveSortIndicator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetSortIndicator, "GetSortIndicator() -> int\n"
"\n"
"Returns the column that shows the sort indicator.");

extern "C" {static PyObject *meth_wxListCtrl_GetSortIndicator(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetSortIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSortIndicator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetSortIndicator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetUpdatedAscendingSortIndicator, "GetUpdatedAscendingSortIndicator(col) -> bool\n"
"\n"
"Returns the new value to use for sort indicator after clicking a\n"
"column.");

extern "C" {static PyObject *meth_wxListCtrl_GetUpdatedAscendingSortIndicator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetUpdatedAscendingSortIndicator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int col;
        const  ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxListCtrl, &sipCpp, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetUpdatedAscendingSortIndicator(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetUpdatedAscendingSortIndicator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_IsAscendingSortIndicator, "IsAscendingSortIndicator() -> bool\n"
"\n"
"Returns true if the sort indicator direction is ascending, false when\n"
"the direction is descending.");

extern "C" {static PyObject *meth_wxListCtrl_IsAscendingSortIndicator(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_IsAscendingSortIndicator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsAscendingSortIndicator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_IsAscendingSortIndicator, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxListCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxListCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetClientAreaOrigin, doc_wxListCtrl_GetClientAreaOrigin);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_Validate, doc_wxListCtrl_Validate);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_TransferDataToWindow, doc_wxListCtrl_TransferDataToWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_TransferDataFromWindow, doc_wxListCtrl_TransferDataFromWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxListCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_InitDialog, doc_wxListCtrl_InitDialog);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_AcceptsFocus, doc_wxListCtrl_AcceptsFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_AcceptsFocusRecursively, doc_wxListCtrl_AcceptsFocusRecursively);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxListCtrl_AcceptsFocusFromKeyboard);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxListCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_AddChild, doc_wxListCtrl_AddChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxListCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_RemoveChild, doc_wxListCtrl_RemoveChild);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxListCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_InheritAttributes, doc_wxListCtrl_InheritAttributes);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_ShouldInheritColours, doc_wxListCtrl_ShouldInheritColours);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxListCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_OnInternalIdle, doc_wxListCtrl_OnInternalIdle);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxListCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxListCtrl_GetMainWindowOfCompositeControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii", &sipSelf, sipType_wxListCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_InformFirstDirection, doc_wxListCtrl_InformFirstDirection);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxListCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxListCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetCanFocus, doc_wxListCtrl_SetCanFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_Destroy, doc_wxListCtrl_Destroy);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxListCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_SetValidator, doc_wxListCtrl_SetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxListCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxListCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetValidator, doc_wxListCtrl_GetValidator);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EnableVisibleFocus, "EnableVisibleFocus(self, enabled: bool)");

extern "C" {static PyObject *meth_wxListCtrl_EnableVisibleFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EnableVisibleFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enabled;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enabled,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxListCtrl, &sipCpp, &enabled))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxListCtrl::EnableVisibleFocus(enabled) : sipCpp->EnableVisibleFocus(enabled));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EnableVisibleFocus, doc_wxListCtrl_EnableVisibleFocus);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_ProcessEvent, doc_wxListCtrl_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxListCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxListCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoEnable, doc_wxListCtrl_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxListCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoGetPosition, doc_wxListCtrl_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxListCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoGetSize, doc_wxListCtrl_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxListCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoGetClientSize, doc_wxListCtrl_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxListCtrl_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoGetBestSize, doc_wxListCtrl_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxListCtrl_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoGetBestClientSize, doc_wxListCtrl_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxListCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxListCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoSetSize, doc_wxListCtrl_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxListCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxListCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoSetClientSize, doc_wxListCtrl_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxListCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxListCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoSetSizeHints, doc_wxListCtrl_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxListCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxListCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoMoveWindow, doc_wxListCtrl_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxListCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoSetWindowVariant, doc_wxListCtrl_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxListCtrl_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetDefaultBorder, doc_wxListCtrl_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxListCtrl_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetDefaultBorderForControl, doc_wxListCtrl_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxListCtrl_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoFreeze, doc_wxListCtrl_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxListCtrl_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_DoThaw, doc_wxListCtrl_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_HasTransparentBackground, doc_wxListCtrl_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_TryBefore, doc_wxListCtrl_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxListCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_TryAfter, doc_wxListCtrl_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxListCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxListCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_EnableSystemTheme, "EnableSystemTheme(enable=True)\n"
"\n"
"Can be used to disable the system theme of controls using it by\n"
"default.");

extern "C" {static PyObject *meth_wxListCtrl_EnableSystemTheme(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_EnableSystemTheme(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable = 1;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxListCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableSystemTheme(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_EnableSystemTheme, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_HitTestSubItem, "HitTestSubItem(point) -> (item, flags, subitem)\n"
"\n"
"Determines which item (if any) is at the specified point, giving\n"
"details in flags.");

extern "C" {static PyObject *meth_wxListCtrl_HitTestSubItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_HitTestSubItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* point;
        int pointState = 0;
         ::wxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxListCtrl, &sipCpp, sipType_wxPoint, &point, &pointState))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_HitTestSubItem(sipCpp, point);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(const_cast< ::wxPoint *>(point), sipType_wxPoint, pointState);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_HitTestSubItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_HasColumnOrderSupport, "HasColumnOrderSupport() -> bool");

extern "C" {static PyObject *meth_wxListCtrl_HasColumnOrderSupport(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_HasColumnOrderSupport(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
            bool sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_HasColumnOrderSupport(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_HasColumnOrderSupport, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_GetMainWindow, "GetMainWindow() -> Window");

extern "C" {static PyObject *meth_wxListCtrl_GetMainWindow(PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_GetMainWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxListCtrl, &sipCpp))
        {
             ::wxWindow*sipRes = 0;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxListCtrl_GetMainWindow(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_GetMainWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_OnGetItemAttr, "OnGetItemAttr(item) -> ItemAttr\n"
"\n"
"This function may be overridden in the derived class for a control\n"
"with wxLC_VIRTUAL style.");

extern "C" {static PyObject *meth_wxListCtrl_OnGetItemAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_OnGetItemAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long item;
        const sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
             ::wxItemAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_OnGetItemAttr(sipSelfWasArg,item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxItemAttr,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_OnGetItemAttr, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_OnGetItemColumnImage, "OnGetItemColumnImage(item, column) -> int\n"
"\n"
"Override this function in the derived class for a control with\n"
"wxLC_VIRTUAL and wxLC_REPORT styles in order to specify the image\n"
"index for the given line and column.");

extern "C" {static PyObject *meth_wxListCtrl_OnGetItemColumnImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_OnGetItemColumnImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long item;
        long column;
        const sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &column))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_OnGetItemColumnImage(sipSelfWasArg,item,column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_OnGetItemColumnImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_OnGetItemImage, "OnGetItemImage(item) -> int\n"
"\n"
"This function must be overridden in the derived class for a control\n"
"with wxLC_VIRTUAL style using images.");

extern "C" {static PyObject *meth_wxListCtrl_OnGetItemImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_OnGetItemImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long item;
        const sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_OnGetItemImage(sipSelfWasArg,item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_OnGetItemImage, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_OnGetItemText, "OnGetItemText(item, column) -> String\n"
"\n"
"This function must be overridden in the derived class for a control\n"
"with wxLC_VIRTUAL style.");

extern "C" {static PyObject *meth_wxListCtrl_OnGetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_OnGetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long item;
        long column;
        const sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bll", &sipSelf, sipType_wxListCtrl, &sipCpp, &item, &column))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->sipProtectVirt_OnGetItemText(sipSelfWasArg,item,column));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_OnGetItemText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxListCtrl_OnGetItemIsChecked, "OnGetItemIsChecked(item) -> bool\n"
"\n"
"This function must be overridden in the derived class for a control\n"
"with wxLC_VIRTUAL style that uses checkboxes.");

extern "C" {static PyObject *meth_wxListCtrl_OnGetItemIsChecked(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxListCtrl_OnGetItemIsChecked(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long item;
        const sipwxListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxListCtrl, &sipCpp, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_OnGetItemIsChecked(sipSelfWasArg,item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_ListCtrl, sipName_OnGetItemIsChecked, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxListCtrl(void *, const sipTypeDef *);}
static void *cast_wxListCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxListCtrl *sipCpp = reinterpret_cast< ::wxListCtrl *>(sipCppV);

    if (targetType == sipType_wxListCtrl)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxControl)->ctd_cast(static_cast< ::wxControl *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxListCtrl(void *, int);}
static void release_wxListCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxListCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxListCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxListCtrl(Py_ssize_t);}
static void *array_wxListCtrl(Py_ssize_t sipNrElem)
{
    return new  ::wxListCtrl[sipNrElem];
}


extern "C" {static void dealloc_wxListCtrl(sipSimpleWrapper *);}
static void dealloc_wxListCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxListCtrl *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxListCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxListCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxListCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxListCtrl *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxListCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxLC_ICON;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxListCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ9J1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator, sipType_wxString, &name, &nameState))
        {
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxListCtrl(parent,id,*pos,*size,style,*validator,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxListCtrl[] = {{97, 255, 1}};


static PyMethodDef methods_wxListCtrl[] = {
    {sipName_AcceptsFocus, meth_wxListCtrl_AcceptsFocus, METH_VARARGS, doc_wxListCtrl_AcceptsFocus},
    {sipName_AcceptsFocusFromKeyboard, meth_wxListCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, doc_wxListCtrl_AcceptsFocusFromKeyboard},
    {sipName_AcceptsFocusRecursively, meth_wxListCtrl_AcceptsFocusRecursively, METH_VARARGS, doc_wxListCtrl_AcceptsFocusRecursively},
    {sipName_AddChild, SIP_MLMETH_CAST(meth_wxListCtrl_AddChild), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_AddChild},
    {sipName_AppendColumn, SIP_MLMETH_CAST(meth_wxListCtrl_AppendColumn), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_AppendColumn},
    {sipName_Arrange, SIP_MLMETH_CAST(meth_wxListCtrl_Arrange), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_Arrange},
    {sipName_AssignImageList, SIP_MLMETH_CAST(meth_wxListCtrl_AssignImageList), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_AssignImageList},
    {sipName_CheckItem, SIP_MLMETH_CAST(meth_wxListCtrl_CheckItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_CheckItem},
    {sipName_ClearAll, meth_wxListCtrl_ClearAll, METH_VARARGS, doc_wxListCtrl_ClearAll},
    {sipName_Create, SIP_MLMETH_CAST(meth_wxListCtrl_Create), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_Create},
    {sipName_DeleteAllColumns, meth_wxListCtrl_DeleteAllColumns, METH_VARARGS, doc_wxListCtrl_DeleteAllColumns},
    {sipName_DeleteAllItems, meth_wxListCtrl_DeleteAllItems, METH_VARARGS, doc_wxListCtrl_DeleteAllItems},
    {sipName_DeleteColumn, SIP_MLMETH_CAST(meth_wxListCtrl_DeleteColumn), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DeleteColumn},
    {sipName_DeleteItem, SIP_MLMETH_CAST(meth_wxListCtrl_DeleteItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DeleteItem},
    {sipName_Destroy, meth_wxListCtrl_Destroy, METH_VARARGS, doc_wxListCtrl_Destroy},
    {sipName_DoEnable, SIP_MLMETH_CAST(meth_wxListCtrl_DoEnable), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoEnable},
    {sipName_DoFreeze, meth_wxListCtrl_DoFreeze, METH_VARARGS, doc_wxListCtrl_DoFreeze},
    {sipName_DoGetBestClientSize, meth_wxListCtrl_DoGetBestClientSize, METH_VARARGS, doc_wxListCtrl_DoGetBestClientSize},
    {sipName_DoGetBestSize, meth_wxListCtrl_DoGetBestSize, METH_VARARGS, doc_wxListCtrl_DoGetBestSize},
    {sipName_DoGetClientSize, SIP_MLMETH_CAST(meth_wxListCtrl_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoGetClientSize},
    {sipName_DoGetPosition, SIP_MLMETH_CAST(meth_wxListCtrl_DoGetPosition), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoGetPosition},
    {sipName_DoGetSize, SIP_MLMETH_CAST(meth_wxListCtrl_DoGetSize), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoGetSize},
    {sipName_DoMoveWindow, SIP_MLMETH_CAST(meth_wxListCtrl_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoMoveWindow},
    {sipName_DoSetClientSize, SIP_MLMETH_CAST(meth_wxListCtrl_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoSetClientSize},
    {sipName_DoSetSize, SIP_MLMETH_CAST(meth_wxListCtrl_DoSetSize), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoSetSize},
    {sipName_DoSetSizeHints, SIP_MLMETH_CAST(meth_wxListCtrl_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoSetSizeHints},
    {sipName_DoSetWindowVariant, SIP_MLMETH_CAST(meth_wxListCtrl_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_DoSetWindowVariant},
    {sipName_DoThaw, meth_wxListCtrl_DoThaw, METH_VARARGS, doc_wxListCtrl_DoThaw},
    {sipName_EditLabel, SIP_MLMETH_CAST(meth_wxListCtrl_EditLabel), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EditLabel},
    {sipName_EnableAlternateRowColours, SIP_MLMETH_CAST(meth_wxListCtrl_EnableAlternateRowColours), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EnableAlternateRowColours},
    {sipName_EnableBellOnNoMatch, SIP_MLMETH_CAST(meth_wxListCtrl_EnableBellOnNoMatch), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EnableBellOnNoMatch},
    {sipName_EnableCheckBoxes, SIP_MLMETH_CAST(meth_wxListCtrl_EnableCheckBoxes), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EnableCheckBoxes},
    {sipName_EnableSystemTheme, SIP_MLMETH_CAST(meth_wxListCtrl_EnableSystemTheme), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EnableSystemTheme},
    {sipName_EnableVisibleFocus, SIP_MLMETH_CAST(meth_wxListCtrl_EnableVisibleFocus), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EnableVisibleFocus},
    {sipName_EnsureVisible, SIP_MLMETH_CAST(meth_wxListCtrl_EnsureVisible), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_EnsureVisible},
    {sipName_ExtendRulesAndAlternateColour, SIP_MLMETH_CAST(meth_wxListCtrl_ExtendRulesAndAlternateColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_ExtendRulesAndAlternateColour},
    {sipName_FindItem, SIP_MLMETH_CAST(meth_wxListCtrl_FindItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_FindItem},
    {sipName_GetAlternateRowColour, meth_wxListCtrl_GetAlternateRowColour, METH_VARARGS, doc_wxListCtrl_GetAlternateRowColour},
    {sipName_GetClassDefaultAttributes, SIP_MLMETH_CAST(meth_wxListCtrl_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetClassDefaultAttributes},
    {sipName_GetClientAreaOrigin, meth_wxListCtrl_GetClientAreaOrigin, METH_VARARGS, doc_wxListCtrl_GetClientAreaOrigin},
    {sipName_GetColumn, SIP_MLMETH_CAST(meth_wxListCtrl_GetColumn), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetColumn},
    {sipName_GetColumnCount, meth_wxListCtrl_GetColumnCount, METH_VARARGS, doc_wxListCtrl_GetColumnCount},
    {sipName_GetColumnIndexFromOrder, SIP_MLMETH_CAST(meth_wxListCtrl_GetColumnIndexFromOrder), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetColumnIndexFromOrder},
    {sipName_GetColumnOrder, SIP_MLMETH_CAST(meth_wxListCtrl_GetColumnOrder), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetColumnOrder},
    {sipName_GetColumnWidth, SIP_MLMETH_CAST(meth_wxListCtrl_GetColumnWidth), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetColumnWidth},
    {sipName_GetColumnsOrder, meth_wxListCtrl_GetColumnsOrder, METH_VARARGS, doc_wxListCtrl_GetColumnsOrder},
    {sipName_GetCountPerPage, meth_wxListCtrl_GetCountPerPage, METH_VARARGS, doc_wxListCtrl_GetCountPerPage},
    {sipName_GetDefaultBorder, meth_wxListCtrl_GetDefaultBorder, METH_VARARGS, doc_wxListCtrl_GetDefaultBorder},
    {sipName_GetDefaultBorderForControl, meth_wxListCtrl_GetDefaultBorderForControl, METH_VARARGS, doc_wxListCtrl_GetDefaultBorderForControl},
    {sipName_GetEditControl, meth_wxListCtrl_GetEditControl, METH_VARARGS, doc_wxListCtrl_GetEditControl},
    {sipName_GetImageList, SIP_MLMETH_CAST(meth_wxListCtrl_GetImageList), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetImageList},
    {sipName_GetItem, SIP_MLMETH_CAST(meth_wxListCtrl_GetItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItem},
    {sipName_GetItemBackgroundColour, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemBackgroundColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemBackgroundColour},
    {sipName_GetItemCount, meth_wxListCtrl_GetItemCount, METH_VARARGS, doc_wxListCtrl_GetItemCount},
    {sipName_GetItemData, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemData), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemData},
    {sipName_GetItemFont, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemFont), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemFont},
    {sipName_GetItemPosition, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemPosition), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemPosition},
    {sipName_GetItemRect, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemRect), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemRect},
    {sipName_GetItemSpacing, meth_wxListCtrl_GetItemSpacing, METH_VARARGS, doc_wxListCtrl_GetItemSpacing},
    {sipName_GetItemState, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemState), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemState},
    {sipName_GetItemText, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemText), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemText},
    {sipName_GetItemTextColour, SIP_MLMETH_CAST(meth_wxListCtrl_GetItemTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetItemTextColour},
    {sipName_GetMainWindow, meth_wxListCtrl_GetMainWindow, METH_VARARGS, doc_wxListCtrl_GetMainWindow},
    {sipName_GetMainWindowOfCompositeControl, meth_wxListCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, doc_wxListCtrl_GetMainWindowOfCompositeControl},
    {sipName_GetNextItem, SIP_MLMETH_CAST(meth_wxListCtrl_GetNextItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetNextItem},
    {sipName_GetSelectedItemCount, meth_wxListCtrl_GetSelectedItemCount, METH_VARARGS, doc_wxListCtrl_GetSelectedItemCount},
    {sipName_GetSortIndicator, meth_wxListCtrl_GetSortIndicator, METH_VARARGS, doc_wxListCtrl_GetSortIndicator},
    {sipName_GetSubItemRect, SIP_MLMETH_CAST(meth_wxListCtrl_GetSubItemRect), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetSubItemRect},
    {sipName_GetTextColour, meth_wxListCtrl_GetTextColour, METH_VARARGS, doc_wxListCtrl_GetTextColour},
    {sipName_GetTopItem, meth_wxListCtrl_GetTopItem, METH_VARARGS, doc_wxListCtrl_GetTopItem},
    {sipName_GetUpdatedAscendingSortIndicator, SIP_MLMETH_CAST(meth_wxListCtrl_GetUpdatedAscendingSortIndicator), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_GetUpdatedAscendingSortIndicator},
    {sipName_GetValidator, meth_wxListCtrl_GetValidator, METH_VARARGS, doc_wxListCtrl_GetValidator},
    {sipName_GetViewRect, meth_wxListCtrl_GetViewRect, METH_VARARGS, doc_wxListCtrl_GetViewRect},
    {sipName_HasCheckBoxes, meth_wxListCtrl_HasCheckBoxes, METH_VARARGS, doc_wxListCtrl_HasCheckBoxes},
    {sipName_HasColumnOrderSupport, meth_wxListCtrl_HasColumnOrderSupport, METH_VARARGS, doc_wxListCtrl_HasColumnOrderSupport},
    {sipName_HasTransparentBackground, meth_wxListCtrl_HasTransparentBackground, METH_VARARGS, doc_wxListCtrl_HasTransparentBackground},
    {sipName_HitTest, SIP_MLMETH_CAST(meth_wxListCtrl_HitTest), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_HitTest},
    {sipName_HitTestSubItem, SIP_MLMETH_CAST(meth_wxListCtrl_HitTestSubItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_HitTestSubItem},
    {sipName_InReportView, meth_wxListCtrl_InReportView, METH_VARARGS, doc_wxListCtrl_InReportView},
    {sipName_InformFirstDirection, SIP_MLMETH_CAST(meth_wxListCtrl_InformFirstDirection), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_InformFirstDirection},
    {sipName_InheritAttributes, meth_wxListCtrl_InheritAttributes, METH_VARARGS, doc_wxListCtrl_InheritAttributes},
    {sipName_InitDialog, meth_wxListCtrl_InitDialog, METH_VARARGS, doc_wxListCtrl_InitDialog},
    {sipName_InsertColumn, SIP_MLMETH_CAST(meth_wxListCtrl_InsertColumn), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_InsertColumn},
    {sipName_InsertItem, SIP_MLMETH_CAST(meth_wxListCtrl_InsertItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_InsertItem},
    {sipName_IsAscendingSortIndicator, meth_wxListCtrl_IsAscendingSortIndicator, METH_VARARGS, doc_wxListCtrl_IsAscendingSortIndicator},
    {sipName_IsEmpty, meth_wxListCtrl_IsEmpty, METH_VARARGS, doc_wxListCtrl_IsEmpty},
    {sipName_IsItemChecked, SIP_MLMETH_CAST(meth_wxListCtrl_IsItemChecked), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_IsItemChecked},
    {sipName_IsVirtual, meth_wxListCtrl_IsVirtual, METH_VARARGS, doc_wxListCtrl_IsVirtual},
    {sipName_IsVisible, SIP_MLMETH_CAST(meth_wxListCtrl_IsVisible), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_IsVisible},
    {sipName_OnGetItemAttr, SIP_MLMETH_CAST(meth_wxListCtrl_OnGetItemAttr), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_OnGetItemAttr},
    {sipName_OnGetItemColumnImage, SIP_MLMETH_CAST(meth_wxListCtrl_OnGetItemColumnImage), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_OnGetItemColumnImage},
    {sipName_OnGetItemImage, SIP_MLMETH_CAST(meth_wxListCtrl_OnGetItemImage), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_OnGetItemImage},
    {sipName_OnGetItemIsChecked, SIP_MLMETH_CAST(meth_wxListCtrl_OnGetItemIsChecked), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_OnGetItemIsChecked},
    {sipName_OnGetItemText, SIP_MLMETH_CAST(meth_wxListCtrl_OnGetItemText), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_OnGetItemText},
    {sipName_OnInternalIdle, meth_wxListCtrl_OnInternalIdle, METH_VARARGS, doc_wxListCtrl_OnInternalIdle},
    {sipName_ProcessEvent, SIP_MLMETH_CAST(meth_wxListCtrl_ProcessEvent), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_ProcessEvent},
    {sipName_RefreshItem, SIP_MLMETH_CAST(meth_wxListCtrl_RefreshItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_RefreshItem},
    {sipName_RefreshItems, SIP_MLMETH_CAST(meth_wxListCtrl_RefreshItems), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_RefreshItems},
    {sipName_RemoveChild, SIP_MLMETH_CAST(meth_wxListCtrl_RemoveChild), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_RemoveChild},
    {sipName_RemoveSortIndicator, meth_wxListCtrl_RemoveSortIndicator, METH_VARARGS, doc_wxListCtrl_RemoveSortIndicator},
    {sipName_ScrollList, SIP_MLMETH_CAST(meth_wxListCtrl_ScrollList), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_ScrollList},
    {sipName_SendDestroyEvent, meth_wxListCtrl_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {sipName_SetAlternateRowColour, SIP_MLMETH_CAST(meth_wxListCtrl_SetAlternateRowColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetAlternateRowColour},
    {sipName_SetBackgroundColour, SIP_MLMETH_CAST(meth_wxListCtrl_SetBackgroundColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetBackgroundColour},
    {sipName_SetCanFocus, SIP_MLMETH_CAST(meth_wxListCtrl_SetCanFocus), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetCanFocus},
    {sipName_SetColumn, SIP_MLMETH_CAST(meth_wxListCtrl_SetColumn), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetColumn},
    {sipName_SetColumnWidth, SIP_MLMETH_CAST(meth_wxListCtrl_SetColumnWidth), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetColumnWidth},
    {sipName_SetColumnsOrder, SIP_MLMETH_CAST(meth_wxListCtrl_SetColumnsOrder), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetColumnsOrder},
    {sipName_SetHeaderAttr, SIP_MLMETH_CAST(meth_wxListCtrl_SetHeaderAttr), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetHeaderAttr},
    {sipName_SetImageList, SIP_MLMETH_CAST(meth_wxListCtrl_SetImageList), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetImageList},
    {sipName_SetItem, SIP_MLMETH_CAST(meth_wxListCtrl_SetItem), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItem},
    {sipName_SetItemBackgroundColour, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemBackgroundColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemBackgroundColour},
    {sipName_SetItemColumnImage, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemColumnImage), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemColumnImage},
    {sipName_SetItemCount, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemCount), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemCount},
    {sipName_SetItemData, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemData), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemData},
    {sipName_SetItemFont, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemFont), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemFont},
    {sipName_SetItemImage, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemImage), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemImage},
    {sipName_SetItemPosition, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemPosition), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemPosition},
    {sipName_SetItemState, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemState), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemState},
    {sipName_SetItemText, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemText), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemText},
    {sipName_SetItemTextColour, SIP_MLMETH_CAST(meth_wxListCtrl_SetItemTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetItemTextColour},
    {sipName_SetNormalImages, SIP_MLMETH_CAST(meth_wxListCtrl_SetNormalImages), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetNormalImages},
    {sipName_SetSingleStyle, SIP_MLMETH_CAST(meth_wxListCtrl_SetSingleStyle), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetSingleStyle},
    {sipName_SetSmallImages, SIP_MLMETH_CAST(meth_wxListCtrl_SetSmallImages), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetSmallImages},
    {sipName_SetTextColour, SIP_MLMETH_CAST(meth_wxListCtrl_SetTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetTextColour},
    {sipName_SetValidator, SIP_MLMETH_CAST(meth_wxListCtrl_SetValidator), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetValidator},
    {sipName_SetWindowStyleFlag, SIP_MLMETH_CAST(meth_wxListCtrl_SetWindowStyleFlag), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SetWindowStyleFlag},
    {sipName_ShouldInheritColours, meth_wxListCtrl_ShouldInheritColours, METH_VARARGS, doc_wxListCtrl_ShouldInheritColours},
    {sipName_ShowSortIndicator, SIP_MLMETH_CAST(meth_wxListCtrl_ShowSortIndicator), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_ShowSortIndicator},
    {sipName_SortItems, SIP_MLMETH_CAST(meth_wxListCtrl_SortItems), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_SortItems},
    {sipName_TransferDataFromWindow, meth_wxListCtrl_TransferDataFromWindow, METH_VARARGS, doc_wxListCtrl_TransferDataFromWindow},
    {sipName_TransferDataToWindow, meth_wxListCtrl_TransferDataToWindow, METH_VARARGS, doc_wxListCtrl_TransferDataToWindow},
    {sipName_TryAfter, SIP_MLMETH_CAST(meth_wxListCtrl_TryAfter), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_TryAfter},
    {sipName_TryBefore, SIP_MLMETH_CAST(meth_wxListCtrl_TryBefore), METH_VARARGS|METH_KEYWORDS, doc_wxListCtrl_TryBefore},
    {sipName_Validate, meth_wxListCtrl_Validate, METH_VARARGS, doc_wxListCtrl_Validate}
};

sipVariableDef variables_wxListCtrl[] = {
    {PropertyVariable, sipName_ViewRect, &methods_wxListCtrl[72], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TopItem, &methods_wxListCtrl[69], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TextColour, &methods_wxListCtrl[68], &methods_wxListCtrl[124], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SortIndicator, &methods_wxListCtrl[66], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SelectedItemCount, &methods_wxListCtrl[65], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MainWindow, &methods_wxListCtrl[62], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ItemSpacing, &methods_wxListCtrl[58], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ItemRect, &methods_wxListCtrl[57], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ItemPosition, &methods_wxListCtrl[56], &methods_wxListCtrl[117], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ItemCount, &methods_wxListCtrl[53], &methods_wxListCtrl[113], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Item, &methods_wxListCtrl[51], &methods_wxListCtrl[110], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_EditControl, &methods_wxListCtrl[49], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CountPerPage, &methods_wxListCtrl[46], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColumnsOrder, &methods_wxListCtrl[45], &methods_wxListCtrl[107], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColumnCount, &methods_wxListCtrl[41], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Column, &methods_wxListCtrl[40], &methods_wxListCtrl[105], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_AlternateRowColour, &methods_wxListCtrl[37], &methods_wxListCtrl[102], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxListCtrl, "ListCtrl()\n"
"ListCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=LC_ICON, validator=DefaultValidator, name=ListCtrlNameStr)\n"
"\n"
"A list control presents lists in a number of formats: list view,\n"
"report view, icon view and small icon view.");


sipClassTypeDef sipTypeDef__core_wxListCtrl = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxListCtrl,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_ListCtrl,
        {0, 0, 1},
        135, methods_wxListCtrl,
        0, SIP_NULLPTR,
        17, variables_wxListCtrl,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxListCtrl,
    -1,
    -1,
    supers_wxListCtrl,
    SIP_NULLPTR,
    init_type_wxListCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxListCtrl,
    SIP_NULLPTR,
    array_wxListCtrl,
    SIP_NULLPTR,
    release_wxListCtrl,
    cast_wxListCtrl,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
