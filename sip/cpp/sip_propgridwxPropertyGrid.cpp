/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.7.9
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"
        #include <wx/propgrid/propgrid.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/window.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/colour.h>
        #include <wx/propgrid/propgridiface.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/textctrl.h>
        #include <wx/font.h>
        #include <wx/statusbr.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/region.h>
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/datetime.h>
        #include <wx/bmpbndl.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/propgrid/propgridpagestate.h>
        #include <wx/bitmap.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/propgridpagestate.h>


class sipwxPropertyGrid : public  ::wxPropertyGrid
{
public:
    sipwxPropertyGrid();
    sipwxPropertyGrid( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxPropertyGrid();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
    bool sipProtectVirt_ShouldScrollToChildOnFocus(bool, ::wxWindow*);
     ::wxSize sipProtectVirt_GetSizeAvailableForScrollTarget(bool,const  ::wxSize&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize GetSizeAvailableForScrollTarget(const  ::wxSize&) SIP_OVERRIDE;
    bool ShouldScrollToChildOnFocus( ::wxWindow*) SIP_OVERRIDE;
    bool SendAutoScrollEvents( ::wxScrollWinEvent&) const SIP_OVERRIDE;
    void OnDraw( ::wxDC&) SIP_OVERRIDE;
    bool CommitChangesFromEditor( ::wxUint32) SIP_OVERRIDE;
    void DoOnValidationFailureReset( ::wxPGProperty*) SIP_OVERRIDE;
    bool DoOnValidationFailure( ::wxPGProperty*, ::wxPGVariant&) SIP_OVERRIDE;
     ::wxStatusBar* GetStatusBar() SIP_OVERRIDE;
    void DoHidePropertyError( ::wxPGProperty*) SIP_OVERRIDE;
    void DoShowPropertyError( ::wxPGProperty*,const  ::wxString&) SIP_OVERRIDE;
    void Clear() SIP_OVERRIDE;
     ::wxPGVIterator GetVIterator(int) const SIP_OVERRIDE;
    void RefreshGrid( ::wxPropertyGridPageState*) SIP_OVERRIDE;
    void RefreshProperty( ::wxPGProperty*) SIP_OVERRIDE;
     ::wxSize DoGetBestClientSize() const SIP_OVERRIDE;
     ::wxSize DoGetBestSize() const SIP_OVERRIDE;
    void DoThaw() SIP_OVERRIDE;
    void DoFreeze() SIP_OVERRIDE;
     ::wxBorder GetDefaultBorderForControl() const SIP_OVERRIDE;
     ::wxBorder GetDefaultBorder() const SIP_OVERRIDE;
    void DoSetWindowVariant( ::wxWindowVariant) SIP_OVERRIDE;
    void DoMoveWindow(int,int,int,int) SIP_OVERRIDE;
    void DoSetSizeHints(int,int,int,int,int,int) SIP_OVERRIDE;
    void DoSetClientSize(int,int) SIP_OVERRIDE;
    void DoSetSize(int,int,int,int,int) SIP_OVERRIDE;
    void DoGetClientSize(int*,int*) const SIP_OVERRIDE;
    void DoGetSize(int*,int*) const SIP_OVERRIDE;
    void DoGetPosition(int*,int*) const SIP_OVERRIDE;
    void DoEnable(bool) SIP_OVERRIDE;
     ::wxWindow* GetMainWindowOfCompositeControl() SIP_OVERRIDE;
    void OnInternalIdle() SIP_OVERRIDE;
    void InitDialog() SIP_OVERRIDE;
    void InheritAttributes() SIP_OVERRIDE;
    bool Destroy() SIP_OVERRIDE;
    bool Validate() SIP_OVERRIDE;
    bool TransferDataToWindow() SIP_OVERRIDE;
    bool TransferDataFromWindow() SIP_OVERRIDE;
    void SetValidator(const  ::wxValidator&) SIP_OVERRIDE;
     ::wxValidator* GetValidator() SIP_OVERRIDE;
    bool ShouldInheritColours() const SIP_OVERRIDE;
    bool HasTransparentBackground() SIP_OVERRIDE;
     ::wxPoint GetClientAreaOrigin() const SIP_OVERRIDE;
    bool InformFirstDirection(int,int,int) SIP_OVERRIDE;
    void EnableVisibleFocus(bool) SIP_OVERRIDE;
    void SetCanFocus(bool) SIP_OVERRIDE;
    bool AcceptsFocusRecursively() const SIP_OVERRIDE;
    bool AcceptsFocusFromKeyboard() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool TryAfter( ::wxEvent&) SIP_OVERRIDE;
    bool TryBefore( ::wxEvent&) SIP_OVERRIDE;
    bool ProcessEvent( ::wxEvent&) SIP_OVERRIDE;
    void AddChild( ::wxWindowBase*) SIP_OVERRIDE;
    void RemoveChild( ::wxWindowBase*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPropertyGrid(const sipwxPropertyGrid &);
    sipwxPropertyGrid &operator = (const sipwxPropertyGrid &);

    char sipPyMethods[53];
};

sipwxPropertyGrid::sipwxPropertyGrid():  ::wxPropertyGrid(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPropertyGrid::sipwxPropertyGrid( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxPropertyGrid(parent,id,pos,size,style,name), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPropertyGrid::~sipwxPropertyGrid()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxPropertyGrid::GetSizeAvailableForScrollTarget(const  ::wxSize& size)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[0], &sipPySelf, SIP_NULLPTR, sipName_GetSizeAvailableForScrollTarget);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetSizeAvailableForScrollTarget(size);

    extern  ::wxSize sipVH__propgrid_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    return sipVH__propgrid_64(sipGILState, 0, sipPySelf, sipMeth, size);
}

bool sipwxPropertyGrid::ShouldScrollToChildOnFocus( ::wxWindow*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_ShouldScrollToChildOnFocus);

    if (!sipMeth)
        return  ::wxPropertyGrid::ShouldScrollToChildOnFocus(child);

    extern bool sipVH__propgrid_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*);

    return sipVH__propgrid_63(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxPropertyGrid::SendAutoScrollEvents( ::wxScrollWinEvent& event) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[2]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_SendAutoScrollEvents);

    if (!sipMeth)
        return  ::wxPropertyGrid::SendAutoScrollEvents(event);

    extern bool sipVH__propgrid_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxScrollWinEvent&);

    return sipVH__propgrid_62(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxPropertyGrid::OnDraw( ::wxDC& dc)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_OnDraw);

    if (!sipMeth)
    {
         ::wxPropertyGrid::OnDraw(dc);
        return;
    }

    extern void sipVH__propgrid_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&);

    sipVH__propgrid_61(sipGILState, 0, sipPySelf, sipMeth, dc);
}

bool sipwxPropertyGrid::CommitChangesFromEditor( ::wxUint32 flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_CommitChangesFromEditor);

    if (!sipMeth)
        return  ::wxPropertyGrid::CommitChangesFromEditor(flags);

    extern bool sipVH__propgrid_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxUint32);

    return sipVH__propgrid_60(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxPropertyGrid::DoOnValidationFailureReset( ::wxPGProperty*property)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[5], &sipPySelf, SIP_NULLPTR, sipName_DoOnValidationFailureReset);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoOnValidationFailureReset(property);
        return;
    }

    extern void sipVH__propgrid_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*);

    sipVH__propgrid_56(sipGILState, 0, sipPySelf, sipMeth, property);
}

bool sipwxPropertyGrid::DoOnValidationFailure( ::wxPGProperty*property, ::wxPGVariant& invalidValue)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_DoOnValidationFailure);

    if (!sipMeth)
        return  ::wxPropertyGrid::DoOnValidationFailure(property,invalidValue);

    extern bool sipVH__propgrid_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*, ::wxPGVariant&);

    return sipVH__propgrid_59(sipGILState, 0, sipPySelf, sipMeth, property, invalidValue);
}

 ::wxStatusBar* sipwxPropertyGrid::GetStatusBar()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_GetStatusBar);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetStatusBar();

    extern  ::wxStatusBar* sipVH__propgrid_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_58(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoHidePropertyError( ::wxPGProperty*property)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[8], &sipPySelf, SIP_NULLPTR, sipName_DoHidePropertyError);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoHidePropertyError(property);
        return;
    }

    extern void sipVH__propgrid_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*);

    sipVH__propgrid_56(sipGILState, 0, sipPySelf, sipMeth, property);
}

void sipwxPropertyGrid::DoShowPropertyError( ::wxPGProperty*property,const  ::wxString& msg)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_DoShowPropertyError);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoShowPropertyError(property,msg);
        return;
    }

    extern void sipVH__propgrid_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*,const  ::wxString&);

    sipVH__propgrid_57(sipGILState, 0, sipPySelf, sipMeth, property, msg);
}

void sipwxPropertyGrid::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_Clear);

    if (!sipMeth)
    {
         ::wxPropertyGrid::Clear();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVIterator sipwxPropertyGrid::GetVIterator(int flags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetVIterator);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetVIterator(flags);

    extern  ::wxPGVIterator sipVH__propgrid_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_54(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxPropertyGrid::RefreshGrid( ::wxPropertyGridPageState*state)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_RefreshGrid);

    if (!sipMeth)
    {
         ::wxPropertyGrid::RefreshGrid(state);
        return;
    }

    extern void sipVH__propgrid_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPropertyGridPageState*);

    sipVH__propgrid_55(sipGILState, 0, sipPySelf, sipMeth, state);
}

void sipwxPropertyGrid::RefreshProperty( ::wxPGProperty*p)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[13], &sipPySelf, SIP_NULLPTR, sipName_RefreshProperty);

    if (!sipMeth)
    {
         ::wxPropertyGrid::RefreshProperty(p);
        return;
    }

    extern void sipVH__propgrid_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGProperty*);

    sipVH__propgrid_56(sipGILState, 0, sipPySelf, sipMeth, p);
}

 ::wxSize sipwxPropertyGrid::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[14]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxPropertyGrid::DoGetBestClientSize();

    extern  ::wxSize sipVH__propgrid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_36(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxPropertyGrid::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[15]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxPropertyGrid::DoGetBestSize();

    extern  ::wxSize sipVH__propgrid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_36(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoThaw();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoFreeze();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxPropertyGrid::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[18]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__propgrid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_37(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxPropertyGrid::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[19]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetDefaultBorder();

    extern  ::wxBorder sipVH__propgrid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_37(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__propgrid_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__propgrid_38(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxPropertyGrid::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[21], &sipPySelf, SIP_NULLPTR, sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__propgrid_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__propgrid_39(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxPropertyGrid::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__propgrid_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__propgrid_40(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxPropertyGrid::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__propgrid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__propgrid_41(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxPropertyGrid::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__propgrid_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__propgrid_42(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxPropertyGrid::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[25]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__propgrid_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__propgrid_43(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxPropertyGrid::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoGetSize(width,height);
        return;
    }

    extern void sipVH__propgrid_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__propgrid_43(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxPropertyGrid::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[27]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__propgrid_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__propgrid_43(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxPropertyGrid::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxPropertyGrid::DoEnable(enable);
        return;
    }

    extern void sipVH__propgrid_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__propgrid_44(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxPropertyGrid::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__propgrid_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_45(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxPropertyGrid::OnInternalIdle();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[31], &sipPySelf, SIP_NULLPTR, sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxPropertyGrid::InitDialog();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[32], &sipPySelf, SIP_NULLPTR, sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxPropertyGrid::InheritAttributes();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[33], &sipPySelf, SIP_NULLPTR, sipName_Destroy);

    if (!sipMeth)
        return  ::wxPropertyGrid::Destroy();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[34], &sipPySelf, SIP_NULLPTR, sipName_Validate);

    if (!sipMeth)
        return  ::wxPropertyGrid::Validate();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[35], &sipPySelf, SIP_NULLPTR, sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxPropertyGrid::TransferDataToWindow();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[36], &sipPySelf, SIP_NULLPTR, sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxPropertyGrid::TransferDataFromWindow();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxPropertyGrid::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxPropertyGrid::SetValidator(validator);
        return;
    }

    extern void sipVH__propgrid_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__propgrid_46(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxPropertyGrid::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[38], &sipPySelf, SIP_NULLPTR, sipName_GetValidator);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetValidator();

    extern  ::wxValidator* sipVH__propgrid_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_13(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[39]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxPropertyGrid::ShouldInheritColours();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[40], &sipPySelf, SIP_NULLPTR, sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxPropertyGrid::HasTransparentBackground();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxPropertyGrid::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[41]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxPropertyGrid::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__propgrid_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_47(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[42], &sipPySelf, SIP_NULLPTR, sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxPropertyGrid::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__propgrid_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__propgrid_48(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxPropertyGrid::EnableVisibleFocus(bool enabled)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[43], &sipPySelf, SIP_NULLPTR, sipName_EnableVisibleFocus);

    if (!sipMeth)
    {
         ::wxPropertyGrid::EnableVisibleFocus(enabled);
        return;
    }

    extern void sipVH__propgrid_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__propgrid_44(sipGILState, 0, sipPySelf, sipMeth, enabled);
}

void sipwxPropertyGrid::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxPropertyGrid::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__propgrid_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__propgrid_44(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxPropertyGrid::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[45]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxPropertyGrid::AcceptsFocusRecursively();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxPropertyGrid::AcceptsFocusFromKeyboard();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[47]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxPropertyGrid::AcceptsFocus();

    extern bool sipVH__propgrid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxPropertyGrid::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[48], &sipPySelf, SIP_NULLPTR, sipName_TryAfter);

    if (!sipMeth)
        return  ::wxPropertyGrid::TryAfter(event);

    extern bool sipVH__propgrid_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__propgrid_49(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxPropertyGrid::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[49], &sipPySelf, SIP_NULLPTR, sipName_TryBefore);

    if (!sipMeth)
        return  ::wxPropertyGrid::TryBefore(event);

    extern bool sipVH__propgrid_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__propgrid_49(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxPropertyGrid::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[50], &sipPySelf, SIP_NULLPTR, sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxPropertyGrid::ProcessEvent(event);

    extern bool sipVH__propgrid_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__propgrid_49(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxPropertyGrid::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_AddChild);

    if (!sipMeth)
    {
         ::wxPropertyGrid::AddChild(child);
        return;
    }

    extern void sipVH__propgrid_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__propgrid_50(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxPropertyGrid::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[52], &sipPySelf, SIP_NULLPTR, sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxPropertyGrid::RemoveChild(child);
        return;
    }

    extern void sipVH__propgrid_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__propgrid_50(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxPropertyGrid::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxPropertyGrid::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxControl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxPropertyGrid::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxControl::DoEnable(enable) : DoEnable(enable));
}

void sipwxPropertyGrid::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxControl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxPropertyGrid::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxControl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxPropertyGrid::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxControl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxPropertyGrid::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxControl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxPropertyGrid::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxControl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxPropertyGrid::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxControl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxPropertyGrid::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxControl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxPropertyGrid::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxControl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

void sipwxPropertyGrid::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxControl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxPropertyGrid::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxControl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxPropertyGrid::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxControl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxPropertyGrid::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxControl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxPropertyGrid::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxControl::DoFreeze() : DoFreeze());
}

void sipwxPropertyGrid::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxControl::DoThaw() : DoThaw());
}

bool sipwxPropertyGrid::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxControl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxPropertyGrid::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxControl::TryBefore(event) : TryBefore(event));
}

bool sipwxPropertyGrid::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxControl::TryAfter(event) : TryAfter(event));
}

bool sipwxPropertyGrid::sipProtectVirt_ShouldScrollToChildOnFocus(bool sipSelfWasArg, ::wxWindow*child)
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::ShouldScrollToChildOnFocus(child) : ShouldScrollToChildOnFocus(child));
}

 ::wxSize sipwxPropertyGrid::sipProtectVirt_GetSizeAvailableForScrollTarget(bool sipSelfWasArg,const  ::wxSize& size)
{
    return (sipSelfWasArg ?  ::wxPropertyGrid::GetSizeAvailableForScrollTarget(size) : GetSizeAvailableForScrollTarget(size));
}


PyDoc_STRVAR(doc_wxPropertyGrid_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxPropertyGrid_SendDestroyEvent(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SendDestroyEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ProcessEvent, doc_wxPropertyGrid_ProcessEvent);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoEnable, doc_wxPropertyGrid_DoEnable);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetPosition, doc_wxPropertyGrid_DoGetPosition);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetSize, doc_wxPropertyGrid_DoGetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetClientSize, doc_wxPropertyGrid_DoGetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetBestSize(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetBestSize, doc_wxPropertyGrid_DoGetBestSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxPropertyGrid_DoGetBestClientSize(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoGetBestClientSize, doc_wxPropertyGrid_DoGetBestClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetSize, doc_wxPropertyGrid_DoSetSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetClientSize, doc_wxPropertyGrid_DoSetClientSize);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiiiii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetSizeHints, doc_wxPropertyGrid_DoSetSizeHints);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoMoveWindow, doc_wxPropertyGrid_DoMoveWindow);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoSetWindowVariant, doc_wxPropertyGrid_DoSetWindowVariant);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxPropertyGrid_GetDefaultBorder(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetDefaultBorder, doc_wxPropertyGrid_GetDefaultBorder);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxPropertyGrid_GetDefaultBorderForControl(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetDefaultBorderForControl, doc_wxPropertyGrid_GetDefaultBorderForControl);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoFreeze(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoFreeze(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoFreeze, doc_wxPropertyGrid_DoFreeze);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxPropertyGrid_DoThaw(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoThaw(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoThaw, doc_wxPropertyGrid_DoThaw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_HasTransparentBackground(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_HasTransparentBackground, doc_wxPropertyGrid_HasTransparentBackground);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_TryBefore, doc_wxPropertyGrid_TryBefore);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxPropertyGrid_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_TryAfter, doc_wxPropertyGrid_TryAfter);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoShowPropertyError, "DoShowPropertyError(property, msg)\n"
"\n"
"Override in derived class to display error messages in custom manner\n"
"(these message usually only result from validation failure).");

extern "C" {static PyObject *meth_wxPropertyGrid_DoShowPropertyError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoShowPropertyError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* property;
        const  ::wxString* msg;
        int msgState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_msg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, sipType_wxString, &msg, &msgState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::DoShowPropertyError(property,*msg) : sipCpp->DoShowPropertyError(property,*msg));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(msg), sipType_wxString, msgState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoShowPropertyError, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoHidePropertyError, "DoHidePropertyError(property)\n"
"\n"
"Override in derived class to hide an error displayed by\n"
"DoShowPropertyError().");

extern "C" {static PyObject *meth_wxPropertyGrid_DoHidePropertyError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoHidePropertyError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* property;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::DoHidePropertyError(property) : sipCpp->DoHidePropertyError(property));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoHidePropertyError, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetStatusBar, "GetStatusBar() -> wx.StatusBar\n"
"\n"
"Return wxStatusBar that is used by this wxPropertyGrid.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetStatusBar(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetStatusBar(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxStatusBar*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::GetStatusBar() : sipCpp->GetStatusBar());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxStatusBar,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetStatusBar, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoOnValidationFailure, "DoOnValidationFailure(property, invalidValue) -> bool\n"
"\n"
"Override to customize property validation failure behaviour.");

extern "C" {static PyObject *meth_wxPropertyGrid_DoOnValidationFailure(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoOnValidationFailure(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* property;
         ::wxPGVariant* invalidValue;
        int invalidValueState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_invalidValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, sipType_wxPGVariant, &invalidValue, &invalidValueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::DoOnValidationFailure(property,*invalidValue) : sipCpp->DoOnValidationFailure(property,*invalidValue));
            Py_END_ALLOW_THREADS
            sipReleaseType(invalidValue, sipType_wxPGVariant, invalidValueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoOnValidationFailure, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoOnValidationFailureReset, "DoOnValidationFailureReset(property)\n"
"\n"
"Override to customize resetting of property validation failure status.");

extern "C" {static PyObject *meth_wxPropertyGrid_DoOnValidationFailureReset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoOnValidationFailureReset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* property;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::DoOnValidationFailureReset(property) : sipCpp->DoOnValidationFailureReset(property));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoOnValidationFailureReset, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EditorsValueWasModified, "EditorsValueWasModified()\n"
"\n"
"Call when editor widget's contents is modified.");

extern "C" {static PyObject *meth_wxPropertyGrid_EditorsValueWasModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EditorsValueWasModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EditorsValueWasModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EditorsValueWasModified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EditorsValueWasNotModified, "EditorsValueWasNotModified()\n"
"\n"
"Reverse of EditorsValueWasModified().");

extern "C" {static PyObject *meth_wxPropertyGrid_EditorsValueWasNotModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EditorsValueWasNotModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EditorsValueWasNotModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EditorsValueWasNotModified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetUncommittedPropertyValue, "GetUncommittedPropertyValue() -> PGVariant\n"
"\n"
"Returns most up-to-date value of selected property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetUncommittedPropertyValue(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetUncommittedPropertyValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant(sipCpp->GetUncommittedPropertyValue());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetUncommittedPropertyValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsEditorsValueModified, "IsEditorsValueModified() -> bool\n"
"\n"
"Returns true if editor's value was marked modified.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsEditorsValueModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsEditorsValueModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEditorsValueModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsEditorsValueModified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ShowPropertyError, "ShowPropertyError(id, msg)\n"
"\n"
"Shows a brief error message that is related to a property.");

extern "C" {static PyObject *meth_wxPropertyGrid_ShowPropertyError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ShowPropertyError(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
        const  ::wxString* msg;
        int msgState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_msg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState, sipType_wxString, &msg, &msgState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowPropertyError(*id,*msg);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);
            sipReleaseType(const_cast< ::wxString *>(msg), sipType_wxString, msgState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ShowPropertyError, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ValueChangeInEvent, "ValueChangeInEvent(variant)\n"
"\n"
"Call this from wxPGProperty::OnEvent() to cause property value to be\n"
"changed after the function returns (with true as return value).");

extern "C" {static PyObject *meth_wxPropertyGrid_ValueChangeInEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ValueChangeInEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGVariant* variant;
        int variantState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGVariant, &variant, &variantState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ValueChangeInEvent(*variant);
            Py_END_ALLOW_THREADS
            sipReleaseType(variant, sipType_wxPGVariant, variantState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ValueChangeInEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_WasValueChangedInEvent, "WasValueChangedInEvent() -> bool\n"
"\n"
"You can use this member function, for instance, to detect in\n"
"wxPGProperty::OnEvent() if wxPGProperty::SetValueInEvent() was already\n"
"called in wxPGEditor::OnEvent().");

extern "C" {static PyObject *meth_wxPropertyGrid_WasValueChangedInEvent(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_WasValueChangedInEvent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->WasValueChangedInEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_WasValueChangedInEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AddActionTrigger, "AddActionTrigger(action, keycode, modifiers=0)\n"
"\n"
"Adds given key combination to trigger given action.");

extern "C" {static PyObject *meth_wxPropertyGrid_AddActionTrigger(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AddActionTrigger(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int action;
        int keycode;
        int modifiers = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_action,
            sipName_keycode,
            sipName_modifiers,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &action, &keycode, &modifiers))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AddActionTrigger(action,keycode,modifiers);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AddActionTrigger, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AddToSelection, "AddToSelection(id) -> bool\n"
"\n"
"Adds given property into selection.");

extern "C" {static PyObject *meth_wxPropertyGrid_AddToSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AddToSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddToSelection(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AddToSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_BeginLabelEdit, "BeginLabelEdit(colIndex=0)\n"
"\n"
"Creates label editor wxTextCtrl for given column, for property that is\n"
"currently selected.");

extern "C" {static PyObject *meth_wxPropertyGrid_BeginLabelEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_BeginLabelEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint colIndex = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &colIndex))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->BeginLabelEdit(colIndex);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_BeginLabelEdit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ChangePropertyValue, "ChangePropertyValue(id, newValue) -> bool\n"
"\n"
"Changes value of a property, as if from an editor.");

extern "C" {static PyObject *meth_wxPropertyGrid_ChangePropertyValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ChangePropertyValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPGVariant* newValue;
        int newValueState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_newValue,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState, sipType_wxPGVariant, &newValue, &newValueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ChangePropertyValue(*id,*newValue);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);
            sipReleaseType(newValue, sipType_wxPGVariant, newValueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ChangePropertyValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_CenterSplitter, "CenterSplitter(enableAutoResizing=False)\n"
"\n"
"Centers the splitter.");

extern "C" {static PyObject *meth_wxPropertyGrid_CenterSplitter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_CenterSplitter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enableAutoResizing = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enableAutoResizing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enableAutoResizing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CenterSplitter(enableAutoResizing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_CenterSplitter, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Clear, "Clear()\n"
"\n"
"Deletes all properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::Clear() : sipCpp->Clear());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ClearActionTriggers, "ClearActionTriggers(action)\n"
"\n"
"Clears action triggers for given action.");

extern "C" {static PyObject *meth_wxPropertyGrid_ClearActionTriggers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ClearActionTriggers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int action;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_action,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &action))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearActionTriggers(action);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ClearActionTriggers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_CommitChangesFromEditor, "CommitChangesFromEditor(flags=0) -> bool\n"
"\n"
"Forces updating the value of property from the editor control.");

extern "C" {static PyObject *meth_wxPropertyGrid_CommitChangesFromEditor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_CommitChangesFromEditor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxUint32 flags = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::CommitChangesFromEditor(flags) : sipCpp->CommitChangesFromEditor(flags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_CommitChangesFromEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PG_DEFAULT_STYLE, name=PropertyGridNameStr) -> bool\n"
"\n"
"Two step creation.");

extern "C" {static PyObject *meth_wxPropertyGrid_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxPG_DEFAULT_STYLE;
        const  ::wxString& namedef = wxPropertyGridNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = SIP_NULLPTR;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJH|iJ1J1lJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Create, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DedicateKey, "DedicateKey(keycode)\n"
"\n"
"Dedicates a specific keycode to wxPropertyGrid.");

extern "C" {static PyObject *meth_wxPropertyGrid_DedicateKey(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DedicateKey(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int keycode;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_keycode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &keycode))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DedicateKey(keycode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DedicateKey, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EnableCategories, "EnableCategories(enable) -> bool\n"
"\n"
"Enables or disables (shows/hides) categories according to parameter\n"
"enable.");

extern "C" {static PyObject *meth_wxPropertyGrid_EnableCategories(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EnableCategories(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bb", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enable))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnableCategories(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EnableCategories, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EndLabelEdit, "EndLabelEdit(commit=True)\n"
"\n"
"Destroys label editor wxTextCtrl, if any.");

extern "C" {static PyObject *meth_wxPropertyGrid_EndLabelEdit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EndLabelEdit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool commit = 1;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_commit,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &commit))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EndLabelEdit(commit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EndLabelEdit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EnsureVisible, "EnsureVisible(id) -> bool\n"
"\n"
"Scrolls and/or expands items to ensure that the given item is visible.");

extern "C" {static PyObject *meth_wxPropertyGrid_EnsureVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EnsureVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnsureVisible(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EnsureVisible, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_FitColumns, "FitColumns() -> wx.Size\n"
"\n"
"Reduces column sizes to minimum possible, while still retaining fully\n"
"visible grid contents (labels, images).");

extern "C" {static PyObject *meth_wxPropertyGrid_FitColumns(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_FitColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->FitColumns());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_FitColumns, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetLabelEditor, "GetLabelEditor() -> wx.TextCtrl\n"
"\n"
"Returns currently active label editor, NULL if none.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetLabelEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetLabelEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLabelEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetLabelEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetPanel, "GetPanel() -> wx.Window\n"
"\n"
"Returns wxWindow that the properties are painted on, and which should\n"
"be used as the parent for editor controls.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetPanel(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetPanel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPanel();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetPanel, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCaptionBackgroundColour, "GetCaptionBackgroundColour() -> wx.Colour\n"
"\n"
"Returns current category caption background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCaptionBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCaptionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCaptionBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCaptionBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCaptionFont, "GetCaptionFont() -> wx.Font\n"
"\n"
"Returns current category caption font.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCaptionFont(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCaptionFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxFont*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetCaptionFont();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxFont,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCaptionFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCaptionForegroundColour, "GetCaptionForegroundColour() -> wx.Colour\n"
"\n"
"Returns current category caption text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCaptionForegroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCaptionForegroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCaptionForegroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCaptionForegroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCellBackgroundColour, "GetCellBackgroundColour() -> wx.Colour\n"
"\n"
"Returns current cell background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCellBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCellBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCellBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCellBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCellDisabledTextColour, "GetCellDisabledTextColour() -> wx.Colour\n"
"\n"
"Returns current cell text colour when disabled.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCellDisabledTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCellDisabledTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCellDisabledTextColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCellDisabledTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetCellTextColour, "GetCellTextColour() -> wx.Colour\n"
"\n"
"Returns current cell text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetCellTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetCellTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetCellTextColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetCellTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetColumnCount, "GetColumnCount() -> unsignedint\n"
"\n"
"Returns number of columns currently on grid.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetEmptySpaceColour, "GetEmptySpaceColour() -> wx.Colour\n"
"\n"
"Returns colour of empty space below properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetEmptySpaceColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetEmptySpaceColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetEmptySpaceColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetEmptySpaceColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetFontHeight, "GetFontHeight() -> int\n"
"\n"
"Returns height of highest characters of used font.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetFontHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetFontHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFontHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetFontHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetGrid, "GetGrid() -> PropertyGrid\n"
"\n"
"Returns pointer to itself.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetGrid(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetGrid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPropertyGrid*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetGrid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPropertyGrid,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetGrid, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetImageRect, "GetImageRect(property, item) -> wx.Rect\n"
"\n"
"Returns rectangle of custom paint image.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetImageRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetImageRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* property;
        int item;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, &item))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetImageRect(property,item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetImageRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetImageSize, "GetImageSize(property=None, item=-1) -> wx.Size\n"
"\n"
"Returns size of the custom paint image in front of property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetImageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetImageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* property = 0;
        int item = -1;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|J8i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &property, &item))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetImageSize(property,item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetImageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetLastItem, "GetLastItem(flags=PG_ITERATE_DEFAULT) -> PGProperty\n"
"\n"
"Returns last item which could be iterated using given flags.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetLastItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetLastItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags = wxPG_ITERATE_DEFAULT;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &flags))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLastItem(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetLastItem, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetLineColour, "GetLineColour() -> wx.Colour\n"
"\n"
"Returns colour of lines between cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetLineColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetLineColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetLineColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetLineColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetMarginColour, "GetMarginColour() -> wx.Colour\n"
"\n"
"Returns background colour of margin.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetMarginColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetMarginColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetMarginColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetMarginColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetMarginWidth, "GetMarginWidth() -> int\n"
"\n"
"Returns margin width.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetMarginWidth(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetMarginWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMarginWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetMarginWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetRoot, "GetRoot() -> PGProperty\n"
"\n"
"Returns \"root property\".");

extern "C" {static PyObject *meth_wxPropertyGrid_GetRoot(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetRoot(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRoot();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetRoot, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetRowHeight, "GetRowHeight() -> int\n"
"\n"
"Returns height of a single grid row (in pixels).");

extern "C" {static PyObject *meth_wxPropertyGrid_GetRowHeight(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetRowHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRowHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetRowHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelectedProperty, "GetSelectedProperty() -> PGProperty\n"
"\n"
"Returns currently selected property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelectedProperty(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelectedProperty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelectedProperty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelectedProperty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelection, "GetSelection() -> PGProperty\n"
"\n"
"Returns currently selected property.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGProperty*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGProperty,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelectionBackgroundColour, "GetSelectionBackgroundColour() -> wx.Colour\n"
"\n"
"Returns current selection background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelectionBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelectionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetSelectionBackgroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelectionBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSelectionForegroundColour, "GetSelectionForegroundColour() -> wx.Colour\n"
"\n"
"Returns current selection text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSelectionForegroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSelectionForegroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour(sipCpp->GetSelectionForegroundColour());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSelectionForegroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSplitterPosition, "GetSplitterPosition(splitterIndex=0) -> int\n"
"\n"
"Returns current splitter x position.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSplitterPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSplitterPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint splitterIndex = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_splitterIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|u", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &splitterIndex))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSplitterPosition(splitterIndex);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSplitterPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetEditorTextCtrl, "GetEditorTextCtrl() -> wx.TextCtrl\n"
"\n"
"Returns wxTextCtrl active in currently selected property, if any.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetEditorTextCtrl(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetEditorTextCtrl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxTextCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEditorTextCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextCtrl,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetEditorTextCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetUnspecifiedValueAppearance, "GetUnspecifiedValueAppearance() -> PGCell\n"
"\n"
"Returns current appearance of unspecified value cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueAppearance(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueAppearance(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxPGCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGCell(sipCpp->GetUnspecifiedValueAppearance());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGCell,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetUnspecifiedValueAppearance, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetUnspecifiedValueText, "GetUnspecifiedValueText(argFlags=0) -> String\n"
"\n"
"Returns (visual) text representation of the unspecified property\n"
"value.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetUnspecifiedValueText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int argFlags = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &argFlags))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetUnspecifiedValueText(argFlags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetUnspecifiedValueText, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetVerticalSpacing, "GetVerticalSpacing() -> int\n"
"\n"
"Returns current vertical spacing.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetVerticalSpacing(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVerticalSpacing();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetVerticalSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_HitTest, "HitTest(pt) -> PropertyGridHitTestResult\n"
"\n"
"Returns information about arbitrary position in the grid.");

extern "C" {static PyObject *meth_wxPropertyGrid_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPropertyGridHitTestResult*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPropertyGridHitTestResult(sipCpp->HitTest(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPropertyGridHitTestResult,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_HitTest, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsAnyModified, "IsAnyModified() -> bool\n"
"\n"
"Returns true if any property has been modified by the user.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsAnyModified(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsAnyModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsAnyModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsAnyModified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsEditorFocused, "IsEditorFocused() -> bool\n"
"\n"
"Returns true if a property editor control has focus.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsEditorFocused(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsEditorFocused(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEditorFocused();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsEditorFocused, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsFrozen, "IsFrozen() -> bool\n"
"\n"
"Returns true if updating is frozen (i.e.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsFrozen(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsFrozen(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsFrozen();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsFrozen, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_MakeColumnEditable, "MakeColumnEditable(column, editable=True)\n"
"\n"
"Makes given column editable by user.");

extern "C" {static PyObject *meth_wxPropertyGrid_MakeColumnEditable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_MakeColumnEditable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        uint column;
        bool editable = 1;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_editable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bu|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &column, &editable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->MakeColumnEditable(column,editable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_MakeColumnEditable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_OnTLPChanging, "OnTLPChanging(newTLP)\n"
"\n"
"It is recommended that you call this function any time your code\n"
"causes wxPropertyGrid's top-level parent to change.");

extern "C" {static PyObject *meth_wxPropertyGrid_OnTLPChanging(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_OnTLPChanging(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* newTLP;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newTLP,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindow, &newTLP))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->OnTLPChanging(newTLP);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_OnTLPChanging, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RefreshEditor, "RefreshEditor()\n"
"\n"
"Refreshes any active editor control.");

extern "C" {static PyObject *meth_wxPropertyGrid_RefreshEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RefreshEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RefreshEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RefreshEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RefreshProperty, "RefreshProperty(p)\n"
"\n"
"Redraws given property.");

extern "C" {static PyObject *meth_wxPropertyGrid_RefreshProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RefreshProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGProperty* p;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &p))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::RefreshProperty(p) : sipCpp->RefreshProperty(p));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RefreshProperty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ResetColours, "ResetColours()\n"
"\n"
"Resets all colours to the original system values.");

extern "C" {static PyObject *meth_wxPropertyGrid_ResetColours(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ResetColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ResetColours();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ResetColours, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ResetColumnSizes, "ResetColumnSizes(enableAutoResizing=False)\n"
"\n"
"Resets column sizes and splitter positions, based on proportions.");

extern "C" {static PyObject *meth_wxPropertyGrid_ResetColumnSizes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ResetColumnSizes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enableAutoResizing = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enableAutoResizing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &enableAutoResizing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ResetColumnSizes(enableAutoResizing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ResetColumnSizes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RemoveFromSelection, "RemoveFromSelection(id) -> bool\n"
"\n"
"Removes given property from selection.");

extern "C" {static PyObject *meth_wxPropertyGrid_RemoveFromSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RemoveFromSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemoveFromSelection(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RemoveFromSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SelectProperty, "SelectProperty(id, focus=False) -> bool\n"
"\n"
"Selects a property.");

extern "C" {static PyObject *meth_wxPropertyGrid_SelectProperty(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SelectProperty(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
        bool focus = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_focus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState, &focus))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SelectProperty(*id,focus);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SelectProperty, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCaptionBackgroundColour, "SetCaptionBackgroundColour(col)\n"
"\n"
"Sets category caption background colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCaptionBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCaptionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCaptionBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCaptionBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCaptionTextColour, "SetCaptionTextColour(col)\n"
"\n"
"Sets category caption text colour.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCaptionTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCaptionTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCaptionTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCaptionTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCellBackgroundColour, "SetCellBackgroundColour(col)\n"
"\n"
"Sets default cell background colour - applies to property cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCellBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCellBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCellBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCellBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCellDisabledTextColour, "SetCellDisabledTextColour(col)\n"
"\n"
"Sets cell text colour for disabled properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCellDisabledTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCellDisabledTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCellDisabledTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCellDisabledTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCellTextColour, "SetCellTextColour(col)\n"
"\n"
"Sets default cell text colour - applies to property name and value\n"
"text.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCellTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCellTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCellTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCellTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetColumnCount, "SetColumnCount(colCount)\n"
"\n"
"Set number of columns (2 or more).");

extern "C" {static PyObject *meth_wxPropertyGrid_SetColumnCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetColumnCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int colCount;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colCount,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &colCount))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColumnCount(colCount);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetColumnCount, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetCurrentCategory, "SetCurrentCategory(id)\n"
"\n"
"Sets the 'current' category - Append will add non-category properties\n"
"under it.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetCurrentCategory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetCurrentCategory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGPropArgCls* id;
        int idState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGPropArgCls, &id, &idState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCurrentCategory(*id);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPGPropArgCls *>(id), sipType_wxPGPropArgCls, idState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetCurrentCategory, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetEmptySpaceColour, "SetEmptySpaceColour(col)\n"
"\n"
"Sets colour of empty space below properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetEmptySpaceColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetEmptySpaceColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetEmptySpaceColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetEmptySpaceColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetLineColour, "SetLineColour(col)\n"
"\n"
"Sets colour of lines between cells.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetLineColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetLineColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLineColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetLineColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetMarginColour, "SetMarginColour(col)\n"
"\n"
"Sets background colour of margin.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetMarginColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetMarginColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMarginColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetMarginColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSelection, "SetSelection(newSelection)\n"
"\n"
"Set entire new selection from given list of properties.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxArrayPGProperty* newSelection;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newSelection,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxArrayPGProperty, &newSelection))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelection(*newSelection);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSelection, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSelectionBackgroundColour, "SetSelectionBackgroundColour(col)\n"
"\n"
"Sets selection background colour - applies to selected property name\n"
"background.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSelectionBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSelectionBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelectionBackgroundColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSelectionBackgroundColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSelectionTextColour, "SetSelectionTextColour(col)\n"
"\n"
"Sets selection foreground colour - applies to selected property name\n"
"text.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSelectionTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSelectionTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelectionTextColour(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col), sipType_wxColour, colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSelectionTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSplitterPosition, "SetSplitterPosition(newxpos, col=0)\n"
"\n"
"Sets x coordinate of the splitter.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSplitterPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSplitterPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int newxpos;
        int col = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newxpos,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &newxpos, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSplitterPosition(newxpos,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSplitterPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetSplitterLeft, "SetSplitterLeft(privateChildrenToo=False)\n"
"\n"
"Moves splitter as left as possible, while still allowing all labels to\n"
"be shown in full.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetSplitterLeft(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetSplitterLeft(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool privateChildrenToo = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_privateChildrenToo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &privateChildrenToo))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSplitterLeft(privateChildrenToo);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetSplitterLeft, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetUnspecifiedValueAppearance, "SetUnspecifiedValueAppearance(cell)\n"
"\n"
"Sets appearance of value cells representing an unspecified property\n"
"value.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetUnspecifiedValueAppearance(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetUnspecifiedValueAppearance(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPGCell* cell;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGCell, &cell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetUnspecifiedValueAppearance(*cell);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetUnspecifiedValueAppearance, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetVerticalSpacing, "SetVerticalSpacing(vspacing)\n"
"\n"
"Sets vertical spacing.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetVerticalSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetVerticalSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int vspacing;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_vspacing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &vspacing))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVerticalSpacing(vspacing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetVerticalSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetVirtualWidth, "SetVirtualWidth(width)\n"
"\n"
"Set virtual width for this particular page.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetVirtualWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetVirtualWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int width;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVirtualWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetVirtualWidth, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetupTextCtrlValue, "SetupTextCtrlValue(text)\n"
"\n"
"Must be called in wxPGEditor::CreateControls() if primary editor\n"
"window is wxTextCtrl, just before textctrl is created.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetupTextCtrlValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetupTextCtrlValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxString, &text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetupTextCtrlValue(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetupTextCtrlValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_UnfocusEditor, "UnfocusEditor() -> bool\n"
"\n"
"Unfocuses or closes editor if one was open, but does not deselect\n"
"property.");

extern "C" {static PyObject *meth_wxPropertyGrid_UnfocusEditor(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_UnfocusEditor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->UnfocusEditor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_UnfocusEditor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DrawItemAndValueRelated, "DrawItemAndValueRelated(p)\n"
"\n"
"Draws item, children, and consecutive parents as long as category is\n"
"not met.");

extern "C" {static PyObject *meth_wxPropertyGrid_DrawItemAndValueRelated(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DrawItemAndValueRelated(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGProperty* p;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_p,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPGProperty, &p))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawItemAndValueRelated(p);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DrawItemAndValueRelated, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AutoGetTranslation, "AutoGetTranslation(enable)\n"
"\n"
"This static function enables or disables automatic use of\n"
"wxGetTranslation() for following strings: wxEnumProperty list labels,\n"
"wxFlagsProperty child property labels.");

extern "C" {static PyObject *meth_wxPropertyGrid_AutoGetTranslation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AutoGetTranslation(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool enable;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "b", &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxPropertyGrid::AutoGetTranslation(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AutoGetTranslation, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_RegisterEditorClass, "RegisterEditorClass(editor, noDefCheck=False) -> PGEditor\n"
"\n"
"Forwards to DoRegisterEditorClass with empty name.");

extern "C" {static PyObject *meth_wxPropertyGrid_RegisterEditorClass(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_RegisterEditorClass(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGEditor* editor;
        bool noDefCheck = 0;

        static const char *sipKwdList[] = {
            sipName_editor,
            sipName_noDefCheck,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:|b", sipType_wxPGEditor, &editor, &noDefCheck))
        {
             ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxPropertyGrid::RegisterEditorClass(editor,noDefCheck);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_RegisterEditorClass, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoRegisterEditorClass, "DoRegisterEditorClass(editor, name, noDefCheck=False) -> PGEditor\n"
"\n"
"Registers a new editor class.");

extern "C" {static PyObject *meth_wxPropertyGrid_DoRegisterEditorClass(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoRegisterEditorClass(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPGEditor* editor;
        const  ::wxString* name;
        int nameState = 0;
        bool noDefCheck = 0;

        static const char *sipKwdList[] = {
            sipName_editor,
            sipName_name,
            sipName_noDefCheck,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:J1|b", sipType_wxPGEditor, &editor, sipType_wxString, &name, &nameState, &noDefCheck))
        {
             ::wxPGEditor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxPropertyGrid::DoRegisterEditorClass(editor,*name,noDefCheck);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPGEditor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoRegisterEditorClass, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes");

extern "C" {static PyObject *meth_wxPropertyGrid_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxPropertyGrid::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetClassDefaultAttributes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_CalcScrolledPosition, "CalcScrolledPosition(x, y) -> (xx, yy)\n"
"CalcScrolledPosition(pt) -> Point\n"
"\n"
"Translates the logical coordinates to the device ones.\n"
"");

extern "C" {static PyObject *meth_wxPropertyGrid_CalcScrolledPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_CalcScrolledPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        int xx;
        int yy;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CalcScrolledPosition(x,y,&xx,&yy);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",xx,yy);
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->CalcScrolledPosition(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_CalcScrolledPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_CalcUnscrolledPosition, "CalcUnscrolledPosition(x, y) -> (xx, yy)\n"
"CalcUnscrolledPosition(pt) -> Point\n"
"\n"
"Translates the device coordinates to the logical ones.\n"
"");

extern "C" {static PyObject *meth_wxPropertyGrid_CalcUnscrolledPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_CalcUnscrolledPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        int xx;
        int yy;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CalcUnscrolledPosition(x,y,&xx,&yy);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",xx,yy);
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->CalcUnscrolledPosition(*pt));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_CalcUnscrolledPosition, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DisableKeyboardScrolling, "DisableKeyboardScrolling()\n"
"\n"
"Disable use of keyboard keys for scrolling.");

extern "C" {static PyObject *meth_wxPropertyGrid_DisableKeyboardScrolling(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DisableKeyboardScrolling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DisableKeyboardScrolling();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DisableKeyboardScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_DoPrepareDC, "DoPrepareDC(dc)\n"
"\n"
"Call this function to prepare the device context for drawing a\n"
"scrolled image.");

extern "C" {static PyObject *meth_wxPropertyGrid_DoPrepareDC(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_DoPrepareDC(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoPrepareDC(*dc);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_DoPrepareDC, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_EnableScrolling, "EnableScrolling(xScrolling, yScrolling)\n"
"\n"
"Enable or disable use of wxWindow::ScrollWindow() for scrolling.");

extern "C" {static PyObject *meth_wxPropertyGrid_EnableScrolling(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_EnableScrolling(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool xScrolling;
        bool yScrolling;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_xScrolling,
            sipName_yScrolling,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bbb", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &xScrolling, &yScrolling))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableScrolling(xScrolling,yScrolling);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_EnableScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ShowScrollbars, "ShowScrollbars(horz, vert)\n"
"\n"
"Set the scrollbar visibility.");

extern "C" {static PyObject *meth_wxPropertyGrid_ShowScrollbars(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ShowScrollbars(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxScrollbarVisibility horz;
         ::wxScrollbarVisibility vert;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_horz,
            sipName_vert,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BEE", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxScrollbarVisibility, &horz, sipType_wxScrollbarVisibility, &vert))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowScrollbars(horz,vert);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ShowScrollbars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetScrollPixelsPerUnit, "GetScrollPixelsPerUnit() -> (xUnit, yUnit)\n"
"\n"
"Get the number of pixels per scroll unit (line), in each direction, as\n"
"set by SetScrollbars().");

extern "C" {static PyObject *meth_wxPropertyGrid_GetScrollPixelsPerUnit(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetScrollPixelsPerUnit(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int xUnit;
        int yUnit;
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetScrollPixelsPerUnit(&xUnit,&yUnit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",xUnit,yUnit);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetScrollPixelsPerUnit, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetViewStart, "GetViewStart() -> (x, y)\n"
"\n"
"Get the position at which the visible portion of the window starts.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetViewStart(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetViewStart(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, SIP_NULLPTR, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetViewStart(&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetViewStart, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsRetained, "IsRetained() -> bool\n"
"\n"
"Motif only: true if the window has a backing bitmap.");

extern "C" {static PyObject *meth_wxPropertyGrid_IsRetained(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsRetained(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsRetained();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsRetained, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_OnDraw, "OnDraw(dc)\n"
"\n"
"Called by the default paint event handler to allow the application to\n"
"define painting behaviour without having to worry about calling\n"
"DoPrepareDC().");

extern "C" {static PyObject *meth_wxPropertyGrid_OnDraw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_OnDraw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::OnDraw(*dc) : sipCpp->OnDraw(*dc));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_OnDraw, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_PrepareDC, "PrepareDC(dc)\n"
"\n"
"This function is for backwards compatibility only and simply calls\n"
"DoPrepareDC() now.");

extern "C" {static PyObject *meth_wxPropertyGrid_PrepareDC(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_PrepareDC(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxDC* dc;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxDC, &dc))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrepareDC(*dc);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_PrepareDC, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_Scroll, "Scroll(x, y)\n"
"Scroll(pt)\n"
"\n"
"Scrolls a window so the view start is at the given point.\n"
"");

extern "C" {static PyObject *meth_wxPropertyGrid_Scroll(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_Scroll(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int x;
        int y;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Scroll(x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxPoint* pt;
        int ptState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxPoint, &pt, &ptState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Scroll(*pt);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_Scroll, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetScrollRate, "SetScrollRate(xstep, ystep)\n"
"\n"
"Set the horizontal and vertical scrolling increment only.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetScrollRate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetScrollRate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int xstep;
        int ystep;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_xstep,
            sipName_ystep,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &xstep, &ystep))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScrollRate(xstep,ystep);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetScrollRate, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetScrollbars, "SetScrollbars(pixelsPerUnitX, pixelsPerUnitY, noUnitsX, noUnitsY, xPos=0, yPos=0, noRefresh=False)\n"
"\n"
"Sets up vertical and/or horizontal scrollbars.");

extern "C" {static PyObject *meth_wxPropertyGrid_SetScrollbars(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetScrollbars(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pixelsPerUnitX;
        int pixelsPerUnitY;
        int noUnitsX;
        int noUnitsY;
        int xPos = 0;
        int yPos = 0;
        bool noRefresh = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pixelsPerUnitX,
            sipName_pixelsPerUnitY,
            sipName_noUnitsX,
            sipName_noUnitsY,
            sipName_xPos,
            sipName_yPos,
            sipName_noRefresh,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biiii|iib", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &pixelsPerUnitX, &pixelsPerUnitY, &noUnitsX, &noUnitsY, &xPos, &yPos, &noRefresh))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScrollbars(pixelsPerUnitX,pixelsPerUnitY,noUnitsX,noUnitsY,xPos,yPos,noRefresh);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetScrollbars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetTargetWindow, "SetTargetWindow(window)\n"
"\n"
"Call this function to tell wxScrolled to perform the actual scrolling\n"
"on a different window (and not on itself).");

extern "C" {static PyObject *meth_wxPropertyGrid_SetTargetWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetTargetWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxWindow* window;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindow, &window))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTargetWindow(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetTargetWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetTargetWindow, "GetTargetWindow() -> Window");

extern "C" {static PyObject *meth_wxPropertyGrid_GetTargetWindow(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetTargetWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTargetWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetTargetWindow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetTargetRect, "SetTargetRect(rect)");

extern "C" {static PyObject *meth_wxPropertyGrid_SetTargetRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetTargetRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTargetRect(*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect), sipType_wxRect, rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetTargetRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetTargetRect, "GetTargetRect() -> Rect");

extern "C" {static PyObject *meth_wxPropertyGrid_GetTargetRect(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetTargetRect(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetTargetRect());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetTargetRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetScrollPageSize, "GetScrollPageSize(orient) -> int");

extern "C" {static PyObject *meth_wxPropertyGrid_GetScrollPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetScrollPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orient;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &orient))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScrollPageSize(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetScrollPageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetScrollPageSize, "SetScrollPageSize(orient, pageSize)");

extern "C" {static PyObject *meth_wxPropertyGrid_SetScrollPageSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetScrollPageSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orient;
        int pageSize;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
            sipName_pageSize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &orient, &pageSize))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScrollPageSize(orient,pageSize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetScrollPageSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetScrollLines, "GetScrollLines(orient) -> int");

extern "C" {static PyObject *meth_wxPropertyGrid_GetScrollLines(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetScrollLines(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int orient;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &orient))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScrollLines(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetScrollLines, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SetScale, "SetScale(xs, ys)");

extern "C" {static PyObject *meth_wxPropertyGrid_SetScale(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SetScale(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double xs;
        double ys;
         ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_xs,
            sipName_ys,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bdd", &sipSelf, sipType_wxPropertyGrid, &sipCpp, &xs, &ys))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScale(xs,ys);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SetScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetScaleX, "GetScaleX() -> double");

extern "C" {static PyObject *meth_wxPropertyGrid_GetScaleX(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetScaleX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScaleX();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetScaleX, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetScaleY, "GetScaleY() -> double");

extern "C" {static PyObject *meth_wxPropertyGrid_GetScaleY(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetScaleY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScaleY();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetScaleY, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_AdjustScrollbars, "AdjustScrollbars()");

extern "C" {static PyObject *meth_wxPropertyGrid_AdjustScrollbars(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_AdjustScrollbars(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AdjustScrollbars();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_AdjustScrollbars, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_IsAutoScrolling, "IsAutoScrolling() -> bool\n"
"\n"
"Are we generating the autoscroll events?");

extern "C" {static PyObject *meth_wxPropertyGrid_IsAutoScrolling(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_IsAutoScrolling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsAutoScrolling();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_IsAutoScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_StopAutoScrolling, "StopAutoScrolling()\n"
"\n"
"Stop generating the scroll events when mouse is held outside the\n"
"window.");

extern "C" {static PyObject *meth_wxPropertyGrid_StopAutoScrolling(PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_StopAutoScrolling(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxPropertyGrid *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPropertyGrid, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->StopAutoScrolling();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_StopAutoScrolling, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_SendAutoScrollEvents, "SendAutoScrollEvents(event) -> bool\n"
"\n"
"This method can be overridden in a derived class to forbid sending the\n"
"auto scroll events - note that unlike StopAutoScrolling() it doesn't\n"
"stop the timer, so it will be called repeatedly and will typically\n"
"return different values depending on the current mouse position.");

extern "C" {static PyObject *meth_wxPropertyGrid_SendAutoScrollEvents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_SendAutoScrollEvents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxScrollWinEvent* event;
        const  ::wxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxScrollWinEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPropertyGrid::SendAutoScrollEvents(*event) : sipCpp->SendAutoScrollEvents(*event));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_SendAutoScrollEvents, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_ShouldScrollToChildOnFocus, "ShouldScrollToChildOnFocus(child) -> bool\n"
"\n"
"This method can be overridden in a derived class to prevent scrolling\n"
"the child window into view automatically when it gets focus.");

extern "C" {static PyObject *meth_wxPropertyGrid_ShouldScrollToChildOnFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_ShouldScrollToChildOnFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* child;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxWindow, &child))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ShouldScrollToChildOnFocus(sipSelfWasArg,child);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_ShouldScrollToChildOnFocus, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxPropertyGrid_GetSizeAvailableForScrollTarget, "GetSizeAvailableForScrollTarget(size) -> Size\n"
"\n"
"Function which must be overridden to implement the size available for\n"
"the scroll target for the given size of the main window.");

extern "C" {static PyObject *meth_wxPropertyGrid_GetSizeAvailableForScrollTarget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPropertyGrid_GetSizeAvailableForScrollTarget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSize* size;
        int sizeState = 0;
        sipwxPropertyGrid *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxPropertyGrid, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_GetSizeAvailableForScrollTarget(sipSelfWasArg,*size));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_PropertyGrid, sipName_GetSizeAvailableForScrollTarget, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPropertyGrid(void *, const sipTypeDef *);}
static void *cast_wxPropertyGrid(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPropertyGrid *sipCpp = reinterpret_cast< ::wxPropertyGrid *>(sipCppV);

    if (targetType == sipType_wxPropertyGrid)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxControl)->ctd_cast(static_cast< ::wxControl *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    if (targetType == sipType_wxPropertyGridInterface)
        return static_cast< ::wxPropertyGridInterface *>(sipCpp);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPropertyGrid(void *, int);}
static void release_wxPropertyGrid(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPropertyGrid *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPropertyGrid *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxPropertyGrid(Py_ssize_t);}
static void *array_wxPropertyGrid(Py_ssize_t sipNrElem)
{
    return new  ::wxPropertyGrid[sipNrElem];
}


extern "C" {static void dealloc_wxPropertyGrid(sipSimpleWrapper *);}
static void dealloc_wxPropertyGrid(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPropertyGrid *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPropertyGrid(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPropertyGrid(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPropertyGrid(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxPropertyGrid *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPropertyGrid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxPG_DEFAULT_STYLE;
        const  ::wxString& namedef = wxPropertyGridNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString, &name, &nameState))
        {
        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPropertyGrid(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos), sipType_wxPoint, posState);
            sipReleaseType(const_cast< ::wxSize *>(size), sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPropertyGrid[] = {{8, 0, 0}, {66, 255, 1}};


static PyMethodDef methods_wxPropertyGrid[] = {
    {sipName_AddActionTrigger, SIP_MLMETH_CAST(meth_wxPropertyGrid_AddActionTrigger), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_AddActionTrigger},
    {sipName_AddToSelection, SIP_MLMETH_CAST(meth_wxPropertyGrid_AddToSelection), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_AddToSelection},
    {sipName_AdjustScrollbars, meth_wxPropertyGrid_AdjustScrollbars, METH_VARARGS, doc_wxPropertyGrid_AdjustScrollbars},
    {sipName_AutoGetTranslation, SIP_MLMETH_CAST(meth_wxPropertyGrid_AutoGetTranslation), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_AutoGetTranslation},
    {sipName_BeginLabelEdit, SIP_MLMETH_CAST(meth_wxPropertyGrid_BeginLabelEdit), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_BeginLabelEdit},
    {sipName_CalcScrolledPosition, SIP_MLMETH_CAST(meth_wxPropertyGrid_CalcScrolledPosition), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_CalcScrolledPosition},
    {sipName_CalcUnscrolledPosition, SIP_MLMETH_CAST(meth_wxPropertyGrid_CalcUnscrolledPosition), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_CalcUnscrolledPosition},
    {sipName_CenterSplitter, SIP_MLMETH_CAST(meth_wxPropertyGrid_CenterSplitter), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_CenterSplitter},
    {sipName_ChangePropertyValue, SIP_MLMETH_CAST(meth_wxPropertyGrid_ChangePropertyValue), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ChangePropertyValue},
    {sipName_Clear, meth_wxPropertyGrid_Clear, METH_VARARGS, doc_wxPropertyGrid_Clear},
    {sipName_ClearActionTriggers, SIP_MLMETH_CAST(meth_wxPropertyGrid_ClearActionTriggers), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ClearActionTriggers},
    {sipName_CommitChangesFromEditor, SIP_MLMETH_CAST(meth_wxPropertyGrid_CommitChangesFromEditor), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_CommitChangesFromEditor},
    {sipName_Create, SIP_MLMETH_CAST(meth_wxPropertyGrid_Create), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_Create},
    {sipName_DedicateKey, SIP_MLMETH_CAST(meth_wxPropertyGrid_DedicateKey), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DedicateKey},
    {sipName_DisableKeyboardScrolling, meth_wxPropertyGrid_DisableKeyboardScrolling, METH_VARARGS, doc_wxPropertyGrid_DisableKeyboardScrolling},
    {sipName_DoEnable, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoEnable), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoFreeze, meth_wxPropertyGrid_DoFreeze, METH_VARARGS, SIP_NULLPTR},
    {sipName_DoGetBestClientSize, meth_wxPropertyGrid_DoGetBestClientSize, METH_VARARGS, SIP_NULLPTR},
    {sipName_DoGetBestSize, meth_wxPropertyGrid_DoGetBestSize, METH_VARARGS, SIP_NULLPTR},
    {sipName_DoGetClientSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoGetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoGetPosition, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoGetPosition), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoGetSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoGetSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoHidePropertyError, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoHidePropertyError), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DoHidePropertyError},
    {sipName_DoMoveWindow, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoMoveWindow), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoOnValidationFailure, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoOnValidationFailure), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DoOnValidationFailure},
    {sipName_DoOnValidationFailureReset, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoOnValidationFailureReset), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DoOnValidationFailureReset},
    {sipName_DoPrepareDC, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoPrepareDC), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DoPrepareDC},
    {sipName_DoRegisterEditorClass, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoRegisterEditorClass), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DoRegisterEditorClass},
    {sipName_DoSetClientSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoSetClientSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoSetSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoSetSize), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoSetSizeHints, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoSetSizeHints), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoSetWindowVariant, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoSetWindowVariant), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_DoShowPropertyError, SIP_MLMETH_CAST(meth_wxPropertyGrid_DoShowPropertyError), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DoShowPropertyError},
    {sipName_DoThaw, meth_wxPropertyGrid_DoThaw, METH_VARARGS, SIP_NULLPTR},
    {sipName_DrawItemAndValueRelated, SIP_MLMETH_CAST(meth_wxPropertyGrid_DrawItemAndValueRelated), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_DrawItemAndValueRelated},
    {sipName_EditorsValueWasModified, meth_wxPropertyGrid_EditorsValueWasModified, METH_VARARGS, doc_wxPropertyGrid_EditorsValueWasModified},
    {sipName_EditorsValueWasNotModified, meth_wxPropertyGrid_EditorsValueWasNotModified, METH_VARARGS, doc_wxPropertyGrid_EditorsValueWasNotModified},
    {sipName_EnableCategories, SIP_MLMETH_CAST(meth_wxPropertyGrid_EnableCategories), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_EnableCategories},
    {sipName_EnableScrolling, SIP_MLMETH_CAST(meth_wxPropertyGrid_EnableScrolling), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_EnableScrolling},
    {sipName_EndLabelEdit, SIP_MLMETH_CAST(meth_wxPropertyGrid_EndLabelEdit), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_EndLabelEdit},
    {sipName_EnsureVisible, SIP_MLMETH_CAST(meth_wxPropertyGrid_EnsureVisible), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_EnsureVisible},
    {sipName_FitColumns, meth_wxPropertyGrid_FitColumns, METH_VARARGS, doc_wxPropertyGrid_FitColumns},
    {sipName_GetCaptionBackgroundColour, meth_wxPropertyGrid_GetCaptionBackgroundColour, METH_VARARGS, doc_wxPropertyGrid_GetCaptionBackgroundColour},
    {sipName_GetCaptionFont, meth_wxPropertyGrid_GetCaptionFont, METH_VARARGS, doc_wxPropertyGrid_GetCaptionFont},
    {sipName_GetCaptionForegroundColour, meth_wxPropertyGrid_GetCaptionForegroundColour, METH_VARARGS, doc_wxPropertyGrid_GetCaptionForegroundColour},
    {sipName_GetCellBackgroundColour, meth_wxPropertyGrid_GetCellBackgroundColour, METH_VARARGS, doc_wxPropertyGrid_GetCellBackgroundColour},
    {sipName_GetCellDisabledTextColour, meth_wxPropertyGrid_GetCellDisabledTextColour, METH_VARARGS, doc_wxPropertyGrid_GetCellDisabledTextColour},
    {sipName_GetCellTextColour, meth_wxPropertyGrid_GetCellTextColour, METH_VARARGS, doc_wxPropertyGrid_GetCellTextColour},
    {sipName_GetClassDefaultAttributes, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetClassDefaultAttributes), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetClassDefaultAttributes},
    {sipName_GetColumnCount, meth_wxPropertyGrid_GetColumnCount, METH_VARARGS, doc_wxPropertyGrid_GetColumnCount},
    {sipName_GetDefaultBorder, meth_wxPropertyGrid_GetDefaultBorder, METH_VARARGS, SIP_NULLPTR},
    {sipName_GetDefaultBorderForControl, meth_wxPropertyGrid_GetDefaultBorderForControl, METH_VARARGS, SIP_NULLPTR},
    {sipName_GetEditorTextCtrl, meth_wxPropertyGrid_GetEditorTextCtrl, METH_VARARGS, doc_wxPropertyGrid_GetEditorTextCtrl},
    {sipName_GetEmptySpaceColour, meth_wxPropertyGrid_GetEmptySpaceColour, METH_VARARGS, doc_wxPropertyGrid_GetEmptySpaceColour},
    {sipName_GetFontHeight, meth_wxPropertyGrid_GetFontHeight, METH_VARARGS, doc_wxPropertyGrid_GetFontHeight},
    {sipName_GetGrid, meth_wxPropertyGrid_GetGrid, METH_VARARGS, doc_wxPropertyGrid_GetGrid},
    {sipName_GetImageRect, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetImageRect), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetImageRect},
    {sipName_GetImageSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetImageSize), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetImageSize},
    {sipName_GetLabelEditor, meth_wxPropertyGrid_GetLabelEditor, METH_VARARGS, doc_wxPropertyGrid_GetLabelEditor},
    {sipName_GetLastItem, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetLastItem), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetLastItem},
    {sipName_GetLineColour, meth_wxPropertyGrid_GetLineColour, METH_VARARGS, doc_wxPropertyGrid_GetLineColour},
    {sipName_GetMarginColour, meth_wxPropertyGrid_GetMarginColour, METH_VARARGS, doc_wxPropertyGrid_GetMarginColour},
    {sipName_GetMarginWidth, meth_wxPropertyGrid_GetMarginWidth, METH_VARARGS, doc_wxPropertyGrid_GetMarginWidth},
    {sipName_GetPanel, meth_wxPropertyGrid_GetPanel, METH_VARARGS, doc_wxPropertyGrid_GetPanel},
    {sipName_GetRoot, meth_wxPropertyGrid_GetRoot, METH_VARARGS, doc_wxPropertyGrid_GetRoot},
    {sipName_GetRowHeight, meth_wxPropertyGrid_GetRowHeight, METH_VARARGS, doc_wxPropertyGrid_GetRowHeight},
    {sipName_GetScaleX, meth_wxPropertyGrid_GetScaleX, METH_VARARGS, doc_wxPropertyGrid_GetScaleX},
    {sipName_GetScaleY, meth_wxPropertyGrid_GetScaleY, METH_VARARGS, doc_wxPropertyGrid_GetScaleY},
    {sipName_GetScrollLines, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetScrollLines), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetScrollLines},
    {sipName_GetScrollPageSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetScrollPageSize), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetScrollPageSize},
    {sipName_GetScrollPixelsPerUnit, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetScrollPixelsPerUnit), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetScrollPixelsPerUnit},
    {sipName_GetSelectedProperty, meth_wxPropertyGrid_GetSelectedProperty, METH_VARARGS, doc_wxPropertyGrid_GetSelectedProperty},
    {sipName_GetSelection, meth_wxPropertyGrid_GetSelection, METH_VARARGS, doc_wxPropertyGrid_GetSelection},
    {sipName_GetSelectionBackgroundColour, meth_wxPropertyGrid_GetSelectionBackgroundColour, METH_VARARGS, doc_wxPropertyGrid_GetSelectionBackgroundColour},
    {sipName_GetSelectionForegroundColour, meth_wxPropertyGrid_GetSelectionForegroundColour, METH_VARARGS, doc_wxPropertyGrid_GetSelectionForegroundColour},
    {sipName_GetSizeAvailableForScrollTarget, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetSizeAvailableForScrollTarget), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetSizeAvailableForScrollTarget},
    {sipName_GetSplitterPosition, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetSplitterPosition), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetSplitterPosition},
    {sipName_GetStatusBar, meth_wxPropertyGrid_GetStatusBar, METH_VARARGS, doc_wxPropertyGrid_GetStatusBar},
    {sipName_GetTargetRect, meth_wxPropertyGrid_GetTargetRect, METH_VARARGS, doc_wxPropertyGrid_GetTargetRect},
    {sipName_GetTargetWindow, meth_wxPropertyGrid_GetTargetWindow, METH_VARARGS, doc_wxPropertyGrid_GetTargetWindow},
    {sipName_GetUncommittedPropertyValue, meth_wxPropertyGrid_GetUncommittedPropertyValue, METH_VARARGS, doc_wxPropertyGrid_GetUncommittedPropertyValue},
    {sipName_GetUnspecifiedValueAppearance, meth_wxPropertyGrid_GetUnspecifiedValueAppearance, METH_VARARGS, doc_wxPropertyGrid_GetUnspecifiedValueAppearance},
    {sipName_GetUnspecifiedValueText, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetUnspecifiedValueText), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetUnspecifiedValueText},
    {sipName_GetVerticalSpacing, meth_wxPropertyGrid_GetVerticalSpacing, METH_VARARGS, doc_wxPropertyGrid_GetVerticalSpacing},
    {sipName_GetViewStart, SIP_MLMETH_CAST(meth_wxPropertyGrid_GetViewStart), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_GetViewStart},
    {sipName_HasTransparentBackground, meth_wxPropertyGrid_HasTransparentBackground, METH_VARARGS, SIP_NULLPTR},
    {sipName_HitTest, SIP_MLMETH_CAST(meth_wxPropertyGrid_HitTest), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_HitTest},
    {sipName_IsAnyModified, meth_wxPropertyGrid_IsAnyModified, METH_VARARGS, doc_wxPropertyGrid_IsAnyModified},
    {sipName_IsAutoScrolling, meth_wxPropertyGrid_IsAutoScrolling, METH_VARARGS, doc_wxPropertyGrid_IsAutoScrolling},
    {sipName_IsEditorFocused, meth_wxPropertyGrid_IsEditorFocused, METH_VARARGS, doc_wxPropertyGrid_IsEditorFocused},
    {sipName_IsEditorsValueModified, meth_wxPropertyGrid_IsEditorsValueModified, METH_VARARGS, doc_wxPropertyGrid_IsEditorsValueModified},
    {sipName_IsFrozen, meth_wxPropertyGrid_IsFrozen, METH_VARARGS, doc_wxPropertyGrid_IsFrozen},
    {sipName_IsRetained, meth_wxPropertyGrid_IsRetained, METH_VARARGS, doc_wxPropertyGrid_IsRetained},
    {sipName_MakeColumnEditable, SIP_MLMETH_CAST(meth_wxPropertyGrid_MakeColumnEditable), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_MakeColumnEditable},
    {sipName_OnDraw, SIP_MLMETH_CAST(meth_wxPropertyGrid_OnDraw), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_OnDraw},
    {sipName_OnTLPChanging, SIP_MLMETH_CAST(meth_wxPropertyGrid_OnTLPChanging), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_OnTLPChanging},
    {sipName_PrepareDC, SIP_MLMETH_CAST(meth_wxPropertyGrid_PrepareDC), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_PrepareDC},
    {sipName_ProcessEvent, SIP_MLMETH_CAST(meth_wxPropertyGrid_ProcessEvent), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_RefreshEditor, meth_wxPropertyGrid_RefreshEditor, METH_VARARGS, doc_wxPropertyGrid_RefreshEditor},
    {sipName_RefreshProperty, SIP_MLMETH_CAST(meth_wxPropertyGrid_RefreshProperty), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_RefreshProperty},
    {sipName_RegisterEditorClass, SIP_MLMETH_CAST(meth_wxPropertyGrid_RegisterEditorClass), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_RegisterEditorClass},
    {sipName_RemoveFromSelection, SIP_MLMETH_CAST(meth_wxPropertyGrid_RemoveFromSelection), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_RemoveFromSelection},
    {sipName_ResetColours, meth_wxPropertyGrid_ResetColours, METH_VARARGS, doc_wxPropertyGrid_ResetColours},
    {sipName_ResetColumnSizes, SIP_MLMETH_CAST(meth_wxPropertyGrid_ResetColumnSizes), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ResetColumnSizes},
    {sipName_Scroll, SIP_MLMETH_CAST(meth_wxPropertyGrid_Scroll), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_Scroll},
    {sipName_SelectProperty, SIP_MLMETH_CAST(meth_wxPropertyGrid_SelectProperty), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SelectProperty},
    {sipName_SendAutoScrollEvents, SIP_MLMETH_CAST(meth_wxPropertyGrid_SendAutoScrollEvents), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SendAutoScrollEvents},
    {sipName_SendDestroyEvent, meth_wxPropertyGrid_SendDestroyEvent, METH_VARARGS, SIP_NULLPTR},
    {sipName_SetCaptionBackgroundColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetCaptionBackgroundColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetCaptionBackgroundColour},
    {sipName_SetCaptionTextColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetCaptionTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetCaptionTextColour},
    {sipName_SetCellBackgroundColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetCellBackgroundColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetCellBackgroundColour},
    {sipName_SetCellDisabledTextColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetCellDisabledTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetCellDisabledTextColour},
    {sipName_SetCellTextColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetCellTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetCellTextColour},
    {sipName_SetColumnCount, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetColumnCount), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetColumnCount},
    {sipName_SetCurrentCategory, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetCurrentCategory), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetCurrentCategory},
    {sipName_SetEmptySpaceColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetEmptySpaceColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetEmptySpaceColour},
    {sipName_SetLineColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetLineColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetLineColour},
    {sipName_SetMarginColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetMarginColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetMarginColour},
    {sipName_SetScale, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetScale), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetScale},
    {sipName_SetScrollPageSize, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetScrollPageSize), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetScrollPageSize},
    {sipName_SetScrollRate, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetScrollRate), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetScrollRate},
    {sipName_SetScrollbars, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetScrollbars), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetScrollbars},
    {sipName_SetSelection, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetSelection), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetSelection},
    {sipName_SetSelectionBackgroundColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetSelectionBackgroundColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetSelectionBackgroundColour},
    {sipName_SetSelectionTextColour, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetSelectionTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetSelectionTextColour},
    {sipName_SetSplitterLeft, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetSplitterLeft), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetSplitterLeft},
    {sipName_SetSplitterPosition, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetSplitterPosition), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetSplitterPosition},
    {sipName_SetTargetRect, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetTargetRect), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetTargetRect},
    {sipName_SetTargetWindow, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetTargetWindow), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetTargetWindow},
    {sipName_SetUnspecifiedValueAppearance, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetUnspecifiedValueAppearance), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetUnspecifiedValueAppearance},
    {sipName_SetVerticalSpacing, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetVerticalSpacing), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetVerticalSpacing},
    {sipName_SetVirtualWidth, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetVirtualWidth), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetVirtualWidth},
    {sipName_SetupTextCtrlValue, SIP_MLMETH_CAST(meth_wxPropertyGrid_SetupTextCtrlValue), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_SetupTextCtrlValue},
    {sipName_ShouldScrollToChildOnFocus, SIP_MLMETH_CAST(meth_wxPropertyGrid_ShouldScrollToChildOnFocus), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ShouldScrollToChildOnFocus},
    {sipName_ShowPropertyError, SIP_MLMETH_CAST(meth_wxPropertyGrid_ShowPropertyError), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ShowPropertyError},
    {sipName_ShowScrollbars, SIP_MLMETH_CAST(meth_wxPropertyGrid_ShowScrollbars), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ShowScrollbars},
    {sipName_StopAutoScrolling, meth_wxPropertyGrid_StopAutoScrolling, METH_VARARGS, doc_wxPropertyGrid_StopAutoScrolling},
    {sipName_TryAfter, SIP_MLMETH_CAST(meth_wxPropertyGrid_TryAfter), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_TryBefore, SIP_MLMETH_CAST(meth_wxPropertyGrid_TryBefore), METH_VARARGS|METH_KEYWORDS, SIP_NULLPTR},
    {sipName_UnfocusEditor, meth_wxPropertyGrid_UnfocusEditor, METH_VARARGS, doc_wxPropertyGrid_UnfocusEditor},
    {sipName_ValueChangeInEvent, SIP_MLMETH_CAST(meth_wxPropertyGrid_ValueChangeInEvent), METH_VARARGS|METH_KEYWORDS, doc_wxPropertyGrid_ValueChangeInEvent},
    {sipName_WasValueChangedInEvent, meth_wxPropertyGrid_WasValueChangedInEvent, METH_VARARGS, doc_wxPropertyGrid_WasValueChangedInEvent}
};

sipVariableDef variables_wxPropertyGrid[] = {
    {PropertyVariable, sipName_VerticalSpacing, &methods_wxPropertyGrid[83], &methods_wxPropertyGrid[130], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_UnspecifiedValueText, &methods_wxPropertyGrid[82], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_UnspecifiedValueAppearance, &methods_wxPropertyGrid[81], &methods_wxPropertyGrid[129], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_UncommittedPropertyValue, &methods_wxPropertyGrid[80], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TargetWindow, &methods_wxPropertyGrid[79], &methods_wxPropertyGrid[128], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_TargetRect, &methods_wxPropertyGrid[78], &methods_wxPropertyGrid[127], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_StatusBar, &methods_wxPropertyGrid[77], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SplitterPosition, &methods_wxPropertyGrid[76], &methods_wxPropertyGrid[126], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SelectionForegroundColour, &methods_wxPropertyGrid[74], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SelectionBackgroundColour, &methods_wxPropertyGrid[73], &methods_wxPropertyGrid[123], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Selection, &methods_wxPropertyGrid[72], &methods_wxPropertyGrid[122], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_SelectedProperty, &methods_wxPropertyGrid[71], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ScaleY, &methods_wxPropertyGrid[67], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ScaleX, &methods_wxPropertyGrid[66], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_RowHeight, &methods_wxPropertyGrid[65], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Root, &methods_wxPropertyGrid[64], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Panel, &methods_wxPropertyGrid[63], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MarginWidth, &methods_wxPropertyGrid[62], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_MarginColour, &methods_wxPropertyGrid[61], &methods_wxPropertyGrid[117], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LineColour, &methods_wxPropertyGrid[60], &methods_wxPropertyGrid[116], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LastItem, &methods_wxPropertyGrid[59], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_LabelEditor, &methods_wxPropertyGrid[58], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ImageSize, &methods_wxPropertyGrid[57], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Grid, &methods_wxPropertyGrid[55], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FontHeight, &methods_wxPropertyGrid[54], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_EmptySpaceColour, &methods_wxPropertyGrid[53], &methods_wxPropertyGrid[115], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_EditorTextCtrl, &methods_wxPropertyGrid[52], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_ColumnCount, &methods_wxPropertyGrid[49], &methods_wxPropertyGrid[113], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CellTextColour, &methods_wxPropertyGrid[47], &methods_wxPropertyGrid[112], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CellDisabledTextColour, &methods_wxPropertyGrid[46], &methods_wxPropertyGrid[111], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CellBackgroundColour, &methods_wxPropertyGrid[45], &methods_wxPropertyGrid[110], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CaptionForegroundColour, &methods_wxPropertyGrid[44], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CaptionFont, &methods_wxPropertyGrid[43], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CaptionBackgroundColour, &methods_wxPropertyGrid[42], &methods_wxPropertyGrid[108], SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxPropertyGrid, "PropertyGrid()\n"
"PropertyGrid(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=PG_DEFAULT_STYLE, name=PropertyGridNameStr)\n"
"\n"
"wxPropertyGrid is a specialized grid for editing properties - in other\n"
"words name = value pairs.");


sipClassTypeDef sipTypeDef__propgrid_wxPropertyGrid = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPropertyGrid,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_PropertyGrid,
        {0, 0, 1},
        142, methods_wxPropertyGrid,
        0, SIP_NULLPTR,
        34, variables_wxPropertyGrid,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPropertyGrid,
    -1,
    -1,
    supers_wxPropertyGrid,
    SIP_NULLPTR,
    init_type_wxPropertyGrid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxPropertyGrid,
    SIP_NULLPTR,
    array_wxPropertyGrid,
    SIP_NULLPTR,
    release_wxPropertyGrid,
    cast_wxPropertyGrid,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
