/*
 * Interface wrapper code.
 *
 * Generated by SIP 6.7.9
 *
 *     Copyright: (c) 2020 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        
        typedef wxList wxRichTextDrawingHandlerList;
        #include <wx/richtext/richtextbuffer.h>
        
        typedef wxList wxRichTextFileHandlerList;
        #include <wx/richtext/richtextctrl.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/cmdproc.h>
        #include <wx/stream.h>
        #include <wx/stream.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/image.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/xml/xml.h>
        #include <wx/richtext/richtextxml.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    PyObject* _wxRichTextBuffer_GetExtWildcard(bool combine, bool save)
    {
        wxString wildcards;
        wxArrayInt types;
        wildcards = wxRichTextBuffer::GetExtWildcard(combine, save, &types);
        
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(0);
        for (size_t i=0; i < types.GetCount(); i++) {
            PyObject* number = wxPyInt_FromLong(types[i]);
            PyList_Append(list, number);
            Py_DECREF(number);
        }
        PyObject* tup = PyTuple_New(2);
        PyTuple_SET_ITEM(tup, 0, wx2PyString(wildcards));
        PyTuple_SET_ITEM(tup, 1, list);
        return tup;
    }


class sipwxRichTextBuffer : public  ::wxRichTextBuffer
{
public:
    sipwxRichTextBuffer();
    sipwxRichTextBuffer(const  ::wxRichTextBuffer&);
    virtual ~sipwxRichTextBuffer();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    size_t GetStyleStackSize() const SIP_OVERRIDE;
    void ClearStyleStack() SIP_OVERRIDE;
    bool EndAllStyles() SIP_OVERRIDE;
    bool EndStyle() SIP_OVERRIDE;
    bool BeginStyle(const  ::wxRichTextAttr&) SIP_OVERRIDE;
    bool CanPasteFromClipboard() const SIP_OVERRIDE;
    bool PasteFromClipboard(long) SIP_OVERRIDE;
    bool CopyToClipboard(const  ::wxRichTextRange&) SIP_OVERRIDE;
    bool SuppressingUndo() const SIP_OVERRIDE;
    bool EndSuppressUndo() SIP_OVERRIDE;
    bool BeginSuppressUndo() SIP_OVERRIDE;
     ::wxRichTextCommand* GetBatchedCommand() const SIP_OVERRIDE;
    bool SubmitAction( ::wxRichTextAction*) SIP_OVERRIDE;
    bool BatchingUndo() const SIP_OVERRIDE;
    bool EndBatchUndo() SIP_OVERRIDE;
    bool BeginBatchUndo(const  ::wxString&) SIP_OVERRIDE;
    void ResetAndClearCommands() SIP_OVERRIDE;
    bool SaveFile( ::wxOutputStream&, ::wxRichTextFileType) SIP_OVERRIDE;
    bool SaveFile(const  ::wxString&, ::wxRichTextFileType) SIP_OVERRIDE;
    bool LoadFile( ::wxInputStream&, ::wxRichTextFileType) SIP_OVERRIDE;
    bool LoadFile(const  ::wxString&, ::wxRichTextFileType) SIP_OVERRIDE;
     ::wxRichTextObject* GetChildAtPosition(long) const SIP_OVERRIDE;
    bool Draw( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int) SIP_OVERRIDE;
    bool Layout( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
    int HitTest( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int) SIP_OVERRIDE;
    bool FindPosition( ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool) SIP_OVERRIDE;
     ::wxSize GetBestSize() const SIP_OVERRIDE;
    bool GetRangeSize(const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*) const SIP_OVERRIDE;
     ::wxRichTextObject* DoSplit(long) SIP_OVERRIDE;
    void CalculateRange(long,long&) SIP_OVERRIDE;
    bool DeleteRange(const  ::wxRichTextRange&) SIP_OVERRIDE;
    bool IsEmpty() const SIP_OVERRIDE;
    bool IsFloatable() const SIP_OVERRIDE;
    bool IsFloating() const SIP_OVERRIDE;
    int GetFloatDirection() const SIP_OVERRIDE;
     ::wxString GetTextForRange(const  ::wxRichTextRange&) const SIP_OVERRIDE;
    bool CanMerge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) const SIP_OVERRIDE;
    bool Merge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool CanSplit( ::wxRichTextDrawingContext&) const SIP_OVERRIDE;
     ::wxRichTextObject* Split( ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool CanEditProperties() const SIP_OVERRIDE;
    bool EditProperties( ::wxWindow*, ::wxRichTextBuffer*) SIP_OVERRIDE;
     ::wxString GetPropertiesMenuLabel() const SIP_OVERRIDE;
    bool AcceptsFocus() const SIP_OVERRIDE;
    bool ImportFromXML( ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*) SIP_OVERRIDE;
    bool UsesParagraphAttributes() const SIP_OVERRIDE;
     ::wxString GetXMLNodeName() const SIP_OVERRIDE;
    void Invalidate(const  ::wxRichTextRange&) SIP_OVERRIDE;
    bool HandlesChildSelections() const SIP_OVERRIDE;
     ::wxRichTextSelection GetSelection(long,long) const SIP_OVERRIDE;
     ::wxSize GetCachedSize() const SIP_OVERRIDE;
    void SetCachedSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetMaxSize() const SIP_OVERRIDE;
    void SetMaxSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxSize GetMinSize() const SIP_OVERRIDE;
    void SetMinSize(const  ::wxSize&) SIP_OVERRIDE;
     ::wxTextAttrSize GetNaturalSize() const SIP_OVERRIDE;
     ::wxPoint GetPosition() const SIP_OVERRIDE;
    void SetPosition(const  ::wxPoint&) SIP_OVERRIDE;
     ::wxPoint GetAbsolutePosition() const SIP_OVERRIDE;
     ::wxRect GetRect() const SIP_OVERRIDE;
    bool IsComposite() const SIP_OVERRIDE;
    bool IsAtomic() const SIP_OVERRIDE;
     ::wxRichTextObject* GetParent() const SIP_OVERRIDE;
    void SetParent( ::wxRichTextObject*) SIP_OVERRIDE;
     ::wxRichTextParagraphLayoutBox* GetContainer() const SIP_OVERRIDE;
     ::wxRichTextParagraphLayoutBox* GetParentContainer() const SIP_OVERRIDE;
    void SetMargins(int) SIP_OVERRIDE;
    void SetMargins(int,int,int,int) SIP_OVERRIDE;
    int GetLeftMargin() const SIP_OVERRIDE;
    int GetRightMargin() const SIP_OVERRIDE;
    int GetTopMargin() const SIP_OVERRIDE;
    int GetBottomMargin() const SIP_OVERRIDE;
     ::wxRect GetAvailableContentArea( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&) const SIP_OVERRIDE;
    bool LayoutToBestSize( ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int) SIP_OVERRIDE;
    bool AdjustAttributes( ::wxRichTextAttr&, ::wxRichTextDrawingContext&) SIP_OVERRIDE;
    bool IsTopLevel() const SIP_OVERRIDE;
    void Show(bool) SIP_OVERRIDE;
     ::wxRichTextObject* Clone() const SIP_OVERRIDE;
    void Move(const  ::wxPoint&) SIP_OVERRIDE;
    bool SetListStyle(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int) SIP_OVERRIDE;
    bool SetListStyle(const  ::wxRichTextRange&,const  ::wxString&,int,int,int) SIP_OVERRIDE;
    bool NumberList(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int) SIP_OVERRIDE;
    bool NumberList(const  ::wxRichTextRange&,const  ::wxString&,int,int,int) SIP_OVERRIDE;
    bool PromoteList(int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int) SIP_OVERRIDE;
    bool PromoteList(int,const  ::wxRichTextRange&,const  ::wxString&,int,int) SIP_OVERRIDE;
     ::wxRichTextStyleSheet* GetStyleSheet() const SIP_OVERRIDE;
    void Clear() SIP_OVERRIDE;
    void Reset() SIP_OVERRIDE;
     ::wxRichTextRange AddParagraph(const  ::wxString&, ::wxRichTextAttr*) SIP_OVERRIDE;
     ::wxRichTextRange AddImage(const  ::wxImage&, ::wxRichTextAttr*) SIP_OVERRIDE;
     ::wxRichTextRange AddParagraphs(const  ::wxString&, ::wxRichTextAttr*) SIP_OVERRIDE;
     ::wxRichTextLine* GetLineAtPosition(long,bool) const SIP_OVERRIDE;
     ::wxRichTextLine* GetLineAtYPosition(int) const SIP_OVERRIDE;
     ::wxRichTextParagraph* GetParagraphAtPosition(long,bool) const SIP_OVERRIDE;
     ::wxSize GetLineSizeAtPosition(long,bool) const SIP_OVERRIDE;
    long GetVisibleLineNumber(long,bool,bool) const SIP_OVERRIDE;
     ::wxRichTextLine* GetLineForVisibleLineNumber(long) const SIP_OVERRIDE;
     ::wxRichTextObject* GetLeafObjectAtPosition(long) const SIP_OVERRIDE;
     ::wxRichTextParagraph* GetParagraphAtLine(long) const SIP_OVERRIDE;
     ::wxRichTextParagraph* GetParagraphForLine( ::wxRichTextLine*) const SIP_OVERRIDE;
    int GetParagraphLength(long) const SIP_OVERRIDE;
    int GetParagraphCount() const SIP_OVERRIDE;
    int GetLineCount() const SIP_OVERRIDE;
     ::wxString GetParagraphText(long) const SIP_OVERRIDE;
    long XYToPosition(long,long) const SIP_OVERRIDE;
    bool PositionToXY(long,long*,long*) const SIP_OVERRIDE;
    bool SetStyle(const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int) SIP_OVERRIDE;
    void SetStyle( ::wxRichTextObject*,const  ::wxRichTextAttr&,int) SIP_OVERRIDE;
    bool GetStyle(long, ::wxRichTextAttr&) SIP_OVERRIDE;
    bool GetUncombinedStyle(long, ::wxRichTextAttr&) SIP_OVERRIDE;
    bool DoGetStyle(long, ::wxRichTextAttr&,bool) SIP_OVERRIDE;
    bool GetStyleForRange(const  ::wxRichTextRange&, ::wxRichTextAttr&) SIP_OVERRIDE;
    bool ClearListStyle(const  ::wxRichTextRange&,int) SIP_OVERRIDE;
    bool DoNumberList(const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int) SIP_OVERRIDE;
    bool FindNextParagraphNumber( ::wxRichTextParagraph*, ::wxRichTextAttr&) const SIP_OVERRIDE;
    bool SetProperties(const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int) SIP_OVERRIDE;
    bool SetObjectPropertiesWithUndo( ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*) SIP_OVERRIDE;
    bool HasCharacterAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const SIP_OVERRIDE;
    bool HasParagraphAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const SIP_OVERRIDE;
    void PrepareContent( ::wxRichTextParagraphLayoutBox&) SIP_OVERRIDE;
    bool InsertFragment(long, ::wxRichTextParagraphLayoutBox&) SIP_OVERRIDE;
    bool CopyFragment(const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&) SIP_OVERRIDE;
    bool ApplyStyleSheet( ::wxRichTextStyleSheet*) SIP_OVERRIDE;
    void UpdateRanges() SIP_OVERRIDE;
     ::wxString GetText() const SIP_OVERRIDE;
    bool SetDefaultStyle(const  ::wxRichTextAttr&) SIP_OVERRIDE;
    const  ::wxRichTextAttr& GetDefaultStyle() const SIP_OVERRIDE;
    void SetBasicStyle(const  ::wxRichTextAttr&) SIP_OVERRIDE;
    const  ::wxRichTextAttr& GetBasicStyle() const SIP_OVERRIDE;
    void DoInvalidate(const  ::wxRichTextRange&) SIP_OVERRIDE;
    void InvalidateHierarchy(const  ::wxRichTextRange&) SIP_OVERRIDE;
    bool UpdateFloatingObjects(const  ::wxRect&, ::wxRichTextObject*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextBuffer(const sipwxRichTextBuffer &);
    sipwxRichTextBuffer &operator = (const sipwxRichTextBuffer &);

    char sipPyMethods[133];
};

sipwxRichTextBuffer::sipwxRichTextBuffer():  ::wxRichTextBuffer(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextBuffer::sipwxRichTextBuffer(const  ::wxRichTextBuffer& obj):  ::wxRichTextBuffer(obj), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextBuffer::~sipwxRichTextBuffer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

size_t sipwxRichTextBuffer::GetStyleStackSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[0]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetStyleStackSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetStyleStackSize();

    extern size_t sipVH__richtext_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_100(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::ClearStyleStack()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[1], &sipPySelf, SIP_NULLPTR, sipName_ClearStyleStack);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::ClearStyleStack();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::EndAllStyles()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[2], &sipPySelf, SIP_NULLPTR, sipName_EndAllStyles);

    if (!sipMeth)
        return  ::wxRichTextBuffer::EndAllStyles();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::EndStyle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[3], &sipPySelf, SIP_NULLPTR, sipName_EndStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::EndStyle();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::BeginStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[4], &sipPySelf, SIP_NULLPTR, sipName_BeginStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::BeginStyle(style);

    extern bool sipVH__richtext_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    return sipVH__richtext_70(sipGILState, 0, sipPySelf, sipMeth, style);
}

bool sipwxRichTextBuffer::CanPasteFromClipboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[5]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanPasteFromClipboard);

    if (!sipMeth)
        return  ::wxRichTextBuffer::CanPasteFromClipboard();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::PasteFromClipboard(long position)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[6], &sipPySelf, SIP_NULLPTR, sipName_PasteFromClipboard);

    if (!sipMeth)
        return  ::wxRichTextBuffer::PasteFromClipboard(position);

    extern bool sipVH__richtext_99(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_99(sipGILState, 0, sipPySelf, sipMeth, position);
}

bool sipwxRichTextBuffer::CopyToClipboard(const  ::wxRichTextRange& range)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[7], &sipPySelf, SIP_NULLPTR, sipName_CopyToClipboard);

    if (!sipMeth)
        return  ::wxRichTextBuffer::CopyToClipboard(range);

    extern bool sipVH__richtext_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_8(sipGILState, 0, sipPySelf, sipMeth, range);
}

bool sipwxRichTextBuffer::SuppressingUndo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[8]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_SuppressingUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SuppressingUndo();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::EndSuppressUndo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[9], &sipPySelf, SIP_NULLPTR, sipName_EndSuppressUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::EndSuppressUndo();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::BeginSuppressUndo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[10], &sipPySelf, SIP_NULLPTR, sipName_BeginSuppressUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::BeginSuppressUndo();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextCommand* sipwxRichTextBuffer::GetBatchedCommand() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[11]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBatchedCommand);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetBatchedCommand();

    extern  ::wxRichTextCommand* sipVH__richtext_98(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_98(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::SubmitAction( ::wxRichTextAction*action)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[12], &sipPySelf, SIP_NULLPTR, sipName_SubmitAction);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SubmitAction(action);

    extern bool sipVH__richtext_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAction*);

    return sipVH__richtext_97(sipGILState, 0, sipPySelf, sipMeth, action);
}

bool sipwxRichTextBuffer::BatchingUndo() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[13]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_BatchingUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::BatchingUndo();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::EndBatchUndo()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[14], &sipPySelf, SIP_NULLPTR, sipName_EndBatchUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::EndBatchUndo();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::BeginBatchUndo(const  ::wxString& cmdName)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[15], &sipPySelf, SIP_NULLPTR, sipName_BeginBatchUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::BeginBatchUndo(cmdName);

    extern bool sipVH__richtext_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__richtext_96(sipGILState, 0, sipPySelf, sipMeth, cmdName);
}

void sipwxRichTextBuffer::ResetAndClearCommands()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[16], &sipPySelf, SIP_NULLPTR, sipName_ResetAndClearCommands);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::ResetAndClearCommands();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::SaveFile( ::wxOutputStream& stream, ::wxRichTextFileType type)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[17], &sipPySelf, SIP_NULLPTR, sipName_SaveFile);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SaveFile(stream,type);

    extern bool sipVH__richtext_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxOutputStream&, ::wxRichTextFileType);

    return sipVH__richtext_95(sipGILState, 0, sipPySelf, sipMeth, stream, type);
}

bool sipwxRichTextBuffer::SaveFile(const  ::wxString& filename, ::wxRichTextFileType type)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[18], &sipPySelf, SIP_NULLPTR, sipName_SaveFile);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SaveFile(filename,type);

    extern bool sipVH__richtext_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextFileType);

    return sipVH__richtext_93(sipGILState, 0, sipPySelf, sipMeth, filename, type);
}

bool sipwxRichTextBuffer::LoadFile( ::wxInputStream& stream, ::wxRichTextFileType type)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[19], &sipPySelf, SIP_NULLPTR, sipName_LoadFile);

    if (!sipMeth)
        return  ::wxRichTextBuffer::LoadFile(stream,type);

    extern bool sipVH__richtext_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxInputStream&, ::wxRichTextFileType);

    return sipVH__richtext_94(sipGILState, 0, sipPySelf, sipMeth, stream, type);
}

bool sipwxRichTextBuffer::LoadFile(const  ::wxString& filename, ::wxRichTextFileType type)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[20], &sipPySelf, SIP_NULLPTR, sipName_LoadFile);

    if (!sipMeth)
        return  ::wxRichTextBuffer::LoadFile(filename,type);

    extern bool sipVH__richtext_93(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextFileType);

    return sipVH__richtext_93(sipGILState, 0, sipPySelf, sipMeth, filename, type);
}

 ::wxRichTextObject* sipwxRichTextBuffer::GetChildAtPosition(long pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[21]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetChildAtPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetChildAtPosition(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

bool sipwxRichTextBuffer::Draw( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRichTextRange& range,const  ::wxRichTextSelection& selection,const  ::wxRect& rect,int descent,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[22], &sipPySelf, SIP_NULLPTR, sipName_Draw);

    if (!sipMeth)
        return  ::wxRichTextBuffer::Draw(dc,context,range,selection,rect,descent,style);

    extern bool sipVH__richtext_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);

    return sipVH__richtext_0(sipGILState, 0, sipPySelf, sipMeth, dc, context, range, selection, rect, descent, style);
}

bool sipwxRichTextBuffer::Layout( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& rect,const  ::wxRect& parentRect,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[23], &sipPySelf, SIP_NULLPTR, sipName_Layout);

    if (!sipMeth)
        return  ::wxRichTextBuffer::Layout(dc,context,rect,parentRect,style);

    extern bool sipVH__richtext_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_1(sipGILState, 0, sipPySelf, sipMeth, dc, context, rect, parentRect, style);
}

int sipwxRichTextBuffer::HitTest( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxPoint& pt,long& textPosition, ::wxRichTextObject**obj, ::wxRichTextObject**contextObj,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[24], &sipPySelf, SIP_NULLPTR, sipName_HitTest);

    if (!sipMeth)
        return  ::wxRichTextBuffer::HitTest(dc,context,pt,textPosition,obj,contextObj,flags);

    extern int sipVH__richtext_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);

    return sipVH__richtext_2(sipGILState, 0, sipPySelf, sipMeth, dc, context, pt, textPosition, obj, contextObj, flags);
}

bool sipwxRichTextBuffer::FindPosition( ::wxDC& dc, ::wxRichTextDrawingContext& context,long index, ::wxPoint& pt,int*height,bool forceLineStart)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[25], &sipPySelf, SIP_NULLPTR, sipName_FindPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::FindPosition(dc,context,index,pt,height,forceLineStart);

    extern bool sipVH__richtext_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);

    return sipVH__richtext_3(sipGILState, 0, sipPySelf, sipMeth, dc, context, index, pt, height, forceLineStart);
}

 ::wxSize sipwxRichTextBuffer::GetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[26]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBestSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetBestSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::GetRangeSize(const  ::wxRichTextRange& range, ::wxSize& size,int& descent, ::wxDC& dc, ::wxRichTextDrawingContext& context,int flags,const  ::wxPoint& position,const  ::wxSize& parentSize, ::wxArrayInt*partialExtents) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[27]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetRangeSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetRangeSize(range,size,descent,dc,context,flags,position,parentSize,partialExtents);

    extern bool sipVH__richtext_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*);

    return sipVH__richtext_5(sipGILState, 0, sipPySelf, sipMeth, range, size, descent, dc, context, flags, position, parentSize, partialExtents);
}

 ::wxRichTextObject* sipwxRichTextBuffer::DoSplit(long pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[28], &sipPySelf, SIP_NULLPTR, sipName_DoSplit);

    if (!sipMeth)
        return  ::wxRichTextBuffer::DoSplit(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

void sipwxRichTextBuffer::CalculateRange(long start,long& end)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[29], &sipPySelf, SIP_NULLPTR, sipName_CalculateRange);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::CalculateRange(start,end);
        return;
    }

    extern void sipVH__richtext_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long&);

    sipVH__richtext_7(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

bool sipwxRichTextBuffer::DeleteRange(const  ::wxRichTextRange& range)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[30], &sipPySelf, SIP_NULLPTR, sipName_DeleteRange);

    if (!sipMeth)
        return  ::wxRichTextBuffer::DeleteRange(range);

    extern bool sipVH__richtext_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_8(sipGILState, 0, sipPySelf, sipMeth, range);
}

bool sipwxRichTextBuffer::IsEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[31]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsEmpty);

    if (!sipMeth)
        return  ::wxRichTextBuffer::IsEmpty();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::IsFloatable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[32]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsFloatable);

    if (!sipMeth)
        return  ::wxRichTextBuffer::IsFloatable();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::IsFloating() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[33]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsFloating);

    if (!sipMeth)
        return  ::wxRichTextBuffer::IsFloating();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextBuffer::GetFloatDirection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[34]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetFloatDirection);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetFloatDirection();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextBuffer::GetTextForRange(const  ::wxRichTextRange& range) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[35]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetTextForRange);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetTextForRange(range);

    extern  ::wxString sipVH__richtext_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_11(sipGILState, 0, sipPySelf, sipMeth, range);
}

bool sipwxRichTextBuffer::CanMerge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[36]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanMerge);

    if (!sipMeth)
        return  ::wxRichTextBuffer::CanMerge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextBuffer::Merge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[37], &sipPySelf, SIP_NULLPTR, sipName_Merge);

    if (!sipMeth)
        return  ::wxRichTextBuffer::Merge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextBuffer::CanSplit( ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[38]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanSplit);

    if (!sipMeth)
        return  ::wxRichTextBuffer::CanSplit(context);

    extern bool sipVH__richtext_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_13(sipGILState, 0, sipPySelf, sipMeth, context);
}

 ::wxRichTextObject* sipwxRichTextBuffer::Split( ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[39], &sipPySelf, SIP_NULLPTR, sipName_Split);

    if (!sipMeth)
        return  ::wxRichTextBuffer::Split(context);

    extern  ::wxRichTextObject* sipVH__richtext_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_14(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextBuffer::CanEditProperties() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[40]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_CanEditProperties);

    if (!sipMeth)
        return  ::wxRichTextBuffer::CanEditProperties();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::EditProperties( ::wxWindow*parent, ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[41], &sipPySelf, SIP_NULLPTR, sipName_EditProperties);

    if (!sipMeth)
        return  ::wxRichTextBuffer::EditProperties(parent,buffer);

    extern bool sipVH__richtext_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRichTextBuffer*);

    return sipVH__richtext_15(sipGILState, 0, sipPySelf, sipMeth, parent, buffer);
}

 ::wxString sipwxRichTextBuffer::GetPropertiesMenuLabel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[42]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetPropertiesMenuLabel);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetPropertiesMenuLabel();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[43]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRichTextBuffer::AcceptsFocus();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::ImportFromXML( ::wxRichTextBuffer*buffer, ::wxXmlNode*node, ::wxRichTextXMLHandler*handler,bool*recurse)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[44], &sipPySelf, SIP_NULLPTR, sipName_ImportFromXML);

    if (!sipMeth)
        return  ::wxRichTextBuffer::ImportFromXML(buffer,node,handler,recurse);

    extern bool sipVH__richtext_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);

    return sipVH__richtext_17(sipGILState, 0, sipPySelf, sipMeth, buffer, node, handler, recurse);
}

bool sipwxRichTextBuffer::UsesParagraphAttributes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[45]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_UsesParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextBuffer::UsesParagraphAttributes();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextBuffer::GetXMLNodeName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[46]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetXMLNodeName);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetXMLNodeName();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::Invalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[47], &sipPySelf, SIP_NULLPTR, sipName_Invalidate);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::Invalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

bool sipwxRichTextBuffer::HandlesChildSelections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[48]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_HandlesChildSelections);

    if (!sipMeth)
        return  ::wxRichTextBuffer::HandlesChildSelections();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextSelection sipwxRichTextBuffer::GetSelection(long start,long end) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[49]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetSelection);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetSelection(start,end);

    extern  ::wxRichTextSelection sipVH__richtext_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_19(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

 ::wxSize sipwxRichTextBuffer::GetCachedSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[50]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetCachedSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetCachedSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetCachedSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[51], &sipPySelf, SIP_NULLPTR, sipName_SetCachedSize);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetCachedSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextBuffer::GetMaxSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[52]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetMaxSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetMaxSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetMaxSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[53], &sipPySelf, SIP_NULLPTR, sipName_SetMaxSize);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetMaxSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextBuffer::GetMinSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[54]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetMinSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetMinSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetMinSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[55], &sipPySelf, SIP_NULLPTR, sipName_SetMinSize);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetMinSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxTextAttrSize sipwxRichTextBuffer::GetNaturalSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[56]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetNaturalSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetNaturalSize();

    extern  ::wxTextAttrSize sipVH__richtext_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_21(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxRichTextBuffer::GetPosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[57]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetPosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetPosition(const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[58], &sipPySelf, SIP_NULLPTR, sipName_SetPosition);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetPosition(pos);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxPoint sipwxRichTextBuffer::GetAbsolutePosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[59]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetAbsolutePosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetAbsolutePosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextBuffer::GetRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[60]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetRect);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetRect();

    extern  ::wxRect sipVH__richtext_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_24(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::IsComposite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[61]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsComposite);

    if (!sipMeth)
        return  ::wxRichTextBuffer::IsComposite();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::IsAtomic() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[62]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsAtomic);

    if (!sipMeth)
        return  ::wxRichTextBuffer::IsAtomic();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextObject* sipwxRichTextBuffer::GetParent() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[63]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParent);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParent();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetParent( ::wxRichTextObject*parent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[64], &sipPySelf, SIP_NULLPTR, sipName_SetParent);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetParent(parent);
        return;
    }

    extern void sipVH__richtext_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    sipVH__richtext_26(sipGILState, 0, sipPySelf, sipMeth, parent);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextBuffer::GetContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[65]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetContainer);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextBuffer::GetParentContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[66]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParentContainer);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParentContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetMargins(int margin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[67], &sipPySelf, SIP_NULLPTR, sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetMargins(margin);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, margin);
}

void sipwxRichTextBuffer::SetMargins(int leftMargin,int rightMargin,int topMargin,int bottomMargin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[68], &sipPySelf, SIP_NULLPTR, sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetMargins(leftMargin,rightMargin,topMargin,bottomMargin);
        return;
    }

    extern void sipVH__richtext_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__richtext_29(sipGILState, 0, sipPySelf, sipMeth, leftMargin, rightMargin, topMargin, bottomMargin);
}

int sipwxRichTextBuffer::GetLeftMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[69]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLeftMargin);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLeftMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextBuffer::GetRightMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[70]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetRightMargin);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetRightMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextBuffer::GetTopMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[71]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetTopMargin);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetTopMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextBuffer::GetBottomMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[72]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBottomMargin);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetBottomMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextBuffer::GetAvailableContentArea( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& outerRect) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[73]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetAvailableContentArea);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetAvailableContentArea(dc,context,outerRect);

    extern  ::wxRect sipVH__richtext_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&);

    return sipVH__richtext_30(sipGILState, 0, sipPySelf, sipMeth, dc, context, outerRect);
}

bool sipwxRichTextBuffer::LayoutToBestSize( ::wxDC& dc, ::wxRichTextDrawingContext& context, ::wxRichTextBuffer*buffer,const  ::wxRichTextAttr& parentAttr,const  ::wxRichTextAttr& attr,const  ::wxRect& availableParentSpace,const  ::wxRect& availableContainerSpace,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[74], &sipPySelf, SIP_NULLPTR, sipName_LayoutToBestSize);

    if (!sipMeth)
        return  ::wxRichTextBuffer::LayoutToBestSize(dc,context,buffer,parentAttr,attr,availableParentSpace,availableContainerSpace,style);

    extern bool sipVH__richtext_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_31(sipGILState, 0, sipPySelf, sipMeth, dc, context, buffer, parentAttr, attr, availableParentSpace, availableContainerSpace, style);
}

bool sipwxRichTextBuffer::AdjustAttributes( ::wxRichTextAttr& attr, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[75], &sipPySelf, SIP_NULLPTR, sipName_AdjustAttributes);

    if (!sipMeth)
        return  ::wxRichTextBuffer::AdjustAttributes(attr,context);

    extern bool sipVH__richtext_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAttr&, ::wxRichTextDrawingContext&);

    return sipVH__richtext_32(sipGILState, 0, sipPySelf, sipMeth, attr, context);
}

bool sipwxRichTextBuffer::IsTopLevel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[76]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxRichTextBuffer::IsTopLevel();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::Show(bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[77], &sipPySelf, SIP_NULLPTR, sipName_Show);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::Show(show);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, show);
}

 ::wxRichTextObject* sipwxRichTextBuffer::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[78]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_Clone);

    if (!sipMeth)
        return  ::wxRichTextBuffer::Clone();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::Move(const  ::wxPoint& pt)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[79], &sipPySelf, SIP_NULLPTR, sipName_Move);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::Move(pt);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pt);
}

bool sipwxRichTextBuffer::SetListStyle(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[80], &sipPySelf, SIP_NULLPTR, sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SetListStyle(range,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, styleDef, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextBuffer::SetListStyle(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[81], &sipPySelf, SIP_NULLPTR, sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SetListStyle(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextBuffer::NumberList(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[82], &sipPySelf, SIP_NULLPTR, sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextBuffer::NumberList(range,def,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, def, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextBuffer::NumberList(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[83], &sipPySelf, SIP_NULLPTR, sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextBuffer::NumberList(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextBuffer::PromoteList(int promoteBy,const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[84], &sipPySelf, SIP_NULLPTR, sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextBuffer::PromoteList(promoteBy,range,def,flags,specifiedLevel);

    extern bool sipVH__richtext_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int);

    return sipVH__richtext_37(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, def, flags, specifiedLevel);
}

bool sipwxRichTextBuffer::PromoteList(int promoteBy,const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[85], &sipPySelf, SIP_NULLPTR, sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextBuffer::PromoteList(promoteBy,range,defName,flags,specifiedLevel);

    extern bool sipVH__richtext_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&,const  ::wxString&,int,int);

    return sipVH__richtext_38(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, defName, flags, specifiedLevel);
}

 ::wxRichTextStyleSheet* sipwxRichTextBuffer::GetStyleSheet() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[86]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetStyleSheet();

    extern  ::wxRichTextStyleSheet* sipVH__richtext_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_39(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[87], &sipPySelf, SIP_NULLPTR, sipName_Clear);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::Clear();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[88], &sipPySelf, SIP_NULLPTR, sipName_Reset);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::Reset();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextRange sipwxRichTextBuffer::AddParagraph(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[89], &sipPySelf, SIP_NULLPTR, sipName_AddParagraph);

    if (!sipMeth)
        return  ::wxRichTextBuffer::AddParagraph(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

 ::wxRichTextRange sipwxRichTextBuffer::AddImage(const  ::wxImage& image, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[90], &sipPySelf, SIP_NULLPTR, sipName_AddImage);

    if (!sipMeth)
        return  ::wxRichTextBuffer::AddImage(image,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxImage&, ::wxRichTextAttr*);

    return sipVH__richtext_42(sipGILState, 0, sipPySelf, sipMeth, image, paraStyle);
}

 ::wxRichTextRange sipwxRichTextBuffer::AddParagraphs(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[91], &sipPySelf, SIP_NULLPTR, sipName_AddParagraphs);

    if (!sipMeth)
        return  ::wxRichTextBuffer::AddParagraphs(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

 ::wxRichTextLine* sipwxRichTextBuffer::GetLineAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[92]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineAtPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLineAtPosition(pos,caretPosition);

    extern  ::wxRichTextLine* sipVH__richtext_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_43(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextLine* sipwxRichTextBuffer::GetLineAtYPosition(int y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[93]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineAtYPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLineAtYPosition(y);

    extern  ::wxRichTextLine* sipVH__richtext_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__richtext_44(sipGILState, 0, sipPySelf, sipMeth, y);
}

 ::wxRichTextParagraph* sipwxRichTextBuffer::GetParagraphAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[94]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphAtPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParagraphAtPosition(pos,caretPosition);

    extern  ::wxRichTextParagraph* sipVH__richtext_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_45(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxSize sipwxRichTextBuffer::GetLineSizeAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[95]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineSizeAtPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLineSizeAtPosition(pos,caretPosition);

    extern  ::wxSize sipVH__richtext_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_46(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

long sipwxRichTextBuffer::GetVisibleLineNumber(long pos,bool caretPosition,bool startOfLine) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[96]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetVisibleLineNumber(pos,caretPosition,startOfLine);

    extern long sipVH__richtext_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool,bool);

    return sipVH__richtext_47(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition, startOfLine);
}

 ::wxRichTextLine* sipwxRichTextBuffer::GetLineForVisibleLineNumber(long lineNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[97]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineForVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLineForVisibleLineNumber(lineNumber);

    extern  ::wxRichTextLine* sipVH__richtext_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_48(sipGILState, 0, sipPySelf, sipMeth, lineNumber);
}

 ::wxRichTextObject* sipwxRichTextBuffer::GetLeafObjectAtPosition(long position) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[98]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLeafObjectAtPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLeafObjectAtPosition(position);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, position);
}

 ::wxRichTextParagraph* sipwxRichTextBuffer::GetParagraphAtLine(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[99]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphAtLine);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParagraphAtLine(paragraphNumber);

    extern  ::wxRichTextParagraph* sipVH__richtext_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_49(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

 ::wxRichTextParagraph* sipwxRichTextBuffer::GetParagraphForLine( ::wxRichTextLine*line) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[100]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphForLine);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParagraphForLine(line);

    extern  ::wxRichTextParagraph* sipVH__richtext_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextLine*);

    return sipVH__richtext_50(sipGILState, 0, sipPySelf, sipMeth, line);
}

int sipwxRichTextBuffer::GetParagraphLength(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[101]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphLength);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParagraphLength(paragraphNumber);

    extern int sipVH__richtext_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_51(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

int sipwxRichTextBuffer::GetParagraphCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[102]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphCount);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParagraphCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextBuffer::GetLineCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[103]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetLineCount);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetLineCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextBuffer::GetParagraphText(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[104]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetParagraphText);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetParagraphText(paragraphNumber);

    extern  ::wxString sipVH__richtext_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_52(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

long sipwxRichTextBuffer::XYToPosition(long x,long y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[105]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_XYToPosition);

    if (!sipMeth)
        return  ::wxRichTextBuffer::XYToPosition(x,y);

    extern long sipVH__richtext_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_53(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

bool sipwxRichTextBuffer::PositionToXY(long pos,long*x,long*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[106]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_PositionToXY);

    if (!sipMeth)
        return  ::wxRichTextBuffer::PositionToXY(pos,x,y);

    extern bool sipVH__richtext_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long*,long*);

    return sipVH__richtext_54(sipGILState, 0, sipPySelf, sipMeth, pos, x, y);
}

bool sipwxRichTextBuffer::SetStyle(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[107], &sipPySelf, SIP_NULLPTR, sipName_SetStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SetStyle(range,style,flags);

    extern bool sipVH__richtext_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int);

    return sipVH__richtext_55(sipGILState, 0, sipPySelf, sipMeth, range, style, flags);
}

void sipwxRichTextBuffer::SetStyle( ::wxRichTextObject*obj,const  ::wxRichTextAttr& textAttr,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[108], &sipPySelf, SIP_NULLPTR, sipName_SetStyle);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetStyle(obj,textAttr,flags);
        return;
    }

    extern void sipVH__richtext_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*,const  ::wxRichTextAttr&,int);

    sipVH__richtext_56(sipGILState, 0, sipPySelf, sipMeth, obj, textAttr, flags);
}

bool sipwxRichTextBuffer::GetStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[109], &sipPySelf, SIP_NULLPTR, sipName_GetStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

bool sipwxRichTextBuffer::GetUncombinedStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[110], &sipPySelf, SIP_NULLPTR, sipName_GetUncombinedStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetUncombinedStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

bool sipwxRichTextBuffer::DoGetStyle(long position, ::wxRichTextAttr& style,bool combineStyles)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[111], &sipPySelf, SIP_NULLPTR, sipName_DoGetStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::DoGetStyle(position,style,combineStyles);

    extern bool sipVH__richtext_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&,bool);

    return sipVH__richtext_58(sipGILState, 0, sipPySelf, sipMeth, position, style, combineStyles);
}

bool sipwxRichTextBuffer::GetStyleForRange(const  ::wxRichTextRange& range, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[112], &sipPySelf, SIP_NULLPTR, sipName_GetStyleForRange);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetStyleForRange(range,style);

    extern bool sipVH__richtext_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextAttr&);

    return sipVH__richtext_59(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextBuffer::ClearListStyle(const  ::wxRichTextRange& range,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[113], &sipPySelf, SIP_NULLPTR, sipName_ClearListStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::ClearListStyle(range,flags);

    extern bool sipVH__richtext_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,int);

    return sipVH__richtext_60(sipGILState, 0, sipPySelf, sipMeth, range, flags);
}

bool sipwxRichTextBuffer::DoNumberList(const  ::wxRichTextRange& range,const  ::wxRichTextRange& promotionRange,int promoteBy, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[114], &sipPySelf, SIP_NULLPTR, sipName_DoNumberList);

    if (!sipMeth)
        return  ::wxRichTextBuffer::DoNumberList(range,promotionRange,promoteBy,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_61(sipGILState, 0, sipPySelf, sipMeth, range, promotionRange, promoteBy, styleDef, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextBuffer::FindNextParagraphNumber( ::wxRichTextParagraph*previousParagraph, ::wxRichTextAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[115]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_FindNextParagraphNumber);

    if (!sipMeth)
        return  ::wxRichTextBuffer::FindNextParagraphNumber(previousParagraph,attr);

    extern bool sipVH__richtext_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraph*, ::wxRichTextAttr&);

    return sipVH__richtext_62(sipGILState, 0, sipPySelf, sipMeth, previousParagraph, attr);
}

bool sipwxRichTextBuffer::SetProperties(const  ::wxRichTextRange& range,const  ::wxRichTextProperties& properties,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[116], &sipPySelf, SIP_NULLPTR, sipName_SetProperties);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SetProperties(range,properties,flags);

    extern bool sipVH__richtext_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int);

    return sipVH__richtext_63(sipGILState, 0, sipPySelf, sipMeth, range, properties, flags);
}

bool sipwxRichTextBuffer::SetObjectPropertiesWithUndo( ::wxRichTextObject& obj,const  ::wxRichTextProperties& properties, ::wxRichTextObject*objToSet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[117], &sipPySelf, SIP_NULLPTR, sipName_SetObjectPropertiesWithUndo);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SetObjectPropertiesWithUndo(obj,properties,objToSet);

    extern bool sipVH__richtext_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*);

    return sipVH__richtext_64(sipGILState, 0, sipPySelf, sipMeth, obj, properties, objToSet);
}

bool sipwxRichTextBuffer::HasCharacterAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[118]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_HasCharacterAttributes);

    if (!sipMeth)
        return  ::wxRichTextBuffer::HasCharacterAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextBuffer::HasParagraphAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[119]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_HasParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextBuffer::HasParagraphAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

void sipwxRichTextBuffer::PrepareContent( ::wxRichTextParagraphLayoutBox& container)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[120], &sipPySelf, SIP_NULLPTR, sipName_PrepareContent);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::PrepareContent(container);
        return;
    }

    extern void sipVH__richtext_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraphLayoutBox&);

    sipVH__richtext_66(sipGILState, 0, sipPySelf, sipMeth, container);
}

bool sipwxRichTextBuffer::InsertFragment(long position, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[121], &sipPySelf, SIP_NULLPTR, sipName_InsertFragment);

    if (!sipMeth)
        return  ::wxRichTextBuffer::InsertFragment(position,fragment);

    extern bool sipVH__richtext_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_67(sipGILState, 0, sipPySelf, sipMeth, position, fragment);
}

bool sipwxRichTextBuffer::CopyFragment(const  ::wxRichTextRange& range, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[122], &sipPySelf, SIP_NULLPTR, sipName_CopyFragment);

    if (!sipMeth)
        return  ::wxRichTextBuffer::CopyFragment(range,fragment);

    extern bool sipVH__richtext_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_68(sipGILState, 0, sipPySelf, sipMeth, range, fragment);
}

bool sipwxRichTextBuffer::ApplyStyleSheet( ::wxRichTextStyleSheet*styleSheet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[123], &sipPySelf, SIP_NULLPTR, sipName_ApplyStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextBuffer::ApplyStyleSheet(styleSheet);

    extern bool sipVH__richtext_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextStyleSheet*);

    return sipVH__richtext_69(sipGILState, 0, sipPySelf, sipMeth, styleSheet);
}

void sipwxRichTextBuffer::UpdateRanges()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[124], &sipPySelf, SIP_NULLPTR, sipName_UpdateRanges);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::UpdateRanges();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextBuffer::GetText() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[125]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetText);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetText();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextBuffer::SetDefaultStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[126], &sipPySelf, SIP_NULLPTR, sipName_SetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::SetDefaultStyle(style);

    extern bool sipVH__richtext_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    return sipVH__richtext_70(sipGILState, 0, sipPySelf, sipMeth, style);
}

const  ::wxRichTextAttr& sipwxRichTextBuffer::GetDefaultStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[127]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetDefaultStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::SetBasicStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[128], &sipPySelf, SIP_NULLPTR, sipName_SetBasicStyle);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::SetBasicStyle(style);
        return;
    }

    extern void sipVH__richtext_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    sipVH__richtext_72(sipGILState, 0, sipPySelf, sipMeth, style);
}

const  ::wxRichTextAttr& sipwxRichTextBuffer::GetBasicStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, const_cast<char *>(&sipPyMethods[129]), const_cast<sipSimpleWrapper **>(&sipPySelf), SIP_NULLPTR, sipName_GetBasicStyle);

    if (!sipMeth)
        return  ::wxRichTextBuffer::GetBasicStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextBuffer::DoInvalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[130], &sipPySelf, SIP_NULLPTR, sipName_DoInvalidate);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::DoInvalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

void sipwxRichTextBuffer::InvalidateHierarchy(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[131], &sipPySelf, SIP_NULLPTR, sipName_InvalidateHierarchy);

    if (!sipMeth)
    {
         ::wxRichTextBuffer::InvalidateHierarchy(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

bool sipwxRichTextBuffer::UpdateFloatingObjects(const  ::wxRect& availableRect, ::wxRichTextObject*untilObj)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState, &sipPyMethods[132], &sipPySelf, SIP_NULLPTR, sipName_UpdateFloatingObjects);

    if (!sipMeth)
        return  ::wxRichTextBuffer::UpdateFloatingObjects(availableRect,untilObj);

    extern bool sipVH__richtext_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&, ::wxRichTextObject*);

    return sipVH__richtext_73(sipGILState, 0, sipPySelf, sipMeth, availableRect, untilObj);
}


PyDoc_STRVAR(doc_wxRichTextBuffer_LoadFile, "LoadFile(filename, type=RICHTEXT_TYPE_ANY) -> bool\n"
"LoadFile(stream, type=RICHTEXT_TYPE_ANY) -> bool\n"
"\n"
"Loads content from a stream or file.\n"
"");

extern "C" {static PyObject *meth_wxRichTextBuffer_LoadFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_LoadFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* filename;
        int filenameState = 0;
         ::wxRichTextFileType type = wxRICHTEXT_TYPE_ANY;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filename,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &filename, &filenameState, sipType_wxRichTextFileType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::LoadFile(*filename,type) : sipCpp->LoadFile(*filename,type));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(filename), sipType_wxString, filenameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxInputStream* stream;
        int streamState = 0;
         ::wxRichTextFileType type = wxRICHTEXT_TYPE_ANY;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stream,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxInputStream, &stream, &streamState, sipType_wxRichTextFileType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::LoadFile(*stream,type) : sipCpp->LoadFile(*stream,type));
            Py_END_ALLOW_THREADS
            sipReleaseType(stream, sipType_wxInputStream, streamState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_LoadFile, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SaveFile, "SaveFile(filename, type=RICHTEXT_TYPE_ANY) -> bool\n"
"SaveFile(stream, type=RICHTEXT_TYPE_ANY) -> bool\n"
"\n"
"Saves content to a stream or file.\n"
"");

extern "C" {static PyObject *meth_wxRichTextBuffer_SaveFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SaveFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* filename;
        int filenameState = 0;
         ::wxRichTextFileType type = wxRICHTEXT_TYPE_ANY;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filename,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &filename, &filenameState, sipType_wxRichTextFileType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::SaveFile(*filename,type) : sipCpp->SaveFile(*filename,type));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(filename), sipType_wxString, filenameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxOutputStream* stream;
        int streamState = 0;
         ::wxRichTextFileType type = wxRICHTEXT_TYPE_ANY;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stream,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|E", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxOutputStream, &stream, &streamState, sipType_wxRichTextFileType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::SaveFile(*stream,type) : sipCpp->SaveFile(*stream,type));
            Py_END_ALLOW_THREADS
            sipReleaseType(stream, sipType_wxOutputStream, streamState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SaveFile, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetCommandProcessor, "GetCommandProcessor() -> wx.CommandProcessor\n"
"\n"
"Returns the command processor.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetCommandProcessor(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetCommandProcessor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
             ::wxCommandProcessor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCommandProcessor();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxCommandProcessor,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetCommandProcessor, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetStyleSheet, "SetStyleSheet(styleSheet)\n"
"\n"
"Sets style sheet, if any.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetStyleSheet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetStyleSheet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextStyleSheet* styleSheet;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_styleSheet,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextStyleSheet, &styleSheet))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetStyleSheet(styleSheet);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetStyleSheet, "GetStyleSheet() -> RichTextStyleSheet\n"
"\n"
"Returns the style sheet.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
             ::wxRichTextStyleSheet*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::GetStyleSheet() : sipCpp->GetStyleSheet());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextStyleSheet,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetStyleSheetAndNotify, "SetStyleSheetAndNotify(sheet) -> bool\n"
"\n"
"Sets the style sheet and sends a notification of the change.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetStyleSheetAndNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetStyleSheetAndNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextStyleSheet* sheet;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sheet,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextStyleSheet, &sheet))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetStyleSheetAndNotify(sheet);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetStyleSheetAndNotify, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_PushStyleSheet, "PushStyleSheet(styleSheet) -> bool\n"
"\n"
"Pushes the style sheet to the top of the style sheet stack.");

extern "C" {static PyObject *meth_wxRichTextBuffer_PushStyleSheet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_PushStyleSheet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextStyleSheet* styleSheet;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_styleSheet,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextStyleSheet, &styleSheet))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PushStyleSheet(styleSheet);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_PushStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_PopStyleSheet, "PopStyleSheet() -> RichTextStyleSheet\n"
"\n"
"Pops the style sheet from the top of the style sheet stack.");

extern "C" {static PyObject *meth_wxRichTextBuffer_PopStyleSheet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_PopStyleSheet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
             ::wxRichTextStyleSheet*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PopStyleSheet();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextStyleSheet,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_PopStyleSheet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetFontTable, "GetFontTable() -> RichTextFontTable\n"
"\n"
"Returns the table storing fonts, for quick access and font reuse.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetFontTable(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetFontTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
             ::wxRichTextFontTable*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetFontTable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFontTable,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetFontTable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetFontTable, "SetFontTable(table)\n"
"\n"
"Sets table storing fonts, for quick access and font reuse.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetFontTable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetFontTable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextFontTable* table;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_table,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextFontTable, &table))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFontTable(*table);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetFontTable, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetFontScale, "SetFontScale(fontScale)\n"
"\n"
"Sets the scale factor for displaying fonts, for example for more\n"
"comfortable editing.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetFontScale(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetFontScale(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double fontScale;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fontScale,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &fontScale))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFontScale(fontScale);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetFontScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetFontScale, "GetFontScale() -> double\n"
"\n"
"Returns the scale factor for displaying fonts, for example for more\n"
"comfortable editing.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetFontScale(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetFontScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFontScale();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetFontScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetDimensionScale, "SetDimensionScale(dimScale)\n"
"\n"
"Sets the scale factor for displaying certain dimensions such as\n"
"indentation and inter-paragraph spacing.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetDimensionScale(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetDimensionScale(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double dimScale;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dimScale,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &dimScale))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDimensionScale(dimScale);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetDimensionScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetDimensionScale, "GetDimensionScale() -> double\n"
"\n"
"Returns the scale factor for displaying certain dimensions such as\n"
"indentation and inter-paragraph spacing.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetDimensionScale(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetDimensionScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDimensionScale();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetDimensionScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_Init, "Init()\n"
"\n"
"Initialisation.");

extern "C" {static PyObject *meth_wxRichTextBuffer_Init(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_Init(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Init();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_Init, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_ResetAndClearCommands, "ResetAndClearCommands()\n"
"\n"
"Clears the buffer, adds an empty paragraph, and clears the command\n"
"processor.");

extern "C" {static PyObject *meth_wxRichTextBuffer_ResetAndClearCommands(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_ResetAndClearCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::ResetAndClearCommands() : sipCpp->ResetAndClearCommands());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_ResetAndClearCommands, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetHandlerFlags, "SetHandlerFlags(flags)\n"
"\n"
"Sets the handler flags, controlling loading and saving.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetHandlerFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetHandlerFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int flags;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHandlerFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetHandlerFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetHandlerFlags, "GetHandlerFlags() -> int\n"
"\n"
"Gets the handler flags, controlling loading and saving.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetHandlerFlags(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetHandlerFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHandlerFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetHandlerFlags, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_AddParagraph, "AddParagraph(text, paraStyle=None) -> RichTextRange\n"
"\n"
"Convenience function to add a paragraph of text.");

extern "C" {static PyObject *meth_wxRichTextBuffer_AddParagraph(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_AddParagraph(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextAttr* paraStyle = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_paraStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &text, &textState, sipType_wxRichTextAttr, &paraStyle))
        {
             ::wxRichTextRange*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextRange((sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::AddParagraph(*text,paraStyle) : sipCpp->AddParagraph(*text,paraStyle)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextRange,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_AddParagraph, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginBatchUndo, "BeginBatchUndo(cmdName) -> bool\n"
"\n"
"Begin collapsing undo/redo commands.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginBatchUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginBatchUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* cmdName;
        int cmdNameState = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cmdName,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &cmdName, &cmdNameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::BeginBatchUndo(*cmdName) : sipCpp->BeginBatchUndo(*cmdName));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(cmdName), sipType_wxString, cmdNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginBatchUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndBatchUndo, "EndBatchUndo() -> bool\n"
"\n"
"End collapsing undo/redo commands.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndBatchUndo(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndBatchUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::EndBatchUndo() : sipCpp->EndBatchUndo());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndBatchUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BatchingUndo, "BatchingUndo() -> bool\n"
"\n"
"Returns true if we are collapsing commands.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BatchingUndo(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BatchingUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::BatchingUndo() : sipCpp->BatchingUndo());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BatchingUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SubmitAction, "SubmitAction(action) -> bool\n"
"\n"
"Submit the action immediately, or delay according to whether\n"
"collapsing is on.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SubmitAction(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SubmitAction(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextAction* action;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_action,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextAction, &action))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::SubmitAction(action) : sipCpp->SubmitAction(action));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SubmitAction, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetBatchedCommand, "GetBatchedCommand() -> RichTextCommand\n"
"\n"
"Returns the collapsed command.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetBatchedCommand(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetBatchedCommand(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
             ::wxRichTextCommand*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::GetBatchedCommand() : sipCpp->GetBatchedCommand());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextCommand,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetBatchedCommand, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginSuppressUndo, "BeginSuppressUndo() -> bool\n"
"\n"
"Begin suppressing undo/redo commands.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginSuppressUndo(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginSuppressUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::BeginSuppressUndo() : sipCpp->BeginSuppressUndo());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginSuppressUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndSuppressUndo, "EndSuppressUndo() -> bool\n"
"\n"
"End suppressing undo/redo commands.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndSuppressUndo(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndSuppressUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::EndSuppressUndo() : sipCpp->EndSuppressUndo());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndSuppressUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SuppressingUndo, "SuppressingUndo() -> bool\n"
"\n"
"Are we suppressing undo??");

extern "C" {static PyObject *meth_wxRichTextBuffer_SuppressingUndo(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SuppressingUndo(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::SuppressingUndo() : sipCpp->SuppressingUndo());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SuppressingUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_CopyToClipboard, "CopyToClipboard(range) -> bool\n"
"\n"
"Copy the range to the clipboard.");

extern "C" {static PyObject *meth_wxRichTextBuffer_CopyToClipboard(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_CopyToClipboard(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextRange, &range, &rangeState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::CopyToClipboard(*range) : sipCpp->CopyToClipboard(*range));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_CopyToClipboard, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_PasteFromClipboard, "PasteFromClipboard(position) -> bool\n"
"\n"
"Paste the clipboard content to the buffer.");

extern "C" {static PyObject *meth_wxRichTextBuffer_PasteFromClipboard(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_PasteFromClipboard(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long position;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_position,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bl", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &position))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::PasteFromClipboard(position) : sipCpp->PasteFromClipboard(position));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_PasteFromClipboard, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_CanPasteFromClipboard, "CanPasteFromClipboard() -> bool\n"
"\n"
"Returns true if we can paste from the clipboard.");

extern "C" {static PyObject *meth_wxRichTextBuffer_CanPasteFromClipboard(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_CanPasteFromClipboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::CanPasteFromClipboard() : sipCpp->CanPasteFromClipboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_CanPasteFromClipboard, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginStyle, "BeginStyle(style) -> bool\n"
"\n"
"Begin using a style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextAttr* style;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextAttr, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::BeginStyle(*style) : sipCpp->BeginStyle(*style));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndStyle, "EndStyle() -> bool\n"
"\n"
"End the style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::EndStyle() : sipCpp->EndStyle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndAllStyles, "EndAllStyles() -> bool\n"
"\n"
"End all styles.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndAllStyles(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndAllStyles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::EndAllStyles() : sipCpp->EndAllStyles());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndAllStyles, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_ClearStyleStack, "ClearStyleStack()\n"
"\n"
"Clears the style stack.");

extern "C" {static PyObject *meth_wxRichTextBuffer_ClearStyleStack(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_ClearStyleStack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::ClearStyleStack() : sipCpp->ClearStyleStack());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_ClearStyleStack, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetStyleStackSize, "GetStyleStackSize() -> size_t\n"
"\n"
"Returns the size of the style stack, for example to check correct\n"
"nesting.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetStyleStackSize(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetStyleStackSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            size_t sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::GetStyleStackSize() : sipCpp->GetStyleStackSize());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetStyleStackSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginBold, "BeginBold() -> bool\n"
"\n"
"Begins using bold.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginBold(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginBold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginBold();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginBold, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndBold, "EndBold() -> bool\n"
"\n"
"Ends using bold.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndBold(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndBold(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndBold();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndBold, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginItalic, "BeginItalic() -> bool\n"
"\n"
"Begins using italic.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginItalic(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginItalic();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginItalic, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndItalic, "EndItalic() -> bool\n"
"\n"
"Ends using italic.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndItalic(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndItalic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndItalic();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndItalic, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginUnderline, "BeginUnderline() -> bool\n"
"\n"
"Begins using underline.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginUnderline(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginUnderline();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginUnderline, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndUnderline, "EndUnderline() -> bool\n"
"\n"
"Ends using underline.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndUnderline(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndUnderline(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndUnderline();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndUnderline, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginFontSize, "BeginFontSize(pointSize) -> bool\n"
"\n"
"Begins using point size.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginFontSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginFontSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int pointSize;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pointSize,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &pointSize))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginFontSize(pointSize);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginFontSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndFontSize, "EndFontSize() -> bool\n"
"\n"
"Ends using point size.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndFontSize(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndFontSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndFontSize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndFontSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginFont, "BeginFont(font) -> bool\n"
"\n"
"Begins using this font.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxFont* font;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxFont, &font))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndFont, "EndFont() -> bool\n"
"\n"
"Ends using a font.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndFont(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndFont();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndFont, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginTextColour, "BeginTextColour(colour) -> bool\n"
"\n"
"Begins using this colour.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginTextColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginTextColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginTextColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour), sipType_wxColour, colourState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndTextColour, "EndTextColour() -> bool\n"
"\n"
"Ends using a colour.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndTextColour(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndTextColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndTextColour();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndTextColour, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginAlignment, "BeginAlignment(alignment) -> bool\n"
"\n"
"Begins using alignment.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginAlignment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginAlignment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxTextAttrAlignment alignment;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_alignment,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BE", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxTextAttrAlignment, &alignment))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginAlignment(alignment);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginAlignment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndAlignment, "EndAlignment() -> bool\n"
"\n"
"Ends alignment.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndAlignment(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndAlignment();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndAlignment, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginLeftIndent, "BeginLeftIndent(leftIndent, leftSubIndent=0) -> bool\n"
"\n"
"Begins using leftIndent for the left indent, and optionally\n"
"leftSubIndent for the sub-indent.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginLeftIndent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginLeftIndent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int leftIndent;
        int leftSubIndent = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_leftIndent,
            sipName_leftSubIndent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &leftIndent, &leftSubIndent))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginLeftIndent(leftIndent,leftSubIndent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginLeftIndent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndLeftIndent, "EndLeftIndent() -> bool\n"
"\n"
"Ends left indent.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndLeftIndent(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndLeftIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndLeftIndent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndLeftIndent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginRightIndent, "BeginRightIndent(rightIndent) -> bool\n"
"\n"
"Begins a right indent, specified in tenths of a millimetre.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginRightIndent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginRightIndent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int rightIndent;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rightIndent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &rightIndent))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginRightIndent(rightIndent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginRightIndent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndRightIndent, "EndRightIndent() -> bool\n"
"\n"
"Ends right indent.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndRightIndent(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndRightIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndRightIndent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndRightIndent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginParagraphSpacing, "BeginParagraphSpacing(before, after) -> bool\n"
"\n"
"Begins paragraph spacing; pass the before-paragraph and after-\n"
"paragraph spacing in tenths of a millimetre.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginParagraphSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginParagraphSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int before;
        int after;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_before,
            sipName_after,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &before, &after))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginParagraphSpacing(before,after);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginParagraphSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndParagraphSpacing, "EndParagraphSpacing() -> bool\n"
"\n"
"Ends paragraph spacing.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndParagraphSpacing(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndParagraphSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndParagraphSpacing();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndParagraphSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginLineSpacing, "BeginLineSpacing(lineSpacing) -> bool\n"
"\n"
"Begins line spacing using the specified value.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginLineSpacing(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginLineSpacing(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int lineSpacing;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_lineSpacing,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &lineSpacing))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginLineSpacing(lineSpacing);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginLineSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndLineSpacing, "EndLineSpacing() -> bool\n"
"\n"
"Ends line spacing.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndLineSpacing(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndLineSpacing(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndLineSpacing();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndLineSpacing, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginNumberedBullet, "BeginNumberedBullet(bulletNumber, leftIndent, leftSubIndent, bulletStyle=wx.TEXT_ATTR_BULLET_STYLE_ARABIC|wx.TEXT_ATTR_BULLET_STYLE_PERIOD) -> bool\n"
"\n"
"Begins numbered bullet.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginNumberedBullet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginNumberedBullet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int bulletNumber;
        int leftIndent;
        int leftSubIndent;
        int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_ARABIC|wxTEXT_ATTR_BULLET_STYLE_PERIOD;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bulletNumber,
            sipName_leftIndent,
            sipName_leftSubIndent,
            sipName_bulletStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Biii|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &bulletNumber, &leftIndent, &leftSubIndent, &bulletStyle))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginNumberedBullet(bulletNumber,leftIndent,leftSubIndent,bulletStyle);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginNumberedBullet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndNumberedBullet, "EndNumberedBullet() -> bool\n"
"\n"
"Ends numbered bullet.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndNumberedBullet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndNumberedBullet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndNumberedBullet();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndNumberedBullet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginSymbolBullet, "BeginSymbolBullet(symbol, leftIndent, leftSubIndent, bulletStyle=wx.TEXT_ATTR_BULLET_STYLE_SYMBOL) -> bool\n"
"\n"
"Begins applying a symbol bullet, using a character from the current\n"
"font.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginSymbolBullet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginSymbolBullet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* symbol;
        int symbolState = 0;
        int leftIndent;
        int leftSubIndent;
        int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_SYMBOL;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_symbol,
            sipName_leftIndent,
            sipName_leftSubIndent,
            sipName_bulletStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1ii|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &symbol, &symbolState, &leftIndent, &leftSubIndent, &bulletStyle))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginSymbolBullet(*symbol,leftIndent,leftSubIndent,bulletStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(symbol), sipType_wxString, symbolState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginSymbolBullet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndSymbolBullet, "EndSymbolBullet() -> bool\n"
"\n"
"Ends symbol bullet.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndSymbolBullet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndSymbolBullet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndSymbolBullet();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndSymbolBullet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginStandardBullet, "BeginStandardBullet(bulletName, leftIndent, leftSubIndent, bulletStyle=wx.TEXT_ATTR_BULLET_STYLE_STANDARD) -> bool\n"
"\n"
"Begins applying a standard bullet, using one of the standard bullet\n"
"names (currently standard/circle or standard/square.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginStandardBullet(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginStandardBullet(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* bulletName;
        int bulletNameState = 0;
        int leftIndent;
        int leftSubIndent;
        int bulletStyle = wxTEXT_ATTR_BULLET_STYLE_STANDARD;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bulletName,
            sipName_leftIndent,
            sipName_leftSubIndent,
            sipName_bulletStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1ii|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &bulletName, &bulletNameState, &leftIndent, &leftSubIndent, &bulletStyle))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginStandardBullet(*bulletName,leftIndent,leftSubIndent,bulletStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(bulletName), sipType_wxString, bulletNameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginStandardBullet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndStandardBullet, "EndStandardBullet() -> bool\n"
"\n"
"Ends standard bullet.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndStandardBullet(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndStandardBullet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndStandardBullet();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndStandardBullet, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginCharacterStyle, "BeginCharacterStyle(characterStyle) -> bool\n"
"\n"
"Begins named character style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginCharacterStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginCharacterStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* characterStyle;
        int characterStyleState = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_characterStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &characterStyle, &characterStyleState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginCharacterStyle(*characterStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(characterStyle), sipType_wxString, characterStyleState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginCharacterStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndCharacterStyle, "EndCharacterStyle() -> bool\n"
"\n"
"Ends named character style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndCharacterStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndCharacterStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndCharacterStyle();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndCharacterStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginParagraphStyle, "BeginParagraphStyle(paragraphStyle) -> bool\n"
"\n"
"Begins named paragraph style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginParagraphStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginParagraphStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* paragraphStyle;
        int paragraphStyleState = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_paragraphStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &paragraphStyle, &paragraphStyleState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginParagraphStyle(*paragraphStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(paragraphStyle), sipType_wxString, paragraphStyleState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginParagraphStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndParagraphStyle, "EndParagraphStyle() -> bool\n"
"\n"
"Ends named character style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndParagraphStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndParagraphStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndParagraphStyle();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndParagraphStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginListStyle, "BeginListStyle(listStyle, level=1, number=1) -> bool\n"
"\n"
"Begins named list style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginListStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginListStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* listStyle;
        int listStyleState = 0;
        int level = 1;
        int number = 1;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_listStyle,
            sipName_level,
            sipName_number,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|ii", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &listStyle, &listStyleState, &level, &number))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginListStyle(*listStyle,level,number);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(listStyle), sipType_wxString, listStyleState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginListStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndListStyle, "EndListStyle() -> bool\n"
"\n"
"Ends named character style.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndListStyle(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndListStyle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndListStyle();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndListStyle, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_BeginURL, "BeginURL(url, characterStyle=wx.EmptyString) -> bool\n"
"\n"
"Begins applying wxTEXT_ATTR_URL to the content.");

extern "C" {static PyObject *meth_wxRichTextBuffer_BeginURL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_BeginURL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* url;
        int urlState = 0;
        const  ::wxString& characterStyledef = wxEmptyString;
        const  ::wxString* characterStyle = &characterStyledef;
        int characterStyleState = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_url,
            sipName_characterStyle,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1|J1", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxString, &url, &urlState, sipType_wxString, &characterStyle, &characterStyleState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginURL(*url,*characterStyle);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(url), sipType_wxString, urlState);
            sipReleaseType(const_cast< ::wxString *>(characterStyle), sipType_wxString, characterStyleState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_BeginURL, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_EndURL, "EndURL() -> bool\n"
"\n"
"Ends URL.");

extern "C" {static PyObject *meth_wxRichTextBuffer_EndURL(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_EndURL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndURL();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_EndURL, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_AddEventHandler, "AddEventHandler(handler) -> bool\n"
"\n"
"Adds an event handler.");

extern "C" {static PyObject *meth_wxRichTextBuffer_AddEventHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_AddEventHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxEvtHandler* handler;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxEvtHandler, &handler))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddEventHandler(handler);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_AddEventHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_RemoveEventHandler, "RemoveEventHandler(handler, deleteHandler=False) -> bool\n"
"\n"
"Removes an event handler from the buffer's list of handlers, deleting\n"
"the object if deleteHandler is true.");

extern "C" {static PyObject *meth_wxRichTextBuffer_RemoveEventHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_RemoveEventHandler(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxEvtHandler* handler;
        bool deleteHandler = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_handler,
            sipName_deleteHandler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8|b", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxEvtHandler, &handler, &deleteHandler))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemoveEventHandler(handler,deleteHandler);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_RemoveEventHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_ClearEventHandlers, "ClearEventHandlers()\n"
"\n"
"Clear event handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_ClearEventHandlers(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_ClearEventHandlers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearEventHandlers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_ClearEventHandlers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SendEvent, "SendEvent(event, sendToAll=True) -> bool\n"
"\n"
"Send event to event handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SendEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SendEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxEvent* event;
        bool sendToAll = 1;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
            sipName_sendToAll,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9|b", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxEvent, &event, &sendToAll))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SendEvent(*event,sendToAll);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SendEvent, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_HitTest, "HitTest(dc, context, pt, flags=0) -> (int, textPosition, obj, contextObj)\n"
"\n"
"Hit-testing: returns a flag indicating hit test details, plus\n"
"information about position.");

extern "C" {static PyObject *meth_wxRichTextBuffer_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxPoint* pt;
        int ptState = 0;
        long textPosition;
         ::wxRichTextObject* obj;
         ::wxRichTextObject* contextObj;
        int flags = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_pt,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxPoint, &pt, &ptState, &flags))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags) : sipCpp->HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt), sipType_wxPoint, ptState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ilDD)",sipRes,textPosition,obj,sipType_wxRichTextObject,SIP_NULLPTR,contextObj,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_HitTest, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_Copy, "Copy(obj)\n"
"\n"
"Copies the buffer.");

extern "C" {static PyObject *meth_wxRichTextBuffer_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer* obj;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextBuffer, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_Copy, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_Clone, "Clone() -> RichTextObject\n"
"\n"
"Clones the buffer.");

extern "C" {static PyObject *meth_wxRichTextBuffer_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_Clone, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertParagraphsWithUndo, "InsertParagraphsWithUndo(pos, paragraphs, ctrl, flags=0) -> bool\n"
"\n"
"Submits a command to insert paragraphs.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertParagraphsWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertParagraphsWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
        const  ::wxRichTextParagraphLayoutBox* paragraphs;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_paragraphs,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9J8|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &pos, sipType_wxRichTextParagraphLayoutBox, &paragraphs, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertParagraphsWithUndo(pos,*paragraphs,ctrl,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertParagraphsWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertTextWithUndo, "InsertTextWithUndo(pos, text, ctrl, flags=0) -> bool\n"
"\n"
"Submits a command to insert the given text.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertTextWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertTextWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
        const  ::wxString* text;
        int textState = 0;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_text,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ1J8|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &pos, sipType_wxString, &text, &textState, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertTextWithUndo(pos,*text,ctrl,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text), sipType_wxString, textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertTextWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertNewlineWithUndo, "InsertNewlineWithUndo(pos, ctrl, flags=0) -> bool\n"
"\n"
"Submits a command to insert a newline.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertNewlineWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertNewlineWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ8|i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &pos, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertNewlineWithUndo(pos,ctrl,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertNewlineWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertImageWithUndo, "InsertImageWithUndo(pos, imageBlock, ctrl, flags=0, textAttr=RichTextAttr()) -> bool\n"
"\n"
"Submits a command to insert the given image.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertImageWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertImageWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
        const  ::wxRichTextImageBlock* imageBlock;
         ::wxRichTextCtrl* ctrl;
        int flags = 0;
        const  ::wxRichTextAttr& textAttrdef = wxRichTextAttr();
        const  ::wxRichTextAttr* textAttr = &textAttrdef;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_imageBlock,
            sipName_ctrl,
            sipName_flags,
            sipName_textAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ9J8|iJ9", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &pos, sipType_wxRichTextImageBlock, &imageBlock, sipType_wxRichTextCtrl, &ctrl, &flags, sipType_wxRichTextAttr, &textAttr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertImageWithUndo(pos,*imageBlock,ctrl,flags,*textAttr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertImageWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertObjectWithUndo, "InsertObjectWithUndo(pos, object, ctrl, flags) -> RichTextObject\n"
"\n"
"Submits a command to insert an object.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertObjectWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertObjectWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        long pos;
         ::wxRichTextObject* object;
         ::wxRichTextCtrl* ctrl;
        int flags;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_object,
            sipName_ctrl,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BlJ8J8i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &pos, sipType_wxRichTextObject, &object, sipType_wxRichTextCtrl, &ctrl, &flags))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertObjectWithUndo(pos,object,ctrl,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextObject,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertObjectWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_DeleteRangeWithUndo, "DeleteRangeWithUndo(range, ctrl) -> bool\n"
"\n"
"Submits a command to delete this range.");

extern "C" {static PyObject *meth_wxRichTextBuffer_DeleteRangeWithUndo(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_DeleteRangeWithUndo(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextCtrl* ctrl;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_ctrl,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J8", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextCtrl, &ctrl))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteRangeWithUndo(*range,ctrl);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_DeleteRangeWithUndo, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_Modify, "Modify(modify=True)\n"
"\n"
"Mark modified.");

extern "C" {static PyObject *meth_wxRichTextBuffer_Modify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_Modify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool modify = 1;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_modify,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|b", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &modify))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Modify(modify);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_Modify, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_IsModified, "IsModified() -> bool\n"
"\n"
"Returns true if the buffer was modified.");

extern "C" {static PyObject *meth_wxRichTextBuffer_IsModified(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_IsModified(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsModified();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_IsModified, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetScale, "GetScale() -> double\n"
"\n"
"Returns the scale factor for calculating dimensions.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetScale(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetScale(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxRichTextBuffer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextBuffer, &sipCpp))
        {
            double sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetScale();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetScale, "SetScale(scale)\n"
"\n"
"Sets the scale factor for calculating dimensions.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetScale(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetScale(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        double scale;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_scale,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bd", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, &scale))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetScale(scale);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetScale, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetHandlers, "GetHandlers() -> RichTextFileHandlerList\n"
"\n"
"Returns the file handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetHandlers(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetHandlers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRichTextFileHandlerList*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRichTextBuffer::GetHandlers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFileHandlerList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetHandlers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_AddHandler, "AddHandler(handler)\n"
"\n"
"Adds a file handler to the end.");

extern "C" {static PyObject *meth_wxRichTextBuffer_AddHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_AddHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFileHandler* handler;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:", sipType_wxRichTextFileHandler, &handler))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::AddHandler(handler);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_AddHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertHandler, "InsertHandler(handler)\n"
"\n"
"Inserts a file handler at the front.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFileHandler* handler;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:", sipType_wxRichTextFileHandler, &handler))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::InsertHandler(handler);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_RemoveHandler, "RemoveHandler(name) -> bool\n"
"\n"
"Removes a file handler.");

extern "C" {static PyObject *meth_wxRichTextBuffer_RemoveHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_RemoveHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::RemoveHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_RemoveHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_FindHandlerByType, "FindHandlerByType(imageType) -> RichTextFileHandler\n"
"\n"
"Finds a handler by type.");

extern "C" {static PyObject *meth_wxRichTextBuffer_FindHandlerByType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_FindHandlerByType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFileType imageType;

        static const char *sipKwdList[] = {
            sipName_imageType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "E", sipType_wxRichTextFileType, &imageType))
        {
             ::wxRichTextFileHandler*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::FindHandler(imageType);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFileHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_FindHandlerByType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_FindHandlerByExtension, "FindHandlerByExtension(extension, imageType) -> RichTextFileHandler\n"
"\n"
"Finds a file handler by extension and type.");

extern "C" {static PyObject *meth_wxRichTextBuffer_FindHandlerByExtension(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_FindHandlerByExtension(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* extension;
        int extensionState = 0;
         ::wxRichTextFileType imageType;

        static const char *sipKwdList[] = {
            sipName_extension,
            sipName_imageType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1E", sipType_wxString, &extension, &extensionState, sipType_wxRichTextFileType, &imageType))
        {
             ::wxRichTextFileHandler*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::FindHandler(*extension,imageType);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(extension), sipType_wxString, extensionState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFileHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_FindHandlerByExtension, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_FindHandlerByName, "FindHandlerByName(name) -> RichTextFileHandler\n"
"\n"
"Finds a file handler by name.");

extern "C" {static PyObject *meth_wxRichTextBuffer_FindHandlerByName(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_FindHandlerByName(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &name, &nameState))
        {
             ::wxRichTextFileHandler*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::FindHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFileHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_FindHandlerByName, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_FindHandlerByFilename, "FindHandlerByFilename(filename, imageType) -> RichTextFileHandler\n"
"\n"
"Finds a handler by filename or, if supplied, type.");

extern "C" {static PyObject *meth_wxRichTextBuffer_FindHandlerByFilename(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_FindHandlerByFilename(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* filename;
        int filenameState = 0;
         ::wxRichTextFileType imageType;

        static const char *sipKwdList[] = {
            sipName_filename,
            sipName_imageType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1E", sipType_wxString, &filename, &filenameState, sipType_wxRichTextFileType, &imageType))
        {
             ::wxRichTextFileHandler*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::FindHandlerFilenameOrType(*filename,imageType);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(filename), sipType_wxString, filenameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFileHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_FindHandlerByFilename, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetExtWildcard, "GetExtWildcard(combine=False, save=False) -> PyObject\n"
"\n"
"Gets a wildcard string for the file dialog based on all the currently\n"
"loaded richtext file handlers, and a list that can be used to map\n"
"those filter types to the file handler type.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetExtWildcard(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetExtWildcard(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool combine = 0;
        bool save = 0;

        static const char *sipKwdList[] = {
            sipName_combine,
            sipName_save,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "|bb", &combine, &save))
        {
            PyObject * sipRes = SIP_NULLPTR;
            int sipIsErr = 0;
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxRichTextBuffer_GetExtWildcard(combine, save);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetExtWildcard, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_CleanUpHandlers, "CleanUpHandlers()\n"
"\n"
"Clean up file handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_CleanUpHandlers(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_CleanUpHandlers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::CleanUpHandlers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_CleanUpHandlers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InitStandardHandlers, "InitStandardHandlers()\n"
"\n"
"Initialise the standard file handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InitStandardHandlers(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InitStandardHandlers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::InitStandardHandlers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InitStandardHandlers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetDrawingHandlers, "GetDrawingHandlers() -> RichTextDrawingHandlerList\n"
"\n"
"Returns the drawing handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetDrawingHandlers(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetDrawingHandlers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRichTextDrawingHandlerList*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRichTextBuffer::GetDrawingHandlers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextDrawingHandlerList,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetDrawingHandlers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_AddDrawingHandler, "AddDrawingHandler(handler)\n"
"\n"
"Adds a drawing handler to the end.");

extern "C" {static PyObject *meth_wxRichTextBuffer_AddDrawingHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_AddDrawingHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextDrawingHandler* handler;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:", sipType_wxRichTextDrawingHandler, &handler))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::AddDrawingHandler(handler);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_AddDrawingHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_InsertDrawingHandler, "InsertDrawingHandler(handler)\n"
"\n"
"Inserts a drawing handler at the front.");

extern "C" {static PyObject *meth_wxRichTextBuffer_InsertDrawingHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_InsertDrawingHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextDrawingHandler* handler;

        static const char *sipKwdList[] = {
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:", sipType_wxRichTextDrawingHandler, &handler))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::InsertDrawingHandler(handler);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_InsertDrawingHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_RemoveDrawingHandler, "RemoveDrawingHandler(name) -> bool\n"
"\n"
"Removes a drawing handler.");

extern "C" {static PyObject *meth_wxRichTextBuffer_RemoveDrawingHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_RemoveDrawingHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::RemoveDrawingHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_RemoveDrawingHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_FindDrawingHandler, "FindDrawingHandler(name) -> RichTextDrawingHandler\n"
"\n"
"Finds a drawing handler by name.");

extern "C" {static PyObject *meth_wxRichTextBuffer_FindDrawingHandler(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_FindDrawingHandler(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &name, &nameState))
        {
             ::wxRichTextDrawingHandler*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::FindDrawingHandler(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextDrawingHandler,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_FindDrawingHandler, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_CleanUpDrawingHandlers, "CleanUpDrawingHandlers()\n"
"\n"
"Clean up drawing handlers.");

extern "C" {static PyObject *meth_wxRichTextBuffer_CleanUpDrawingHandlers(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_CleanUpDrawingHandlers(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::CleanUpDrawingHandlers();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_CleanUpDrawingHandlers, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_AddFieldType, "AddFieldType(fieldType)\n"
"\n"
"Adds a field type.");

extern "C" {static PyObject *meth_wxRichTextBuffer_AddFieldType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_AddFieldType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextFieldType* fieldType;

        static const char *sipKwdList[] = {
            sipName_fieldType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J:", sipType_wxRichTextFieldType, &fieldType))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::AddFieldType(fieldType);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_AddFieldType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_RemoveFieldType, "RemoveFieldType(name) -> bool\n"
"\n"
"Removes a field type by name.");

extern "C" {static PyObject *meth_wxRichTextBuffer_RemoveFieldType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_RemoveFieldType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::RemoveFieldType(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_RemoveFieldType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_FindFieldType, "FindFieldType(name) -> RichTextFieldType\n"
"\n"
"Finds a field type by name.");

extern "C" {static PyObject *meth_wxRichTextBuffer_FindFieldType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_FindFieldType(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString, &name, &nameState))
        {
             ::wxRichTextFieldType*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::FindFieldType(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name), sipType_wxString, nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextFieldType,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_FindFieldType, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_CleanUpFieldTypes, "CleanUpFieldTypes()\n"
"\n"
"Cleans up field types.");

extern "C" {static PyObject *meth_wxRichTextBuffer_CleanUpFieldTypes(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_CleanUpFieldTypes(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::CleanUpFieldTypes();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_CleanUpFieldTypes, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetRenderer, "GetRenderer() -> RichTextRenderer\n"
"\n"
"Returns the renderer object.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetRenderer(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetRenderer(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRichTextRenderer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::GetRenderer();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextRenderer,SIP_NULLPTR);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetRenderer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetRenderer, "SetRenderer(renderer)\n"
"\n"
"Sets renderer as the object to be used to render certain aspects of\n"
"the content, such as bullets.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetRenderer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetRenderer(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRichTextRenderer* renderer;

        static const char *sipKwdList[] = {
            sipName_renderer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxRichTextRenderer, &renderer))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::SetRenderer(renderer);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetRenderer, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetBulletRightMargin, "GetBulletRightMargin() -> int\n"
"\n"
"Returns the minimum margin between bullet and paragraph in 10ths of a\n"
"mm.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetBulletRightMargin(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetBulletRightMargin(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::GetBulletRightMargin();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetBulletRightMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetBulletRightMargin, "SetBulletRightMargin(margin)\n"
"\n"
"Sets the minimum margin between bullet and paragraph in 10ths of a mm.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetBulletRightMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetBulletRightMargin(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        int margin;

        static const char *sipKwdList[] = {
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "i", &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::SetBulletRightMargin(margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetBulletRightMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetBulletProportion, "GetBulletProportion() -> float\n"
"\n"
"Returns the factor to multiply by character height to get a reasonable\n"
"bullet size.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetBulletProportion(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetBulletProportion(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            float sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::GetBulletProportion();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyFloat_FromDouble((double)sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetBulletProportion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetBulletProportion, "SetBulletProportion(prop)\n"
"\n"
"Sets the factor to multiply by character height to get a reasonable\n"
"bullet size.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetBulletProportion(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetBulletProportion(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        float prop;

        static const char *sipKwdList[] = {
            sipName_prop,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "f", &prop))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::SetBulletProportion(prop);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetBulletProportion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetFloatingLayoutMode, "GetFloatingLayoutMode() -> bool\n"
"\n"
"Returns the floating layout mode.");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetFloatingLayoutMode(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetFloatingLayoutMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRichTextBuffer::GetFloatingLayoutMode();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetFloatingLayoutMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_SetFloatingLayoutMode, "SetFloatingLayoutMode(mode)\n"
"\n"
"Sets the floating layout mode.");

extern "C" {static PyObject *meth_wxRichTextBuffer_SetFloatingLayoutMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_SetFloatingLayoutMode(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        bool mode;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "b", &mode))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxRichTextBuffer::SetFloatingLayoutMode(mode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_SetFloatingLayoutMode, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_Draw, "Draw(self, dc: DC, context: RichTextDrawingContext, range: RichTextRange, selection: RichTextSelection, rect: Rect, descent: int, style: int) -> bool");

extern "C" {static PyObject *meth_wxRichTextBuffer_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J9J1ii", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::Draw(*dc,*context,*range,*selection,*rect,descent,style) : sipCpp->Draw(*dc,*context,*range,*selection,*rect,descent,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect), sipType_wxRect, rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_Draw, doc_wxRichTextBuffer_Draw);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_Layout, "Layout(self, dc: DC, context: RichTextDrawingContext, rect: Rect, parentRect: Rect, style: int) -> bool");

extern "C" {static PyObject *meth_wxRichTextBuffer_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ9J9J1J1i", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::Layout(*dc,*context,*rect,*parentRect,style) : sipCpp->Layout(*dc,*context,*rect,*parentRect,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect), sipType_wxRect, rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect), sipType_wxRect, parentRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_Layout, doc_wxRichTextBuffer_Layout);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRichTextBuffer_GetRangeSize, "GetRangeSize(self, range: RichTextRange, size: Size, dc: DC, context: RichTextDrawingContext, flags: int, position: Point = wxPoint(0,0), parentSize: Size = wxDefaultSize, partialExtents: typing.Optional[object] = None) -> Tuple[bool, int]");

extern "C" {static PyObject *meth_wxRichTextBuffer_GetRangeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextBuffer_GetRangeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxSize* size;
        int sizeState = 0;
        int descent;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int flags;
        const  ::wxPoint& positiondef = wxPoint(0,0);
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& parentSizedef = wxDefaultSize;
        const  ::wxSize* parentSize = &parentSizedef;
        int parentSizeState = 0;
         ::wxArrayInt* partialExtents = 0;
        int partialExtentsState = 0;
        const  ::wxRichTextBuffer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_size,
            sipName_dc,
            sipName_context,
            sipName_flags,
            sipName_position,
            sipName_parentSize,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ1J1J9J9i|J1J1J0", &sipSelf, sipType_wxRichTextBuffer, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxSize, &size, &sizeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &flags, sipType_wxPoint, &position, &positionState, sipType_wxSize, &parentSize, &parentSizeState, sipType_wxArrayInt, &partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextBuffer::GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents) : sipCpp->GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range), sipType_wxRichTextRange, rangeState);
            sipReleaseType(size, sipType_wxSize, sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(position), sipType_wxPoint, positionState);
            sipReleaseType(const_cast< ::wxSize *>(parentSize), sipType_wxSize, parentSizeState);
            sipReleaseType(partialExtents, sipType_wxArrayInt, partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bi)",sipRes,descent);
        }
    }

    sipNoMethod(sipParseErr, sipName_RichTextBuffer, sipName_GetRangeSize, doc_wxRichTextBuffer_GetRangeSize);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextBuffer(void *, const sipTypeDef *);}
static void *cast_wxRichTextBuffer(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextBuffer *sipCpp = reinterpret_cast< ::wxRichTextBuffer *>(sipCppV);

    if (targetType == sipType_wxRichTextBuffer)
        return sipCppV;

    sipCppV = ((const sipClassTypeDef *)sipType_wxRichTextParagraphLayoutBox)->ctd_cast(static_cast< ::wxRichTextParagraphLayoutBox *>(sipCpp), targetType);
    if (sipCppV)
        return sipCppV;

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextBuffer(void *, int);}
static void release_wxRichTextBuffer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextBuffer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextBuffer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void *array_wxRichTextBuffer(Py_ssize_t);}
static void *array_wxRichTextBuffer(Py_ssize_t sipNrElem)
{
    return new  ::wxRichTextBuffer[sipNrElem];
}


extern "C" {static void assign_wxRichTextBuffer(void *, Py_ssize_t, void *);}
static void assign_wxRichTextBuffer(void *sipDst, Py_ssize_t sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextBuffer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextBuffer *>(sipSrc);
}


extern "C" {static void *copy_wxRichTextBuffer(const void *, Py_ssize_t);}
static void *copy_wxRichTextBuffer(const void *sipSrc, Py_ssize_t sipSrcIdx)
{
    return new  ::wxRichTextBuffer(reinterpret_cast<const  ::wxRichTextBuffer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextBuffer(sipSimpleWrapper *);}
static void dealloc_wxRichTextBuffer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextBuffer *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextBuffer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextBuffer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextBuffer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextBuffer *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextBuffer();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextBuffer* obj;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextBuffer, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextBuffer(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextBuffer[] = {{50, 255, 1}};


static PyMethodDef methods_wxRichTextBuffer[] = {
    {sipName_AddDrawingHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_AddDrawingHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_AddDrawingHandler},
    {sipName_AddEventHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_AddEventHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_AddEventHandler},
    {sipName_AddFieldType, SIP_MLMETH_CAST(meth_wxRichTextBuffer_AddFieldType), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_AddFieldType},
    {sipName_AddHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_AddHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_AddHandler},
    {sipName_AddParagraph, SIP_MLMETH_CAST(meth_wxRichTextBuffer_AddParagraph), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_AddParagraph},
    {sipName_BatchingUndo, meth_wxRichTextBuffer_BatchingUndo, METH_VARARGS, doc_wxRichTextBuffer_BatchingUndo},
    {sipName_BeginAlignment, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginAlignment), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginAlignment},
    {sipName_BeginBatchUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginBatchUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginBatchUndo},
    {sipName_BeginBold, meth_wxRichTextBuffer_BeginBold, METH_VARARGS, doc_wxRichTextBuffer_BeginBold},
    {sipName_BeginCharacterStyle, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginCharacterStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginCharacterStyle},
    {sipName_BeginFont, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginFont), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginFont},
    {sipName_BeginFontSize, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginFontSize), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginFontSize},
    {sipName_BeginItalic, meth_wxRichTextBuffer_BeginItalic, METH_VARARGS, doc_wxRichTextBuffer_BeginItalic},
    {sipName_BeginLeftIndent, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginLeftIndent), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginLeftIndent},
    {sipName_BeginLineSpacing, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginLineSpacing), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginLineSpacing},
    {sipName_BeginListStyle, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginListStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginListStyle},
    {sipName_BeginNumberedBullet, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginNumberedBullet), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginNumberedBullet},
    {sipName_BeginParagraphSpacing, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginParagraphSpacing), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginParagraphSpacing},
    {sipName_BeginParagraphStyle, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginParagraphStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginParagraphStyle},
    {sipName_BeginRightIndent, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginRightIndent), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginRightIndent},
    {sipName_BeginStandardBullet, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginStandardBullet), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginStandardBullet},
    {sipName_BeginStyle, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginStyle), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginStyle},
    {sipName_BeginSuppressUndo, meth_wxRichTextBuffer_BeginSuppressUndo, METH_VARARGS, doc_wxRichTextBuffer_BeginSuppressUndo},
    {sipName_BeginSymbolBullet, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginSymbolBullet), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginSymbolBullet},
    {sipName_BeginTextColour, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginTextColour), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginTextColour},
    {sipName_BeginURL, SIP_MLMETH_CAST(meth_wxRichTextBuffer_BeginURL), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_BeginURL},
    {sipName_BeginUnderline, meth_wxRichTextBuffer_BeginUnderline, METH_VARARGS, doc_wxRichTextBuffer_BeginUnderline},
    {sipName_CanPasteFromClipboard, meth_wxRichTextBuffer_CanPasteFromClipboard, METH_VARARGS, doc_wxRichTextBuffer_CanPasteFromClipboard},
    {sipName_CleanUpDrawingHandlers, meth_wxRichTextBuffer_CleanUpDrawingHandlers, METH_VARARGS, doc_wxRichTextBuffer_CleanUpDrawingHandlers},
    {sipName_CleanUpFieldTypes, meth_wxRichTextBuffer_CleanUpFieldTypes, METH_VARARGS, doc_wxRichTextBuffer_CleanUpFieldTypes},
    {sipName_CleanUpHandlers, meth_wxRichTextBuffer_CleanUpHandlers, METH_VARARGS, doc_wxRichTextBuffer_CleanUpHandlers},
    {sipName_ClearEventHandlers, meth_wxRichTextBuffer_ClearEventHandlers, METH_VARARGS, doc_wxRichTextBuffer_ClearEventHandlers},
    {sipName_ClearStyleStack, meth_wxRichTextBuffer_ClearStyleStack, METH_VARARGS, doc_wxRichTextBuffer_ClearStyleStack},
    {sipName_Clone, meth_wxRichTextBuffer_Clone, METH_VARARGS, doc_wxRichTextBuffer_Clone},
    {sipName_Copy, SIP_MLMETH_CAST(meth_wxRichTextBuffer_Copy), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_Copy},
    {sipName_CopyToClipboard, SIP_MLMETH_CAST(meth_wxRichTextBuffer_CopyToClipboard), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_CopyToClipboard},
    {sipName_DeleteRangeWithUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_DeleteRangeWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_DeleteRangeWithUndo},
    {sipName_Draw, SIP_MLMETH_CAST(meth_wxRichTextBuffer_Draw), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_Draw},
    {sipName_EndAlignment, meth_wxRichTextBuffer_EndAlignment, METH_VARARGS, doc_wxRichTextBuffer_EndAlignment},
    {sipName_EndAllStyles, meth_wxRichTextBuffer_EndAllStyles, METH_VARARGS, doc_wxRichTextBuffer_EndAllStyles},
    {sipName_EndBatchUndo, meth_wxRichTextBuffer_EndBatchUndo, METH_VARARGS, doc_wxRichTextBuffer_EndBatchUndo},
    {sipName_EndBold, meth_wxRichTextBuffer_EndBold, METH_VARARGS, doc_wxRichTextBuffer_EndBold},
    {sipName_EndCharacterStyle, meth_wxRichTextBuffer_EndCharacterStyle, METH_VARARGS, doc_wxRichTextBuffer_EndCharacterStyle},
    {sipName_EndFont, meth_wxRichTextBuffer_EndFont, METH_VARARGS, doc_wxRichTextBuffer_EndFont},
    {sipName_EndFontSize, meth_wxRichTextBuffer_EndFontSize, METH_VARARGS, doc_wxRichTextBuffer_EndFontSize},
    {sipName_EndItalic, meth_wxRichTextBuffer_EndItalic, METH_VARARGS, doc_wxRichTextBuffer_EndItalic},
    {sipName_EndLeftIndent, meth_wxRichTextBuffer_EndLeftIndent, METH_VARARGS, doc_wxRichTextBuffer_EndLeftIndent},
    {sipName_EndLineSpacing, meth_wxRichTextBuffer_EndLineSpacing, METH_VARARGS, doc_wxRichTextBuffer_EndLineSpacing},
    {sipName_EndListStyle, meth_wxRichTextBuffer_EndListStyle, METH_VARARGS, doc_wxRichTextBuffer_EndListStyle},
    {sipName_EndNumberedBullet, meth_wxRichTextBuffer_EndNumberedBullet, METH_VARARGS, doc_wxRichTextBuffer_EndNumberedBullet},
    {sipName_EndParagraphSpacing, meth_wxRichTextBuffer_EndParagraphSpacing, METH_VARARGS, doc_wxRichTextBuffer_EndParagraphSpacing},
    {sipName_EndParagraphStyle, meth_wxRichTextBuffer_EndParagraphStyle, METH_VARARGS, doc_wxRichTextBuffer_EndParagraphStyle},
    {sipName_EndRightIndent, meth_wxRichTextBuffer_EndRightIndent, METH_VARARGS, doc_wxRichTextBuffer_EndRightIndent},
    {sipName_EndStandardBullet, meth_wxRichTextBuffer_EndStandardBullet, METH_VARARGS, doc_wxRichTextBuffer_EndStandardBullet},
    {sipName_EndStyle, meth_wxRichTextBuffer_EndStyle, METH_VARARGS, doc_wxRichTextBuffer_EndStyle},
    {sipName_EndSuppressUndo, meth_wxRichTextBuffer_EndSuppressUndo, METH_VARARGS, doc_wxRichTextBuffer_EndSuppressUndo},
    {sipName_EndSymbolBullet, meth_wxRichTextBuffer_EndSymbolBullet, METH_VARARGS, doc_wxRichTextBuffer_EndSymbolBullet},
    {sipName_EndTextColour, meth_wxRichTextBuffer_EndTextColour, METH_VARARGS, doc_wxRichTextBuffer_EndTextColour},
    {sipName_EndURL, meth_wxRichTextBuffer_EndURL, METH_VARARGS, doc_wxRichTextBuffer_EndURL},
    {sipName_EndUnderline, meth_wxRichTextBuffer_EndUnderline, METH_VARARGS, doc_wxRichTextBuffer_EndUnderline},
    {sipName_FindDrawingHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_FindDrawingHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_FindDrawingHandler},
    {sipName_FindFieldType, SIP_MLMETH_CAST(meth_wxRichTextBuffer_FindFieldType), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_FindFieldType},
    {sipName_FindHandlerByExtension, SIP_MLMETH_CAST(meth_wxRichTextBuffer_FindHandlerByExtension), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_FindHandlerByExtension},
    {sipName_FindHandlerByFilename, SIP_MLMETH_CAST(meth_wxRichTextBuffer_FindHandlerByFilename), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_FindHandlerByFilename},
    {sipName_FindHandlerByName, SIP_MLMETH_CAST(meth_wxRichTextBuffer_FindHandlerByName), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_FindHandlerByName},
    {sipName_FindHandlerByType, SIP_MLMETH_CAST(meth_wxRichTextBuffer_FindHandlerByType), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_FindHandlerByType},
    {sipName_GetBatchedCommand, meth_wxRichTextBuffer_GetBatchedCommand, METH_VARARGS, doc_wxRichTextBuffer_GetBatchedCommand},
    {sipName_GetBulletProportion, meth_wxRichTextBuffer_GetBulletProportion, METH_VARARGS, doc_wxRichTextBuffer_GetBulletProportion},
    {sipName_GetBulletRightMargin, meth_wxRichTextBuffer_GetBulletRightMargin, METH_VARARGS, doc_wxRichTextBuffer_GetBulletRightMargin},
    {sipName_GetCommandProcessor, meth_wxRichTextBuffer_GetCommandProcessor, METH_VARARGS, doc_wxRichTextBuffer_GetCommandProcessor},
    {sipName_GetDimensionScale, meth_wxRichTextBuffer_GetDimensionScale, METH_VARARGS, doc_wxRichTextBuffer_GetDimensionScale},
    {sipName_GetDrawingHandlers, meth_wxRichTextBuffer_GetDrawingHandlers, METH_VARARGS, doc_wxRichTextBuffer_GetDrawingHandlers},
    {sipName_GetExtWildcard, SIP_MLMETH_CAST(meth_wxRichTextBuffer_GetExtWildcard), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_GetExtWildcard},
    {sipName_GetFloatingLayoutMode, meth_wxRichTextBuffer_GetFloatingLayoutMode, METH_VARARGS, doc_wxRichTextBuffer_GetFloatingLayoutMode},
    {sipName_GetFontScale, meth_wxRichTextBuffer_GetFontScale, METH_VARARGS, doc_wxRichTextBuffer_GetFontScale},
    {sipName_GetFontTable, meth_wxRichTextBuffer_GetFontTable, METH_VARARGS, doc_wxRichTextBuffer_GetFontTable},
    {sipName_GetHandlerFlags, meth_wxRichTextBuffer_GetHandlerFlags, METH_VARARGS, doc_wxRichTextBuffer_GetHandlerFlags},
    {sipName_GetHandlers, meth_wxRichTextBuffer_GetHandlers, METH_VARARGS, doc_wxRichTextBuffer_GetHandlers},
    {sipName_GetRangeSize, SIP_MLMETH_CAST(meth_wxRichTextBuffer_GetRangeSize), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_GetRangeSize},
    {sipName_GetRenderer, meth_wxRichTextBuffer_GetRenderer, METH_VARARGS, doc_wxRichTextBuffer_GetRenderer},
    {sipName_GetScale, meth_wxRichTextBuffer_GetScale, METH_VARARGS, doc_wxRichTextBuffer_GetScale},
    {sipName_GetStyleSheet, meth_wxRichTextBuffer_GetStyleSheet, METH_VARARGS, doc_wxRichTextBuffer_GetStyleSheet},
    {sipName_GetStyleStackSize, meth_wxRichTextBuffer_GetStyleStackSize, METH_VARARGS, doc_wxRichTextBuffer_GetStyleStackSize},
    {sipName_HitTest, SIP_MLMETH_CAST(meth_wxRichTextBuffer_HitTest), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_HitTest},
    {sipName_Init, meth_wxRichTextBuffer_Init, METH_VARARGS, doc_wxRichTextBuffer_Init},
    {sipName_InitStandardHandlers, meth_wxRichTextBuffer_InitStandardHandlers, METH_VARARGS, doc_wxRichTextBuffer_InitStandardHandlers},
    {sipName_InsertDrawingHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertDrawingHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertDrawingHandler},
    {sipName_InsertHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertHandler},
    {sipName_InsertImageWithUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertImageWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertImageWithUndo},
    {sipName_InsertNewlineWithUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertNewlineWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertNewlineWithUndo},
    {sipName_InsertObjectWithUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertObjectWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertObjectWithUndo},
    {sipName_InsertParagraphsWithUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertParagraphsWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertParagraphsWithUndo},
    {sipName_InsertTextWithUndo, SIP_MLMETH_CAST(meth_wxRichTextBuffer_InsertTextWithUndo), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_InsertTextWithUndo},
    {sipName_IsModified, meth_wxRichTextBuffer_IsModified, METH_VARARGS, doc_wxRichTextBuffer_IsModified},
    {sipName_Layout, SIP_MLMETH_CAST(meth_wxRichTextBuffer_Layout), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_Layout},
    {sipName_LoadFile, SIP_MLMETH_CAST(meth_wxRichTextBuffer_LoadFile), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_LoadFile},
    {sipName_Modify, SIP_MLMETH_CAST(meth_wxRichTextBuffer_Modify), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_Modify},
    {sipName_PasteFromClipboard, SIP_MLMETH_CAST(meth_wxRichTextBuffer_PasteFromClipboard), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_PasteFromClipboard},
    {sipName_PopStyleSheet, meth_wxRichTextBuffer_PopStyleSheet, METH_VARARGS, doc_wxRichTextBuffer_PopStyleSheet},
    {sipName_PushStyleSheet, SIP_MLMETH_CAST(meth_wxRichTextBuffer_PushStyleSheet), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_PushStyleSheet},
    {sipName_RemoveDrawingHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_RemoveDrawingHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_RemoveDrawingHandler},
    {sipName_RemoveEventHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_RemoveEventHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_RemoveEventHandler},
    {sipName_RemoveFieldType, SIP_MLMETH_CAST(meth_wxRichTextBuffer_RemoveFieldType), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_RemoveFieldType},
    {sipName_RemoveHandler, SIP_MLMETH_CAST(meth_wxRichTextBuffer_RemoveHandler), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_RemoveHandler},
    {sipName_ResetAndClearCommands, meth_wxRichTextBuffer_ResetAndClearCommands, METH_VARARGS, doc_wxRichTextBuffer_ResetAndClearCommands},
    {sipName_SaveFile, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SaveFile), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SaveFile},
    {sipName_SendEvent, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SendEvent), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SendEvent},
    {sipName_SetBulletProportion, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetBulletProportion), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetBulletProportion},
    {sipName_SetBulletRightMargin, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetBulletRightMargin), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetBulletRightMargin},
    {sipName_SetDimensionScale, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetDimensionScale), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetDimensionScale},
    {sipName_SetFloatingLayoutMode, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetFloatingLayoutMode), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetFloatingLayoutMode},
    {sipName_SetFontScale, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetFontScale), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetFontScale},
    {sipName_SetFontTable, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetFontTable), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetFontTable},
    {sipName_SetHandlerFlags, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetHandlerFlags), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetHandlerFlags},
    {sipName_SetRenderer, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetRenderer), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetRenderer},
    {sipName_SetScale, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetScale), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetScale},
    {sipName_SetStyleSheet, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetStyleSheet), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetStyleSheet},
    {sipName_SetStyleSheetAndNotify, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SetStyleSheetAndNotify), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SetStyleSheetAndNotify},
    {sipName_SubmitAction, SIP_MLMETH_CAST(meth_wxRichTextBuffer_SubmitAction), METH_VARARGS|METH_KEYWORDS, doc_wxRichTextBuffer_SubmitAction},
    {sipName_SuppressingUndo, meth_wxRichTextBuffer_SuppressingUndo, METH_VARARGS, doc_wxRichTextBuffer_SuppressingUndo}
};

sipVariableDef variables_wxRichTextBuffer[] = {
    {PropertyVariable, sipName_StyleStackSize, &methods_wxRichTextBuffer[82], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_StyleSheet, &methods_wxRichTextBuffer[81], &methods_wxRichTextBuffer[116], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_Scale, &methods_wxRichTextBuffer[80], &methods_wxRichTextBuffer[115], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_HandlerFlags, &methods_wxRichTextBuffer[76], &methods_wxRichTextBuffer[113], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FontTable, &methods_wxRichTextBuffer[75], &methods_wxRichTextBuffer[112], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_FontScale, &methods_wxRichTextBuffer[74], &methods_wxRichTextBuffer[111], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_DimensionScale, &methods_wxRichTextBuffer[70], &methods_wxRichTextBuffer[109], SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_CommandProcessor, &methods_wxRichTextBuffer[69], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_BatchedCommand, &methods_wxRichTextBuffer[66], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRichTextBuffer, "RichTextBuffer()\n"
"RichTextBuffer(obj)\n"
"\n"
"This is a kind of paragraph layout box, used to represent the whole\n"
"buffer.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextBuffer = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextBuffer,
        SIP_NULLPTR,
        SIP_NULLPTR
    },
    {
        sipNameNr_RichTextBuffer,
        {0, 0, 1},
        120, methods_wxRichTextBuffer,
        0, SIP_NULLPTR,
        9, variables_wxRichTextBuffer,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRichTextBuffer,
    -1,
    -1,
    supers_wxRichTextBuffer,
    SIP_NULLPTR,
    init_type_wxRichTextBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    dealloc_wxRichTextBuffer,
    assign_wxRichTextBuffer,
    array_wxRichTextBuffer,
    copy_wxRichTextBuffer,
    release_wxRichTextBuffer,
    cast_wxRichTextBuffer,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
};
